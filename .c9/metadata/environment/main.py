{"filter":false,"title":"main.py","tooltip":"/main.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":1251,"column":16},"end":{"row":1251,"column":17},"action":"remove","lines":["_"],"id":52},{"start":{"row":1251,"column":15},"end":{"row":1251,"column":16},"action":"remove","lines":["i"]},{"start":{"row":1251,"column":14},"end":{"row":1251,"column":15},"action":"remove","lines":["c"]},{"start":{"row":1251,"column":13},"end":{"row":1251,"column":14},"action":"remove","lines":["a"]},{"start":{"row":1251,"column":12},"end":{"row":1251,"column":13},"action":"remove","lines":["_"]},{"start":{"row":1251,"column":11},"end":{"row":1251,"column":12},"action":"remove","lines":["f"]},{"start":{"row":1251,"column":10},"end":{"row":1251,"column":11},"action":"remove","lines":["a"]}],[{"start":{"row":1251,"column":10},"end":{"row":1251,"column":11},"action":"insert","lines":["a"],"id":53},{"start":{"row":1251,"column":11},"end":{"row":1251,"column":12},"action":"insert","lines":["f"]},{"start":{"row":1251,"column":12},"end":{"row":1251,"column":13},"action":"insert","lines":["_"]},{"start":{"row":1251,"column":13},"end":{"row":1251,"column":14},"action":"insert","lines":["a"]}],[{"start":{"row":1251,"column":14},"end":{"row":1251,"column":15},"action":"insert","lines":["c"],"id":54},{"start":{"row":1251,"column":15},"end":{"row":1251,"column":16},"action":"insert","lines":["c"]},{"start":{"row":1251,"column":16},"end":{"row":1251,"column":17},"action":"insert","lines":["e"]},{"start":{"row":1251,"column":17},"end":{"row":1251,"column":18},"action":"insert","lines":["s"]},{"start":{"row":1251,"column":18},"end":{"row":1251,"column":19},"action":"insert","lines":["s"]},{"start":{"row":1251,"column":19},"end":{"row":1251,"column":20},"action":"insert","lines":["_"]}],[{"start":{"row":1378,"column":4},"end":{"row":1378,"column":16},"action":"insert","lines":["leaf_access_"],"id":55}],[{"start":{"row":1289,"column":4},"end":{"row":1289,"column":31},"action":"remove","lines":["generate_terraform_hcl_for_"],"id":56},{"start":{"row":1289,"column":4},"end":{"row":1289,"column":5},"action":"insert","lines":["t"]},{"start":{"row":1289,"column":5},"end":{"row":1289,"column":6},"action":"insert","lines":["f"]},{"start":{"row":1289,"column":6},"end":{"row":1289,"column":7},"action":"insert","lines":["_"]},{"start":{"row":1289,"column":7},"end":{"row":1289,"column":8},"action":"insert","lines":["c"]},{"start":{"row":1289,"column":8},"end":{"row":1289,"column":9},"action":"insert","lines":["i"]},{"start":{"row":1289,"column":9},"end":{"row":1289,"column":10},"action":"insert","lines":["s"]},{"start":{"row":1289,"column":10},"end":{"row":1289,"column":11},"action":"insert","lines":["c"]},{"start":{"row":1289,"column":11},"end":{"row":1289,"column":12},"action":"insert","lines":["o"]}],[{"start":{"row":1289,"column":12},"end":{"row":1289,"column":13},"action":"insert","lines":["d"],"id":57},{"start":{"row":1289,"column":13},"end":{"row":1289,"column":14},"action":"insert","lines":["e"]},{"start":{"row":1289,"column":14},"end":{"row":1289,"column":15},"action":"insert","lines":["v"]},{"start":{"row":1289,"column":15},"end":{"row":1289,"column":16},"action":"insert","lines":["n"]},{"start":{"row":1289,"column":16},"end":{"row":1289,"column":17},"action":"insert","lines":["e"]},{"start":{"row":1289,"column":17},"end":{"row":1289,"column":18},"action":"insert","lines":["t"]},{"start":{"row":1289,"column":18},"end":{"row":1289,"column":19},"action":"insert","lines":["_"]},{"start":{"row":1289,"column":19},"end":{"row":1289,"column":20},"action":"insert","lines":["a"]},{"start":{"row":1289,"column":20},"end":{"row":1289,"column":21},"action":"insert","lines":["c"]},{"start":{"row":1289,"column":21},"end":{"row":1289,"column":22},"action":"insert","lines":["i"]}],[{"start":{"row":1289,"column":22},"end":{"row":1289,"column":23},"action":"insert","lines":["_"],"id":58},{"start":{"row":1289,"column":23},"end":{"row":1289,"column":24},"action":"insert","lines":["l"]},{"start":{"row":1289,"column":24},"end":{"row":1289,"column":25},"action":"insert","lines":["e"]},{"start":{"row":1289,"column":25},"end":{"row":1289,"column":26},"action":"insert","lines":["a"]},{"start":{"row":1289,"column":26},"end":{"row":1289,"column":27},"action":"insert","lines":["f"]},{"start":{"row":1289,"column":27},"end":{"row":1289,"column":28},"action":"insert","lines":["_"]},{"start":{"row":1289,"column":28},"end":{"row":1289,"column":29},"action":"insert","lines":["a"]}],[{"start":{"row":1289,"column":29},"end":{"row":1289,"column":30},"action":"insert","lines":["c"],"id":59},{"start":{"row":1289,"column":30},"end":{"row":1289,"column":31},"action":"insert","lines":["c"]},{"start":{"row":1289,"column":31},"end":{"row":1289,"column":32},"action":"insert","lines":["e"]},{"start":{"row":1289,"column":32},"end":{"row":1289,"column":33},"action":"insert","lines":["s"]},{"start":{"row":1289,"column":33},"end":{"row":1289,"column":34},"action":"insert","lines":["s"]},{"start":{"row":1289,"column":34},"end":{"row":1289,"column":35},"action":"insert","lines":["_"]}],[{"start":{"row":1322,"column":4},"end":{"row":1322,"column":33},"action":"remove","lines":["generate_import_commands_for_"],"id":60},{"start":{"row":1322,"column":4},"end":{"row":1322,"column":35},"action":"insert","lines":["tf_ciscodevnet_aci_leaf_access_"]}],[{"start":{"row":1395,"column":0},"end":{"row":1395,"column":27},"action":"remove","lines":["generate_terraform_hcl_for_"],"id":61},{"start":{"row":1395,"column":0},"end":{"row":1395,"column":31},"action":"insert","lines":["tf_ciscodevnet_aci_leaf_access_"]}],[{"start":{"row":1396,"column":0},"end":{"row":1396,"column":29},"action":"remove","lines":["generate_import_commands_for_"],"id":62},{"start":{"row":1396,"column":0},"end":{"row":1396,"column":31},"action":"insert","lines":["tf_ciscodevnet_aci_leaf_access_"]}],[{"start":{"row":1322,"column":52},"end":{"row":1322,"column":53},"action":"insert","lines":["_"],"id":63},{"start":{"row":1322,"column":53},"end":{"row":1322,"column":54},"action":"insert","lines":["c"]},{"start":{"row":1322,"column":54},"end":{"row":1322,"column":55},"action":"insert","lines":["o"]},{"start":{"row":1322,"column":55},"end":{"row":1322,"column":56},"action":"insert","lines":["m"]},{"start":{"row":1322,"column":56},"end":{"row":1322,"column":57},"action":"insert","lines":["m"]},{"start":{"row":1322,"column":57},"end":{"row":1322,"column":58},"action":"insert","lines":["a"]},{"start":{"row":1322,"column":58},"end":{"row":1322,"column":59},"action":"insert","lines":["n"]},{"start":{"row":1322,"column":59},"end":{"row":1322,"column":60},"action":"insert","lines":["d"]},{"start":{"row":1322,"column":60},"end":{"row":1322,"column":61},"action":"insert","lines":["s"]}],[{"start":{"row":1396,"column":48},"end":{"row":1396,"column":57},"action":"insert","lines":["_commands"],"id":64}],[{"start":{"row":1332,"column":16},"end":{"row":1332,"column":33},"action":"remove","lines":["ort_policy_group_"],"id":65},{"start":{"row":1332,"column":15},"end":{"row":1332,"column":16},"action":"remove","lines":["p"]}],[{"start":{"row":1305,"column":15},"end":{"row":1305,"column":32},"action":"remove","lines":["port_policy_group"],"id":66},{"start":{"row":1305,"column":15},"end":{"row":1305,"column":16},"action":"insert","lines":["i"]},{"start":{"row":1305,"column":16},"end":{"row":1305,"column":17},"action":"insert","lines":["m"]},{"start":{"row":1305,"column":17},"end":{"row":1305,"column":18},"action":"insert","lines":["p"]},{"start":{"row":1305,"column":18},"end":{"row":1305,"column":19},"action":"insert","lines":["o"]},{"start":{"row":1305,"column":19},"end":{"row":1305,"column":20},"action":"insert","lines":["r"]},{"start":{"row":1305,"column":20},"end":{"row":1305,"column":21},"action":"insert","lines":["t"]}],[{"start":{"row":1237,"column":43},"end":{"row":1237,"column":44},"action":"insert","lines":["l"],"id":67},{"start":{"row":1237,"column":44},"end":{"row":1237,"column":45},"action":"insert","lines":["e"]},{"start":{"row":1237,"column":45},"end":{"row":1237,"column":46},"action":"insert","lines":["a"]},{"start":{"row":1237,"column":46},"end":{"row":1237,"column":47},"action":"insert","lines":["f"]},{"start":{"row":1237,"column":47},"end":{"row":1237,"column":48},"action":"insert","lines":["_"]},{"start":{"row":1237,"column":48},"end":{"row":1237,"column":49},"action":"insert","lines":["a"]},{"start":{"row":1237,"column":49},"end":{"row":1237,"column":50},"action":"insert","lines":["c"]},{"start":{"row":1237,"column":50},"end":{"row":1237,"column":51},"action":"insert","lines":["c"]},{"start":{"row":1237,"column":51},"end":{"row":1237,"column":52},"action":"insert","lines":["e"]},{"start":{"row":1237,"column":52},"end":{"row":1237,"column":53},"action":"insert","lines":["s"]},{"start":{"row":1237,"column":53},"end":{"row":1237,"column":54},"action":"insert","lines":["s"]}],[{"start":{"row":1237,"column":54},"end":{"row":1237,"column":55},"action":"insert","lines":["_"],"id":68}],[{"start":{"row":1237,"column":55},"end":{"row":1237,"column":76},"action":"remove","lines":["port_policy_group.csv"],"id":69},{"start":{"row":1237,"column":55},"end":{"row":1237,"column":88},"action":"insert","lines":["leaf_access_port_policy_group.csv"]},{"start":{"row":1259,"column":40},"end":{"row":1259,"column":61},"action":"remove","lines":["port_policy_group.csv"]},{"start":{"row":1259,"column":40},"end":{"row":1259,"column":73},"action":"insert","lines":["leaf_access_port_policy_group.csv"]},{"start":{"row":1290,"column":44},"end":{"row":1290,"column":65},"action":"remove","lines":["port_policy_group.csv"]},{"start":{"row":1290,"column":44},"end":{"row":1290,"column":77},"action":"insert","lines":["leaf_access_port_policy_group.csv"]},{"start":{"row":1323,"column":44},"end":{"row":1323,"column":65},"action":"remove","lines":["port_policy_group.csv"]},{"start":{"row":1323,"column":44},"end":{"row":1323,"column":77},"action":"insert","lines":["leaf_access_port_policy_group.csv"]}],[{"start":{"row":1237,"column":54},"end":{"row":1237,"column":66},"action":"remove","lines":["_leaf_access"],"id":70}],[{"start":{"row":1346,"column":19},"end":{"row":1346,"column":37},"action":"remove","lines":["port_policy_group_"],"id":71}],[{"start":{"row":1318,"column":19},"end":{"row":1318,"column":36},"action":"remove","lines":["port_policy_group"],"id":72},{"start":{"row":1318,"column":19},"end":{"row":1318,"column":20},"action":"insert","lines":["i"]},{"start":{"row":1318,"column":20},"end":{"row":1318,"column":21},"action":"insert","lines":["m"]},{"start":{"row":1318,"column":21},"end":{"row":1318,"column":22},"action":"insert","lines":["p"]},{"start":{"row":1318,"column":22},"end":{"row":1318,"column":23},"action":"insert","lines":["o"]},{"start":{"row":1318,"column":23},"end":{"row":1318,"column":24},"action":"insert","lines":["r"]},{"start":{"row":1318,"column":24},"end":{"row":1318,"column":25},"action":"insert","lines":["t"]}],[{"start":{"row":1323,"column":0},"end":{"row":1347,"column":48},"action":"remove","lines":["    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"],"id":73},{"start":{"row":1323,"column":0},"end":{"row":1346,"column":48},"action":"insert","lines":["    csv_filepath = os.path.join(\"data\", \"port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.tf', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","","    if new_commands_content:","        with open('import_commands.tf', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"]}],[{"start":{"row":1323,"column":41},"end":{"row":1323,"column":42},"action":"insert","lines":["p"],"id":74},{"start":{"row":1323,"column":42},"end":{"row":1323,"column":43},"action":"insert","lines":["y"]},{"start":{"row":1323,"column":43},"end":{"row":1323,"column":44},"action":"insert","lines":["_"]}],[{"start":{"row":1323,"column":44},"end":{"row":1323,"column":45},"action":"insert","lines":["l"],"id":75},{"start":{"row":1323,"column":45},"end":{"row":1323,"column":46},"action":"insert","lines":["e"]},{"start":{"row":1323,"column":46},"end":{"row":1323,"column":47},"action":"insert","lines":["a"]}],[{"start":{"row":1323,"column":41},"end":{"row":1323,"column":47},"action":"remove","lines":["py_lea"],"id":76},{"start":{"row":1323,"column":41},"end":{"row":1323,"column":78},"action":"insert","lines":["py_leaf_access_port_policy_group.csv\""]}],[{"start":{"row":1323,"column":78},"end":{"row":1323,"column":100},"action":"remove","lines":["port_policy_group.csv\""],"id":77}],[{"start":{"row":1290,"column":0},"end":{"row":1320,"column":0},"action":"remove","lines":["    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    port_policy_group_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name = \"{{infraAccPortGrp_name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_terraform_content += port_policy_group_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)",""],"id":78},{"start":{"row":1290,"column":0},"end":{"row":1317,"column":42},"action":"insert","lines":["    csv_filepath = os.path.join(\"data\", \"port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name        = \"{{infraAccPortGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_hcl_content += hcl_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)"]}],[{"start":{"row":1290,"column":41},"end":{"row":1290,"column":62},"action":"remove","lines":["port_policy_group.csv"],"id":79},{"start":{"row":1290,"column":41},"end":{"row":1290,"column":42},"action":"insert","lines":["p"]},{"start":{"row":1290,"column":42},"end":{"row":1290,"column":43},"action":"insert","lines":["y"]},{"start":{"row":1290,"column":43},"end":{"row":1290,"column":44},"action":"insert","lines":["_"]}],[{"start":{"row":1290,"column":44},"end":{"row":1290,"column":45},"action":"insert","lines":["l"],"id":80},{"start":{"row":1290,"column":45},"end":{"row":1290,"column":46},"action":"insert","lines":["e"]},{"start":{"row":1290,"column":46},"end":{"row":1290,"column":47},"action":"insert","lines":["a"]},{"start":{"row":1290,"column":47},"end":{"row":1290,"column":48},"action":"insert","lines":["f"]}],[{"start":{"row":1290,"column":41},"end":{"row":1290,"column":48},"action":"remove","lines":["py_leaf"],"id":81},{"start":{"row":1290,"column":41},"end":{"row":1290,"column":77},"action":"insert","lines":["py_leaf_access_port_policy_group.csv"]}],[{"start":{"row":1342,"column":36},"end":{"row":1342,"column":37},"action":"remove","lines":["f"],"id":82}],[{"start":{"row":1342,"column":36},"end":{"row":1342,"column":37},"action":"insert","lines":["x"],"id":83},{"start":{"row":1342,"column":37},"end":{"row":1342,"column":38},"action":"insert","lines":["t"]}],[{"start":{"row":1235,"column":0},"end":{"row":1249,"column":78},"action":"remove","lines":["def leaf_access_port_policy_group_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_leaf_access_port_policy_group.csv\")","    headers = [","        \"APIC\", \"infraAccPortGrp_name\", \"infraAccPortGrp_dn\"","    ]","","    if not os.path.exists(directory):","        os.makedirs(directory)","","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")"],"id":84},{"start":{"row":1235,"column":0},"end":{"row":1249,"column":78},"action":"insert","lines":["def leaf_access_port_policy_group_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_leaf_access_port_policy_group.csv\")","    headers = [","        \"APIC\", \"infraAccPortGrp_name\", \"infraAccPortGrp_dn\"","    ]","","    if not os.path.exists(directory):","        os.makedirs(directory)","","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")"]}],[{"start":{"row":1251,"column":0},"end":{"row":1288,"column":0},"action":"remove","lines":["def get_leaf_access_port_policy_groups(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortGrp\"","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAccPortGrp_name = entry[\"infraAccPortGrp\"][\"attributes\"][\"name\"]","            infraAccPortGrp_dn = entry[\"infraAccPortGrp\"][\"attributes\"][\"dn\"]","","            row_as_list = [","                os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                infraAccPortGrp_name,","                infraAccPortGrp_dn","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","","    else:","        print(f\"Failed to retrieve Port Policy Groups. Status code: {response.status_code}\")",""],"id":85},{"start":{"row":1251,"column":0},"end":{"row":1286,"column":92},"action":"insert","lines":["def get_leaf_access_port_policy_groups(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortGrp\"","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAccPortGrp_name = entry[\"infraAccPortGrp\"][\"attributes\"][\"name\"]","            infraAccPortGrp_dn = entry[\"infraAccPortGrp\"][\"attributes\"][\"dn\"]","","            row_as_list = [","                os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                infraAccPortGrp_name,","                infraAccPortGrp_dn","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve Port Policy Groups. Status code: {response.status_code}\")"]}],[{"start":{"row":1286,"column":92},"end":{"row":1287,"column":0},"action":"insert","lines":["",""],"id":86},{"start":{"row":1287,"column":0},"end":{"row":1287,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":1288,"column":0},"end":{"row":1316,"column":42},"action":"remove","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name        = \"{{infraAccPortGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_hcl_content += hcl_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)"],"id":87},{"start":{"row":1288,"column":0},"end":{"row":1316,"column":42},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name        = \"{{infraAccPortGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_hcl_content += hcl_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)"]}],[{"start":{"row":1318,"column":0},"end":{"row":1342,"column":48},"action":"remove","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group_commands():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.tf', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"],"id":88},{"start":{"row":1318,"column":0},"end":{"row":1342,"column":48},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group_commands():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"]}],[{"start":{"row":1342,"column":48},"end":{"row":1343,"column":0},"action":"remove","lines":["",""],"id":89}],[{"start":{"row":1288,"column":0},"end":{"row":1316,"column":42},"action":"remove","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name        = \"{{infraAccPortGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_hcl_content += hcl_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)"],"id":90},{"start":{"row":1288,"column":0},"end":{"row":1321,"column":42},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_port_policy_group\" \"{{infraAccPortGrp_name}}\" {","    name        = \"{{infraAccPortGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        specific_resource_line = f'resource \"aci_leaf_access_port_policy_group\" \"{entry[\"infraAccPortGrp_name\"]}\"'","        ","        if specific_resource_line not in existing_content:","            print(f\"Adding HCL for: {entry['infraAccPortGrp_name']}\")","            new_hcl_content += hcl_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name']","            )","        else:","            print(f\"Entry {entry['infraAccPortGrp_name']} already exists in import.tf\")","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)"]}],[{"start":{"row":1323,"column":0},"end":{"row":1347,"column":48},"action":"remove","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group_commands():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        if entry['infraAccPortGrp_name'] not in existing_content:","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"],"id":91},{"start":{"row":1323,"column":0},"end":{"row":1353,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_port_policy_group_commands():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_port_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_port_policy_group.{{infraAccPortGrp_name}} {{infraAccPortGrp_dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        specific_command_line = f'terraform import aci_leaf_access_port_policy_group.{entry[\"infraAccPortGrp_name\"]}'","        ","        if specific_command_line not in existing_content:","            print(f\"Adding command for: {entry['infraAccPortGrp_name']}\")","            new_commands_content += command_template.render(","                infraAccPortGrp_name=entry['infraAccPortGrp_name'],","                infraAccPortGrp_dn=entry['infraAccPortGrp_dn']","            )","        else:","            print(f\"Command for {entry['infraAccPortGrp_name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)",""]}],[{"start":{"row":1352,"column":48},"end":{"row":1353,"column":0},"action":"remove","lines":["",""],"id":92}],[{"start":{"row":1159,"column":0},"end":{"row":1190,"column":48},"action":"remove","lines":["    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    added_interface_profiles = set()","","    for entry in entries:","        interface_profile_id = f\"{entry['infraAccPortP_name']}-{entry['infraHPortS_name']}\"","        if entry['infraAccPortP_name'] not in added_interface_profiles:","            new_terraform_content += interface_profile_template.render(","                infraAccPortP_name=entry['infraAccPortP_name']","            )","            added_interface_profiles.add(entry['infraAccPortP_name'])","","        if interface_profile_id not in existing_content:","            new_terraform_content += access_port_selector_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraHPortS_name=entry['infraHPortS_name']","            )","            new_terraform_content += access_port_block_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraHPortS_name=entry['infraHPortS_name'],","                infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","                infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","                infraPortBlk_toCard=entry['infraPortBlk_toCard'],","                infraPortBlk_toPort=entry['infraPortBlk_toPort']","            )","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)"],"id":93},{"start":{"row":1159,"column":0},"end":{"row":1197,"column":48},"action":"insert","lines":[" with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        interface_profile_resource = interface_profile_template.render(","            infraAccPortP_name=entry['infraAccPortP_name']","        )","        access_port_selector_resource = access_port_selector_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name']","        )","        access_port_block_resource = access_port_block_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name'],","            infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","            infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","            infraPortBlk_toCard=entry['infraPortBlk_toCard'],","            infraPortBlk_toPort=entry['infraPortBlk_toPort']","        )","","        # Check if each resource doesn't exist before adding it","        if entry['infraAccPortP_name'] not in existing_content:","            new_terraform_content += interface_profile_resource","            existing_content += interface_profile_resource  # Update the existing_content to avoid duplication","","        if entry['infraHPortS_name'] not in existing_content:","            new_terraform_content += access_port_selector_resource","            existing_content += access_port_selector_resource  # Update the existing_content to avoid duplication","","        if f\"{entry['infraAccPortP_name']}-{entry['infraHPortS_name']}-E{entry['infraPortBlk_fromCard']}_{entry['infraPortBlk_fromPort']}\" not in existing_content:","            new_terraform_content += access_port_block_resource","            existing_content += access_port_block_resource  # Update the existing_content to avoid duplication","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)"]}],[{"start":{"row":1159,"column":0},"end":{"row":1159,"column":4},"action":"insert","lines":["    "],"id":96},{"start":{"row":1160,"column":0},"end":{"row":1160,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1161,"column":0},"end":{"row":1161,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1162,"column":0},"end":{"row":1162,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1163,"column":0},"end":{"row":1163,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1164,"column":0},"end":{"row":1164,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1165,"column":0},"end":{"row":1165,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1166,"column":0},"end":{"row":1166,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1167,"column":0},"end":{"row":1167,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1168,"column":0},"end":{"row":1168,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1169,"column":0},"end":{"row":1169,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1170,"column":0},"end":{"row":1170,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1171,"column":0},"end":{"row":1171,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1172,"column":0},"end":{"row":1172,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1173,"column":0},"end":{"row":1173,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1174,"column":0},"end":{"row":1174,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1175,"column":0},"end":{"row":1175,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1176,"column":0},"end":{"row":1176,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1177,"column":0},"end":{"row":1177,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1178,"column":0},"end":{"row":1178,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1179,"column":0},"end":{"row":1179,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1180,"column":0},"end":{"row":1180,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1181,"column":0},"end":{"row":1181,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1182,"column":0},"end":{"row":1182,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1183,"column":0},"end":{"row":1183,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1184,"column":0},"end":{"row":1184,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1185,"column":0},"end":{"row":1185,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1186,"column":0},"end":{"row":1186,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1187,"column":0},"end":{"row":1187,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1188,"column":0},"end":{"row":1188,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1189,"column":0},"end":{"row":1189,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1190,"column":0},"end":{"row":1190,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1191,"column":0},"end":{"row":1191,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1192,"column":0},"end":{"row":1192,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1193,"column":0},"end":{"row":1193,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1194,"column":0},"end":{"row":1194,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1195,"column":0},"end":{"row":1195,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1196,"column":0},"end":{"row":1196,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1197,"column":0},"end":{"row":1197,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1117,"column":0},"end":{"row":1198,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_interface_profile():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    interface_profile_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"{{infraAccPortP_name}}\" {","    name = \"{{infraAccPortP_name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    access_port_selector_template = Template(\"\"\"","resource \"aci_access_port_selector\" \"{{infraAccPortP_name}}-{{infraHPortS_name}}\" {","    leaf_interface_profile_dn = aci_leaf_interface_profile.{{infraAccPortP_name}}.id","    name                      = \"{{infraHPortS_name}}\"","    access_port_selector_type = \"range\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    access_port_block_template = Template(\"\"\"","resource \"aci_access_port_block\" \"{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}}\" {","    access_port_selector_dn = aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}}.id","    from_card               = \"{{infraPortBlk_fromCard}}\"","    from_port               = \"{{infraPortBlk_fromPort}}\"","    to_card                 = \"{{infraPortBlk_toCard}}\"","    to_port                 = \"{{infraPortBlk_toPort}}\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","     with open('import.tf', 'a+') as tf_file:","            tf_file.seek(0)","            existing_content = tf_file.read()","    ","        new_terraform_content = \"\"","    ","        for entry in entries:","            interface_profile_resource = interface_profile_template.render(","                infraAccPortP_name=entry['infraAccPortP_name']","            )","            access_port_selector_resource = access_port_selector_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraHPortS_name=entry['infraHPortS_name']","            )","            access_port_block_resource = access_port_block_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraHPortS_name=entry['infraHPortS_name'],","                infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","                infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","                infraPortBlk_toCard=entry['infraPortBlk_toCard'],","                infraPortBlk_toPort=entry['infraPortBlk_toPort']","            )","    ","            # Check if each resource doesn't exist before adding it","            if entry['infraAccPortP_name'] not in existing_content:","                new_terraform_content += interface_profile_resource","                existing_content += interface_profile_resource  # Update the existing_content to avoid duplication","    ","            if entry['infraHPortS_name'] not in existing_content:","                new_terraform_content += access_port_selector_resource","                existing_content += access_port_selector_resource  # Update the existing_content to avoid duplication","    ","            if f\"{entry['infraAccPortP_name']}-{entry['infraHPortS_name']}-E{entry['infraPortBlk_fromCard']}_{entry['infraPortBlk_fromPort']}\" not in existing_content:","                new_terraform_content += access_port_block_resource","                existing_content += access_port_block_resource  # Update the existing_content to avoid duplication","    ","        if new_terraform_content:","            with open('import.tf', 'a') as tf_file:","                tf_file.write(new_terraform_content)",""],"id":97},{"start":{"row":1117,"column":0},"end":{"row":1199,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_profile():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # Templates","    interface_profile_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"{{infraAccPortP_name}}\" {","    name = \"{{infraAccPortP_name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    access_port_selector_template = Template(\"\"\"","resource \"aci_access_port_selector\" \"{{infraAccPortP_name}}-{{infraHPortS_name}}\" {","    leaf_interface_profile_dn = aci_leaf_interface_profile.{{infraAccPortP_name}}.id","    name                      = \"{{infraHPortS_name}}\"","    access_port_selector_type = \"range\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    access_port_block_template = Template(\"\"\"","resource \"aci_access_port_block\" \"{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}}\" {","    access_port_selector_dn = aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}}.id","    from_card               = \"{{infraPortBlk_fromCard}}\"","    from_port               = \"{{infraPortBlk_fromPort}}\"","    to_card                 = \"{{infraPortBlk_toCard}}\"","    to_port                 = \"{{infraPortBlk_toPort}}\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        interface_profile_resource = interface_profile_template.render(","            infraAccPortP_name=entry['infraAccPortP_name']","        )","        access_port_selector_resource = access_port_selector_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name']","        )","        access_port_block_resource = access_port_block_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name'],","            infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","            infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","            infraPortBlk_toCard=entry['infraPortBlk_toCard'],","            infraPortBlk_toPort=entry['infraPortBlk_toPort']","        )","","        if entry['infraAccPortP_name'] not in existing_content:","            new_terraform_content += interface_profile_resource","            existing_content += interface_profile_resource  # Update the existing_content to avoid duplication","","        if entry['infraHPortS_name'] not in existing_content:","            new_terraform_content += access_port_selector_resource","            existing_content += access_port_selector_resource  # Update the existing_content to avoid duplication","","        access_port_block_id = f\"{entry['infraAccPortP_name']}-{entry['infraHPortS_name']}-E{entry['infraPortBlk_fromCard']}_{entry['infraPortBlk_fromPort']}-E{entry['infraPortBlk_toCard']}_{entry['infraPortBlk_toPort']}\"","        if access_port_block_id not in existing_content:","            new_terraform_content += access_port_block_resource","            existing_content += access_port_block_resource  # Update the existing_content to avoid duplication","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)",""]}],[{"start":{"row":1200,"column":0},"end":{"row":1237,"column":50},"action":"remove","lines":["def tf_ciscodevnet_aci_interface_profile_commands():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{infraAccPortP_name}} {{infraAccPortP_dn}}","terraform import aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}","terraform import aci_access_port_block.{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}/{{infraPortBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    added_interface_profiles = set()","","    for entry in entries:","        interface_profile_id = f\"{entry['infraAccPortP_name']}-{entry['infraHPortS_name']}\"","        if entry['infraAccPortP_name'] not in added_interface_profiles:","            new_commands_content += command_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraHPortS_name=entry['infraHPortS_name'],","                infraAccPortP_dn=entry['infraAccPortP_dn'],","                infraHPortS_rn=entry['infraHPortS_rn'],","                infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","                infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","                infraPortBlk_toCard=entry['infraPortBlk_toCard'],","                infraPortBlk_toPort=entry['infraPortBlk_toPort'],","                infraPortBlk_rn=entry['infraPortBlk_rn']","            )","            added_interface_profiles.add(entry['infraAccPortP_name'])","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)  "],"id":98},{"start":{"row":1200,"column":0},"end":{"row":1230,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_profile_commands():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # Template","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{infraAccPortP_name}} {{infraAccPortP_dn}}","terraform import aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}","terraform import aci_access_port_block.{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}/{{infraPortBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","","    for entry in entries:","        command = command_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name'],","            infraAccPortP_dn=entry['infraAccPortP_dn'],","            infraHPortS_rn=entry['infraHPortS_rn'],","            infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","            infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","            infraPortBlk_toCard=entry['infraPortBlk_toCard'],","            infraPortBlk_toPort=entry['infraPortBlk_toPort'],","            infraPortBlk_rn=entry['infraPortBl",""]}],[{"start":{"row":1229,"column":46},"end":{"row":1230,"column":14},"action":"remove","lines":["","              "],"id":99}],[{"start":{"row":1200,"column":0},"end":{"row":1229,"column":46},"action":"remove","lines":["def tf_ciscodevnet_aci_interface_profile_commands():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # Template","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{infraAccPortP_name}} {{infraAccPortP_dn}}","terraform import aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}","terraform import aci_access_port_block.{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}/{{infraPortBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","","    for entry in entries:","        command = command_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name'],","            infraAccPortP_dn=entry['infraAccPortP_dn'],","            infraHPortS_rn=entry['infraHPortS_rn'],","            infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","            infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","            infraPortBlk_toCard=entry['infraPortBlk_toCard'],","            infraPortBlk_toPort=entry['infraPortBlk_toPort'],","            infraPortBlk_rn=entry['infraPortBl"],"id":100},{"start":{"row":1200,"column":0},"end":{"row":1239,"column":48},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_profile_commands():","    csv_filepath = os.path.join(\"data\", \"py_interface_profile.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # Command Template","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{infraAccPortP_name}} {{infraAccPortP_dn}}","terraform import aci_access_port_selector.{{infraAccPortP_name}}-{{infraHPortS_name}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}","terraform import aci_access_port_block.{{infraAccPortP_name}}-{{infraHPortS_name}}-E{{infraPortBlk_fromCard}}_{{infraPortBlk_fromPort}}-E{{infraPortBlk_toCard}}_{{infraPortBlk_toPort}} uni/infra/accportprof-{{infraAccPortP_name}}/{{infraHPortS_rn}}/{{infraPortBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","","    for entry in entries:","        command = command_template.render(","            infraAccPortP_name=entry['infraAccPortP_name'],","            infraHPortS_name=entry['infraHPortS_name'],","            infraAccPortP_dn=entry['infraAccPortP_dn'],","            infraHPortS_rn=entry['infraHPortS_rn'],","            infraPortBlk_fromCard=entry['infraPortBlk_fromCard'],","            infraPortBlk_fromPort=entry['infraPortBlk_fromPort'],","            infraPortBlk_toCard=entry['infraPortBlk_toCard'],","            infraPortBlk_toPort=entry['infraPortBlk_toPort'],","            infraPortBlk_rn=entry['infraPortBlk_rn']","        )","","        # Ensure the command isn't already in the existing content before adding.","        if command not in existing_content:","            new_commands_content += command","            existing_content += command  # Update the existing_content to avoid duplication","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)"]}],[{"start":{"row":1322,"column":12},"end":{"row":1322,"column":69},"action":"remove","lines":["print(f\"Adding HCL for: {entry['infraAccPortGrp_name']}\")"],"id":101},{"start":{"row":1322,"column":8},"end":{"row":1322,"column":12},"action":"remove","lines":["    "]},{"start":{"row":1322,"column":4},"end":{"row":1322,"column":8},"action":"remove","lines":["    "]},{"start":{"row":1322,"column":0},"end":{"row":1322,"column":4},"action":"remove","lines":["    "]},{"start":{"row":1321,"column":58},"end":{"row":1322,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1351,"column":0},"end":{"row":1351,"column":73},"action":"remove","lines":["            print(f\"Adding command for: {entry['infraAccPortGrp_name']}\")"],"id":102},{"start":{"row":1350,"column":57},"end":{"row":1351,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1198,"column":48},"end":{"row":1199,"column":0},"action":"insert","lines":["",""],"id":103},{"start":{"row":1199,"column":0},"end":{"row":1199,"column":12},"action":"insert","lines":["            "]},{"start":{"row":1199,"column":12},"end":{"row":1200,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1200,"column":0},"end":{"row":1200,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":1200,"column":8},"end":{"row":1200,"column":12},"action":"remove","lines":["    "],"id":104},{"start":{"row":1200,"column":4},"end":{"row":1200,"column":8},"action":"remove","lines":["    "]},{"start":{"row":1200,"column":0},"end":{"row":1200,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1200,"column":0},"end":{"row":1200,"column":94},"action":"insert","lines":["    print(\"Terraform resources for VLAN pools and ranges appended to import.tf successfully!\")"],"id":105}],[{"start":{"row":1200,"column":35},"end":{"row":1200,"column":56},"action":"remove","lines":["VLAN pools and ranges"],"id":106},{"start":{"row":1200,"column":35},"end":{"row":1200,"column":36},"action":"insert","lines":["I"]},{"start":{"row":1200,"column":36},"end":{"row":1200,"column":37},"action":"insert","lines":["n"]},{"start":{"row":1200,"column":37},"end":{"row":1200,"column":38},"action":"insert","lines":["t"]},{"start":{"row":1200,"column":38},"end":{"row":1200,"column":39},"action":"insert","lines":["e"]},{"start":{"row":1200,"column":39},"end":{"row":1200,"column":40},"action":"insert","lines":["r"]},{"start":{"row":1200,"column":40},"end":{"row":1200,"column":41},"action":"insert","lines":["f"]},{"start":{"row":1200,"column":41},"end":{"row":1200,"column":42},"action":"insert","lines":["a"]},{"start":{"row":1200,"column":42},"end":{"row":1200,"column":43},"action":"insert","lines":["c"]},{"start":{"row":1200,"column":43},"end":{"row":1200,"column":44},"action":"insert","lines":["e"]}],[{"start":{"row":1200,"column":44},"end":{"row":1200,"column":45},"action":"insert","lines":[" "],"id":107},{"start":{"row":1200,"column":45},"end":{"row":1200,"column":46},"action":"insert","lines":["P"]},{"start":{"row":1200,"column":46},"end":{"row":1200,"column":47},"action":"insert","lines":["r"]},{"start":{"row":1200,"column":47},"end":{"row":1200,"column":48},"action":"insert","lines":["o"]},{"start":{"row":1200,"column":48},"end":{"row":1200,"column":49},"action":"insert","lines":["f"]},{"start":{"row":1200,"column":49},"end":{"row":1200,"column":50},"action":"insert","lines":["i"]},{"start":{"row":1200,"column":50},"end":{"row":1200,"column":51},"action":"insert","lines":["l"]},{"start":{"row":1200,"column":51},"end":{"row":1200,"column":52},"action":"insert","lines":["e"]},{"start":{"row":1200,"column":52},"end":{"row":1200,"column":53},"action":"insert","lines":["s"]},{"start":{"row":1200,"column":53},"end":{"row":1200,"column":54},"action":"insert","lines":[","]}],[{"start":{"row":1200,"column":54},"end":{"row":1200,"column":55},"action":"insert","lines":[" "],"id":108},{"start":{"row":1200,"column":55},"end":{"row":1200,"column":56},"action":"insert","lines":["S"]},{"start":{"row":1200,"column":56},"end":{"row":1200,"column":57},"action":"insert","lines":["e"]},{"start":{"row":1200,"column":57},"end":{"row":1200,"column":58},"action":"insert","lines":["l"]},{"start":{"row":1200,"column":58},"end":{"row":1200,"column":59},"action":"insert","lines":["e"]},{"start":{"row":1200,"column":59},"end":{"row":1200,"column":60},"action":"insert","lines":["c"]},{"start":{"row":1200,"column":60},"end":{"row":1200,"column":61},"action":"insert","lines":["t"]},{"start":{"row":1200,"column":61},"end":{"row":1200,"column":62},"action":"insert","lines":["o"]},{"start":{"row":1200,"column":62},"end":{"row":1200,"column":63},"action":"insert","lines":["r"]},{"start":{"row":1200,"column":63},"end":{"row":1200,"column":64},"action":"insert","lines":["s"]}],[{"start":{"row":1200,"column":64},"end":{"row":1200,"column":65},"action":"insert","lines":[","],"id":109}],[{"start":{"row":1200,"column":65},"end":{"row":1200,"column":66},"action":"insert","lines":[" "],"id":110},{"start":{"row":1200,"column":66},"end":{"row":1200,"column":67},"action":"insert","lines":["a"]},{"start":{"row":1200,"column":67},"end":{"row":1200,"column":68},"action":"insert","lines":["n"]},{"start":{"row":1200,"column":68},"end":{"row":1200,"column":69},"action":"insert","lines":["d"]}],[{"start":{"row":1200,"column":69},"end":{"row":1200,"column":70},"action":"insert","lines":[" "],"id":111},{"start":{"row":1200,"column":70},"end":{"row":1200,"column":71},"action":"insert","lines":["B"]},{"start":{"row":1200,"column":71},"end":{"row":1200,"column":72},"action":"insert","lines":["l"]},{"start":{"row":1200,"column":72},"end":{"row":1200,"column":73},"action":"insert","lines":["o"]},{"start":{"row":1200,"column":73},"end":{"row":1200,"column":74},"action":"insert","lines":["c"]},{"start":{"row":1200,"column":74},"end":{"row":1200,"column":75},"action":"insert","lines":["k"]},{"start":{"row":1200,"column":75},"end":{"row":1200,"column":76},"action":"insert","lines":["s"]}],[{"start":{"row":1241,"column":48},"end":{"row":1242,"column":0},"action":"insert","lines":["",""],"id":112},{"start":{"row":1242,"column":0},"end":{"row":1242,"column":12},"action":"insert","lines":["            "]},{"start":{"row":1242,"column":12},"end":{"row":1243,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1243,"column":0},"end":{"row":1243,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":1243,"column":8},"end":{"row":1243,"column":12},"action":"remove","lines":["    "],"id":113},{"start":{"row":1243,"column":4},"end":{"row":1243,"column":8},"action":"remove","lines":["    "]},{"start":{"row":1243,"column":0},"end":{"row":1243,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1243,"column":0},"end":{"row":1243,"column":114},"action":"insert","lines":["    print(\"Terraform resources for Interface Profiles, Selectors, and Blocks appended to import.tf successfully!\")"],"id":114}],[{"start":{"row":1243,"column":11},"end":{"row":1243,"column":30},"action":"remove","lines":["Terraform resources"],"id":115},{"start":{"row":1243,"column":11},"end":{"row":1243,"column":12},"action":"insert","lines":["I"]},{"start":{"row":1243,"column":12},"end":{"row":1243,"column":13},"action":"insert","lines":["m"]},{"start":{"row":1243,"column":13},"end":{"row":1243,"column":14},"action":"insert","lines":["p"]},{"start":{"row":1243,"column":14},"end":{"row":1243,"column":15},"action":"insert","lines":["o"]},{"start":{"row":1243,"column":15},"end":{"row":1243,"column":16},"action":"insert","lines":["r"]},{"start":{"row":1243,"column":16},"end":{"row":1243,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":1243,"column":17},"end":{"row":1243,"column":18},"action":"insert","lines":[" "],"id":116},{"start":{"row":1243,"column":18},"end":{"row":1243,"column":19},"action":"insert","lines":["c"]}],[{"start":{"row":1243,"column":18},"end":{"row":1243,"column":19},"action":"remove","lines":["c"],"id":117}],[{"start":{"row":1243,"column":18},"end":{"row":1243,"column":19},"action":"insert","lines":["C"],"id":118},{"start":{"row":1243,"column":19},"end":{"row":1243,"column":20},"action":"insert","lines":["o"]},{"start":{"row":1243,"column":20},"end":{"row":1243,"column":21},"action":"insert","lines":["m"]},{"start":{"row":1243,"column":21},"end":{"row":1243,"column":22},"action":"insert","lines":["m"]},{"start":{"row":1243,"column":22},"end":{"row":1243,"column":23},"action":"insert","lines":["a"]},{"start":{"row":1243,"column":23},"end":{"row":1243,"column":24},"action":"insert","lines":["n"]},{"start":{"row":1243,"column":24},"end":{"row":1243,"column":25},"action":"insert","lines":["d"]},{"start":{"row":1243,"column":25},"end":{"row":1243,"column":26},"action":"insert","lines":["s"]}],[{"start":{"row":1335,"column":0},"end":{"row":1336,"column":0},"action":"insert","lines":["",""],"id":119},{"start":{"row":1336,"column":0},"end":{"row":1337,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":1336,"column":0},"end":{"row":1336,"column":114},"action":"insert","lines":["    print(\"Terraform resources for Interface Profiles, Selectors, and Blocks appended to import.tf successfully!\")"],"id":120}],[{"start":{"row":1336,"column":35},"end":{"row":1336,"column":76},"action":"remove","lines":["Interface Profiles, Selectors, and Blocks"],"id":121},{"start":{"row":1336,"column":35},"end":{"row":1336,"column":36},"action":"insert","lines":["L"]},{"start":{"row":1336,"column":36},"end":{"row":1336,"column":37},"action":"insert","lines":["e"]},{"start":{"row":1336,"column":37},"end":{"row":1336,"column":38},"action":"insert","lines":["a"]},{"start":{"row":1336,"column":38},"end":{"row":1336,"column":39},"action":"insert","lines":["f"]}],[{"start":{"row":1336,"column":39},"end":{"row":1336,"column":40},"action":"insert","lines":[" "],"id":122},{"start":{"row":1336,"column":40},"end":{"row":1336,"column":41},"action":"insert","lines":["A"]},{"start":{"row":1336,"column":41},"end":{"row":1336,"column":42},"action":"insert","lines":["c"]},{"start":{"row":1336,"column":42},"end":{"row":1336,"column":43},"action":"insert","lines":["c"]},{"start":{"row":1336,"column":43},"end":{"row":1336,"column":44},"action":"insert","lines":["e"]},{"start":{"row":1336,"column":44},"end":{"row":1336,"column":45},"action":"insert","lines":["s"]},{"start":{"row":1336,"column":45},"end":{"row":1336,"column":46},"action":"insert","lines":["s"]}],[{"start":{"row":1336,"column":46},"end":{"row":1336,"column":47},"action":"insert","lines":[" "],"id":123},{"start":{"row":1336,"column":47},"end":{"row":1336,"column":48},"action":"insert","lines":["P"]},{"start":{"row":1336,"column":48},"end":{"row":1336,"column":49},"action":"insert","lines":["o"]},{"start":{"row":1336,"column":49},"end":{"row":1336,"column":50},"action":"insert","lines":["r"]},{"start":{"row":1336,"column":50},"end":{"row":1336,"column":51},"action":"insert","lines":["t"]}],[{"start":{"row":1336,"column":51},"end":{"row":1336,"column":52},"action":"insert","lines":[" "],"id":124},{"start":{"row":1336,"column":52},"end":{"row":1336,"column":53},"action":"insert","lines":["P"]},{"start":{"row":1336,"column":53},"end":{"row":1336,"column":54},"action":"insert","lines":["o"]},{"start":{"row":1336,"column":54},"end":{"row":1336,"column":55},"action":"insert","lines":["l"]},{"start":{"row":1336,"column":55},"end":{"row":1336,"column":56},"action":"insert","lines":["i"]},{"start":{"row":1336,"column":56},"end":{"row":1336,"column":57},"action":"insert","lines":["c"]},{"start":{"row":1336,"column":57},"end":{"row":1336,"column":58},"action":"insert","lines":["y"]}],[{"start":{"row":1336,"column":58},"end":{"row":1336,"column":59},"action":"insert","lines":[" "],"id":125},{"start":{"row":1336,"column":59},"end":{"row":1336,"column":60},"action":"insert","lines":["G"]},{"start":{"row":1336,"column":60},"end":{"row":1336,"column":61},"action":"insert","lines":["r"]},{"start":{"row":1336,"column":61},"end":{"row":1336,"column":62},"action":"insert","lines":["o"]},{"start":{"row":1336,"column":62},"end":{"row":1336,"column":63},"action":"insert","lines":["u"]},{"start":{"row":1336,"column":63},"end":{"row":1336,"column":64},"action":"insert","lines":["p"]},{"start":{"row":1336,"column":64},"end":{"row":1336,"column":65},"action":"insert","lines":["s"]}],[{"start":{"row":1367,"column":0},"end":{"row":1368,"column":0},"action":"insert","lines":["",""],"id":126}],[{"start":{"row":1368,"column":0},"end":{"row":1368,"column":103},"action":"insert","lines":["    print(\"Terraform resources for Leaf Access Port Policy Groups appended to import.tf successfully!\")"],"id":127}],[{"start":{"row":1368,"column":103},"end":{"row":1369,"column":0},"action":"insert","lines":["",""],"id":128},{"start":{"row":1369,"column":0},"end":{"row":1369,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1368,"column":11},"end":{"row":1368,"column":30},"action":"remove","lines":["Terraform resources"],"id":129},{"start":{"row":1368,"column":11},"end":{"row":1368,"column":12},"action":"insert","lines":["I"]},{"start":{"row":1368,"column":12},"end":{"row":1368,"column":13},"action":"insert","lines":["m"]},{"start":{"row":1368,"column":13},"end":{"row":1368,"column":14},"action":"insert","lines":["p"]},{"start":{"row":1368,"column":14},"end":{"row":1368,"column":15},"action":"insert","lines":["o"]},{"start":{"row":1368,"column":15},"end":{"row":1368,"column":16},"action":"insert","lines":["r"]},{"start":{"row":1368,"column":16},"end":{"row":1368,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":1368,"column":17},"end":{"row":1368,"column":18},"action":"insert","lines":[" "],"id":130},{"start":{"row":1368,"column":18},"end":{"row":1368,"column":19},"action":"insert","lines":["C"]},{"start":{"row":1368,"column":19},"end":{"row":1368,"column":20},"action":"insert","lines":["o"]},{"start":{"row":1368,"column":20},"end":{"row":1368,"column":21},"action":"insert","lines":["m"]},{"start":{"row":1368,"column":21},"end":{"row":1368,"column":22},"action":"insert","lines":["m"]},{"start":{"row":1368,"column":22},"end":{"row":1368,"column":23},"action":"insert","lines":["a"]},{"start":{"row":1368,"column":23},"end":{"row":1368,"column":24},"action":"insert","lines":["n"]},{"start":{"row":1368,"column":24},"end":{"row":1368,"column":25},"action":"insert","lines":["d"]},{"start":{"row":1368,"column":25},"end":{"row":1368,"column":26},"action":"insert","lines":["s"]}],[{"start":{"row":939,"column":0},"end":{"row":1033,"column":100},"action":"remove","lines":["def tf_ciscodevnet_aci_vlan_pool():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    vlan_pool_template = Template(\"\"\"","resource \"aci_vlan_pool\" \"{{fvnsVlanInstP_name}}\" {","    name       = \"{{fvnsVlanInstP_name}}\"","    alloc_mode = \"dynamic\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    range_template = Template(\"\"\"","resource \"aci_ranges\" \"{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}}\" {","    vlan_pool_dn = aci_vlan_pool.{{fvnsVlanInstP_name}}.id","    from         = \"{{fvnsEncapBlk_from}}\"","    to           = \"{{fvnsEncapBlk_to}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    added_vlan_pools = set()","","    for entry in entries:","        if entry['fvnsVlanInstP_name'] not in added_vlan_pools:","            new_terraform_content += vlan_pool_template.render(","                fvnsVlanInstP_name=entry['fvnsVlanInstP_name']","            )","            added_vlan_pools.add(entry['fvnsVlanInstP_name'])","","        new_terraform_content += range_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to']","        )","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources for VLAN pools and ranges appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_vlan_pool_commands():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    vlan_pool_command_template = Template(\"\"\"","terraform import aci_vlan_pool.{{fvnsVlanInstP_name}} {{fvnsVlanInstP_dn}}","\"\"\")","","    range_command_template = Template(\"\"\"","terraform import aci_ranges.{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}} {{fvnsVlanInstP_dn}}/{{fvnsEncapBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","    added_vlan_pools = set()","","    for entry in entries:","        if entry['fvnsVlanInstP_name'] not in added_vlan_pools:","            new_commands += vlan_pool_command_template.render(","                fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","                fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn']","            )","            added_vlan_pools.add(entry['fvnsVlanInstP_name'])","","        new_commands += range_command_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to'],","            fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn'],","            fvnsEncapBlk_rn=entry['fvnsEncapBlk_rn']","        )","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import commands for VLAN pools and ranges appended to import_commands.txt successfully!\")"],"id":131},{"start":{"row":939,"column":0},"end":{"row":1052,"column":63},"action":"insert","lines":["def tf_ciscodevnet_aci_vlan_pool():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # VLAN Pool Template","    vlan_pool_template = Template(\"\"\"","resource \"aci_vlan_pool\" \"{{fvnsVlanInstP_name}}\" {","    name       = \"{{fvnsVlanInstP_name}}\"","    alloc_mode = \"dynamic\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    # Range Template","    range_template = Template(\"\"\"","resource \"aci_ranges\" \"{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}}\" {","    vlan_pool_dn = aci_vlan_pool.{{fvnsVlanInstP_name}}.id","    from         = \"{{fvnsEncapBlk_from}}\"","    to           = \"{{fvnsEncapBlk_to}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        vlan_pool_resource = vlan_pool_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name']","        )","        range_resource = range_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to']","        )","        ","        # Check and add VLAN Pool resource if it doesn't exist","        if vlan_pool_resource not in existing_content:","            new_terraform_content += vlan_pool_resource","            existing_content += vlan_pool_resource  # Update the existing_content","","        # Check and add Range resource if it doesn't exist","        if range_resource not in existing_content:","            new_terraform_content += range_resource","            existing_content += range_resource  # Update the existing_content","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for VLAN pools and ranges appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_vlan_pool_commands():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # VLAN Pool Command Template","    vlan_pool_command_template = Template(\"\"\"","terraform import aci_vlan_pool.{{fvnsVlanInstP_name}} {{fvnsVlanInstP_dn}}","\"\"\")","","    # Range Command Template","    range_command_template = Template(\"\"\"","terraform import aci_ranges.{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}} {{fvnsVlanInstP_dn}}/{{fvnsEncapBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        vlan_pool_command = vlan_pool_command_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn']","        )","        range_command = range_command_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to'],","            fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn'],","            fvnsEncapBlk_rn=entry['fvnsEncapBlk_rn']","        )","        ","        # Check and add VLAN Pool command if it doesn't exist","        if vlan_pool_command not in existing_content:","            new_commands += vlan_pool_command","            existing_content += vlan_pool_command  # Update the existing_content","","        # Check and add Range command if it doesn't exist","        if range_command not in existing_content:","            new_commands += range_command","            existing_content += range_command  # Update the existing_content","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for VLAN pools and ranges appended to import_commands.txt successfully!\")","The above code updates the two functions to ensure that before "]}],[{"start":{"row":1052,"column":0},"end":{"row":1052,"column":63},"action":"remove","lines":["The above code updates the two functions to ensure that before "],"id":132},{"start":{"row":1051,"column":100},"end":{"row":1052,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1045,"column":47},"end":{"row":1045,"column":76},"action":"remove","lines":["# Update the existing_content"],"id":133}],[{"start":{"row":1040,"column":51},"end":{"row":1040,"column":80},"action":"remove","lines":["# Update the existing_content"],"id":134}],[{"start":{"row":1042,"column":0},"end":{"row":1042,"column":57},"action":"remove","lines":["        # Check and add Range command if it doesn't exist"],"id":135},{"start":{"row":1041,"column":0},"end":{"row":1042,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1037,"column":0},"end":{"row":1037,"column":61},"action":"remove","lines":["        # Check and add VLAN Pool command if it doesn't exist"]}],[{"start":{"row":1036,"column":8},"end":{"row":1037,"column":0},"action":"remove","lines":["",""],"id":136}],[{"start":{"row":1013,"column":0},"end":{"row":1013,"column":28},"action":"remove","lines":["    # Range Command Template"],"id":137},{"start":{"row":1012,"column":0},"end":{"row":1013,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1008,"column":0},"end":{"row":1008,"column":32},"action":"remove","lines":["    # VLAN Pool Command Template"],"id":138},{"start":{"row":1007,"column":0},"end":{"row":1008,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":994,"column":48},"end":{"row":995,"column":0},"action":"remove","lines":["# Update the existing_content",""],"id":139}],[{"start":{"row":991,"column":0},"end":{"row":991,"column":58},"action":"remove","lines":["        # Check and add Range resource if it doesn't exist"],"id":140},{"start":{"row":990,"column":0},"end":{"row":991,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":989,"column":51},"end":{"row":989,"column":81},"action":"remove","lines":[" # Update the existing_content"],"id":141}],[{"start":{"row":986,"column":0},"end":{"row":986,"column":62},"action":"remove","lines":["        # Check and add VLAN Pool resource if it doesn't exist"],"id":142},{"start":{"row":985,"column":8},"end":{"row":986,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":957,"column":0},"end":{"row":957,"column":20},"action":"remove","lines":["    # Range Template"],"id":143},{"start":{"row":956,"column":0},"end":{"row":957,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":945,"column":0},"end":{"row":945,"column":24},"action":"remove","lines":["    # VLAN Pool Template"],"id":144},{"start":{"row":944,"column":0},"end":{"row":945,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1132,"column":0},"end":{"row":1132,"column":15},"action":"remove","lines":["    # Templates"],"id":145},{"start":{"row":1131,"column":0},"end":{"row":1132,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1193,"column":58},"end":{"row":1193,"column":110},"action":"remove","lines":["  # Update the existing_content to avoid duplication"],"id":146}],[{"start":{"row":1197,"column":61},"end":{"row":1197,"column":113},"action":"remove","lines":["  # Update the existing_content to avoid duplication"],"id":147}],[{"start":{"row":1202,"column":58},"end":{"row":1202,"column":110},"action":"remove","lines":["  # Update the existing_content to avoid duplication"],"id":148}],[{"start":{"row":1242,"column":8},"end":{"row":1242,"column":81},"action":"remove","lines":["# Ensure the command isn't already in the existing content before adding."],"id":149}],[{"start":{"row":1245,"column":39},"end":{"row":1245,"column":91},"action":"remove","lines":["  # Update the existing_content to avoid duplication"],"id":150}],[{"start":{"row":804,"column":0},"end":{"row":870,"column":4},"action":"remove","lines":["def tf_ciscodevnet_aci_aaep_to_physdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_aaep_to_physdomain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_physical_domain.{{infraRsDomP_name}}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_physdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_physdomain_commands():","    with open(os.path.join('data', 'py_aaep_to_physdomain.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_physdomain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_physdomain appended to import_commands.txt successfully!\")","    "],"id":151},{"start":{"row":804,"column":0},"end":{"row":871,"column":101},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_physdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_physdomain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_physical_domain.{{infraRsDomP_name}}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_physdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_physdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_physdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_physdomain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_physdomain appended to import_commands.txt successfully!\")"]}],[{"start":{"row":671,"column":0},"end":{"row":734,"column":4},"action":"remove","lines":["def tf_ciscodevnet_aci_physical_domain():","    csv_filepath = os.path.join(\"data\", \"py_physical_domain.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_physical_domain\" \"{{name}}\" {","    name        = \"{{name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_physical_domain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_physical_domain_commands():","    with open(os.path.join('data', 'py_physical_domain.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_physical_domain.{{name}} {{dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            name=entry['name'],","            dn=entry['dn']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_physical_domain appended to import_commands.txt successfully!\")","    "],"id":152},{"start":{"row":671,"column":0},"end":{"row":732,"column":98},"action":"insert","lines":["def tf_ciscodevnet_aci_physical_domain():","    csv_filepath = os.path.join(\"data\", \"py_physical_domain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_physical_domain\" \"{{name}}\" {","    name        = \"{{name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(name=entry['name'])","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_physical_domain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_physical_domain_commands():","    csv_filepath = os.path.join('data', 'py_physical_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_physical_domain.{{name}} {{dn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(","            name=entry['name'],","            dn=entry['dn']","        )","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_physical_domain appended to import_commands.txt successfully!\")"]}],[{"start":{"row":732,"column":98},"end":{"row":733,"column":0},"action":"insert","lines":["",""],"id":153},{"start":{"row":733,"column":0},"end":{"row":733,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":518,"column":0},"end":{"row":579,"column":115},"action":"remove","lines":["def tf_ciscodevnet_aci_access_policy_aaep():","    csv_filepath = os.path.join(\"data\", \"py_access_policy_aaep.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_attachable_access_entity_profile\" \"{{name}}\" {","    name        = \"{{name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_attachable_access_entity_profile, appended to import.tf successfully!\")","    ","def tf_ciscodevnet_aci_access_policy_aaep_commands():","    with open(os.path.join('data', 'py_access_policy_aaep.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_attachable_access_entity_profile.{{name}} uni/infra/attentp-{{name}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_attachable_access_entity_profile appended to import_commands.txt successfully!\")"],"id":154},{"start":{"row":518,"column":0},"end":{"row":576,"column":115},"action":"insert","lines":["def tf_ciscodevnet_aci_access_policy_aaep():","    csv_filepath = os.path.join(\"data\", \"py_access_policy_aaep.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_attachable_access_entity_profile\" \"{{name}}\" {","    name        = \"{{name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(name=entry['name'])","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_attachable_access_entity_profile, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_access_policy_aaep_commands():","    csv_filepath = os.path.join('data', 'py_access_policy_aaep.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_attachable_access_entity_profile.{{name}} uni/infra/attentp-{{name}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(name=entry['name'])","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_attachable_access_entity_profile appended to import_commands.txt successfully!\")"]}]]},"ace":{"folds":[],"scrolltop":19330,"scrollleft":0,"selection":{"start":{"row":1417,"column":39},"end":{"row":1417,"column":39},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":1379,"state":"start","mode":"ace/mode/python"}},"timestamp":1698850690261,"hash":"4f87182b1258d32054c63af758986f97ffa15f72"}