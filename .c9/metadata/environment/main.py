{"filter":false,"title":"main.py","tooltip":"/main.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":16,"column":3},"end":{"row":16,"column":4},"action":"insert","lines":[" "],"id":109},{"start":{"row":16,"column":4},"end":{"row":16,"column":5},"action":"insert","lines":["B"]},{"start":{"row":16,"column":5},"end":{"row":16,"column":6},"action":"insert","lines":["A"]},{"start":{"row":16,"column":6},"end":{"row":16,"column":7},"action":"insert","lines":["S"]},{"start":{"row":16,"column":7},"end":{"row":16,"column":8},"action":"insert","lines":["E"]}],[{"start":{"row":16,"column":8},"end":{"row":16,"column":9},"action":"insert","lines":[" "],"id":110},{"start":{"row":16,"column":9},"end":{"row":16,"column":10},"action":"insert","lines":["T"]},{"start":{"row":16,"column":10},"end":{"row":16,"column":11},"action":"insert","lines":["E"]},{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"insert","lines":["R"]},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"insert","lines":["R"]},{"start":{"row":16,"column":13},"end":{"row":16,"column":14},"action":"insert","lines":["A"]},{"start":{"row":16,"column":14},"end":{"row":16,"column":15},"action":"insert","lines":["F"]},{"start":{"row":16,"column":15},"end":{"row":16,"column":16},"action":"insert","lines":["O"]},{"start":{"row":16,"column":16},"end":{"row":16,"column":17},"action":"insert","lines":["R"]},{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"insert","lines":["M"]}],[{"start":{"row":16,"column":18},"end":{"row":16,"column":19},"action":"insert","lines":[" "],"id":111},{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"insert","lines":["T"]},{"start":{"row":16,"column":20},"end":{"row":16,"column":21},"action":"insert","lines":["H"]},{"start":{"row":16,"column":21},"end":{"row":16,"column":22},"action":"insert","lines":["I"]},{"start":{"row":16,"column":22},"end":{"row":16,"column":23},"action":"insert","lines":["N"]},{"start":{"row":16,"column":23},"end":{"row":16,"column":24},"action":"insert","lines":["G"]},{"start":{"row":16,"column":24},"end":{"row":16,"column":25},"action":"insert","lines":["S"]},{"start":{"row":16,"column":25},"end":{"row":16,"column":26},"action":"insert","lines":["A"]}],[{"start":{"row":16,"column":25},"end":{"row":16,"column":26},"action":"remove","lines":["A"],"id":112}],[{"start":{"row":16,"column":25},"end":{"row":16,"column":26},"action":"insert","lines":[" "],"id":113},{"start":{"row":16,"column":26},"end":{"row":16,"column":27},"action":"insert","lines":["@"]},{"start":{"row":16,"column":27},"end":{"row":16,"column":28},"action":"insert","lines":["@"]},{"start":{"row":16,"column":28},"end":{"row":16,"column":29},"action":"insert","lines":["@"]}],[{"start":{"row":16,"column":28},"end":{"row":16,"column":29},"action":"remove","lines":["@"],"id":114},{"start":{"row":16,"column":27},"end":{"row":16,"column":28},"action":"remove","lines":["@"]},{"start":{"row":16,"column":26},"end":{"row":16,"column":27},"action":"remove","lines":["@"]}],[{"start":{"row":16,"column":26},"end":{"row":16,"column":27},"action":"insert","lines":["#"],"id":115},{"start":{"row":16,"column":27},"end":{"row":16,"column":28},"action":"insert","lines":["#"]},{"start":{"row":16,"column":28},"end":{"row":16,"column":29},"action":"insert","lines":["#"]}],[{"start":{"row":15,"column":3},"end":{"row":15,"column":4},"action":"insert","lines":["#"],"id":116},{"start":{"row":15,"column":4},"end":{"row":15,"column":5},"action":"insert","lines":["#"]},{"start":{"row":15,"column":5},"end":{"row":15,"column":6},"action":"insert","lines":["#"]},{"start":{"row":15,"column":6},"end":{"row":15,"column":7},"action":"insert","lines":["#"]},{"start":{"row":15,"column":7},"end":{"row":15,"column":8},"action":"insert","lines":["#"]},{"start":{"row":15,"column":8},"end":{"row":15,"column":9},"action":"insert","lines":["#"]},{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["#"]},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"insert","lines":["#"]},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"insert","lines":["#"]},{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"insert","lines":["#"]},{"start":{"row":15,"column":13},"end":{"row":15,"column":14},"action":"insert","lines":["#"]},{"start":{"row":15,"column":14},"end":{"row":15,"column":15},"action":"insert","lines":["#"]},{"start":{"row":15,"column":15},"end":{"row":15,"column":16},"action":"insert","lines":["#"]},{"start":{"row":15,"column":16},"end":{"row":15,"column":17},"action":"insert","lines":["#"]},{"start":{"row":15,"column":17},"end":{"row":15,"column":18},"action":"insert","lines":["#"]},{"start":{"row":15,"column":18},"end":{"row":15,"column":19},"action":"insert","lines":["#"]},{"start":{"row":15,"column":19},"end":{"row":15,"column":20},"action":"insert","lines":["#"]},{"start":{"row":15,"column":20},"end":{"row":15,"column":21},"action":"insert","lines":["#"]},{"start":{"row":15,"column":21},"end":{"row":15,"column":22},"action":"insert","lines":["#"]},{"start":{"row":15,"column":22},"end":{"row":15,"column":23},"action":"insert","lines":["#"]},{"start":{"row":15,"column":23},"end":{"row":15,"column":24},"action":"insert","lines":["#"]},{"start":{"row":15,"column":24},"end":{"row":15,"column":25},"action":"insert","lines":["#"]},{"start":{"row":15,"column":25},"end":{"row":15,"column":26},"action":"insert","lines":["#"]},{"start":{"row":15,"column":26},"end":{"row":15,"column":27},"action":"insert","lines":["#"]},{"start":{"row":15,"column":27},"end":{"row":15,"column":28},"action":"insert","lines":["#"]},{"start":{"row":15,"column":28},"end":{"row":15,"column":29},"action":"insert","lines":["#"]}],[{"start":{"row":17,"column":0},"end":{"row":17,"column":29},"action":"insert","lines":["#############################"],"id":117}],[{"start":{"row":17,"column":29},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":118}],[{"start":{"row":16,"column":9},"end":{"row":16,"column":25},"action":"remove","lines":["TERRAFORM THINGS"],"id":119},{"start":{"row":16,"column":9},"end":{"row":16,"column":10},"action":"insert","lines":["F"]},{"start":{"row":16,"column":10},"end":{"row":16,"column":11},"action":"insert","lines":["U"]},{"start":{"row":16,"column":11},"end":{"row":16,"column":12},"action":"insert","lines":["N"]},{"start":{"row":16,"column":12},"end":{"row":16,"column":13},"action":"insert","lines":["C"]},{"start":{"row":16,"column":13},"end":{"row":16,"column":14},"action":"insert","lines":["T"]},{"start":{"row":16,"column":14},"end":{"row":16,"column":15},"action":"insert","lines":["I"]},{"start":{"row":16,"column":15},"end":{"row":16,"column":16},"action":"insert","lines":["O"]},{"start":{"row":16,"column":16},"end":{"row":16,"column":17},"action":"insert","lines":["N"]}],[{"start":{"row":16,"column":17},"end":{"row":16,"column":18},"action":"insert","lines":["A"],"id":120},{"start":{"row":16,"column":18},"end":{"row":16,"column":19},"action":"insert","lines":["L"]},{"start":{"row":16,"column":19},"end":{"row":16,"column":20},"action":"insert","lines":["I"]},{"start":{"row":16,"column":20},"end":{"row":16,"column":21},"action":"insert","lines":["T"]},{"start":{"row":16,"column":21},"end":{"row":16,"column":22},"action":"insert","lines":["Y"]}],[{"start":{"row":16,"column":22},"end":{"row":16,"column":23},"action":"insert","lines":[" "],"id":121},{"start":{"row":16,"column":23},"end":{"row":16,"column":24},"action":"insert","lines":[" "]},{"start":{"row":16,"column":24},"end":{"row":16,"column":25},"action":"insert","lines":[" "]}],[{"start":{"row":37,"column":47},"end":{"row":37,"column":48},"action":"remove","lines":[" "],"id":122},{"start":{"row":37,"column":46},"end":{"row":37,"column":47},"action":"remove","lines":[" "]}],[{"start":{"row":37,"column":46},"end":{"row":38,"column":0},"action":"insert","lines":["",""],"id":123},{"start":{"row":38,"column":0},"end":{"row":38,"column":8},"action":"insert","lines":["        "]},{"start":{"row":38,"column":8},"end":{"row":39,"column":0},"action":"insert","lines":["",""]},{"start":{"row":39,"column":0},"end":{"row":39,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":39,"column":4},"end":{"row":39,"column":8},"action":"remove","lines":["    "],"id":124},{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":39,"column":0},"end":{"row":39,"column":1},"action":"insert","lines":["#"],"id":125},{"start":{"row":39,"column":1},"end":{"row":39,"column":2},"action":"insert","lines":["#"]}],[{"start":{"row":39,"column":1},"end":{"row":39,"column":2},"action":"remove","lines":["#"],"id":126},{"start":{"row":39,"column":0},"end":{"row":39,"column":1},"action":"remove","lines":["#"]}],[{"start":{"row":39,"column":0},"end":{"row":41,"column":29},"action":"insert","lines":["#############################","### BASE FUNCTIONALITY    ###","#############################"],"id":127}],[{"start":{"row":40,"column":4},"end":{"row":40,"column":22},"action":"remove","lines":["BASE FUNCTIONALITY"],"id":128},{"start":{"row":40,"column":4},"end":{"row":40,"column":5},"action":"insert","lines":["A"]},{"start":{"row":40,"column":5},"end":{"row":40,"column":6},"action":"insert","lines":["C"]},{"start":{"row":40,"column":6},"end":{"row":40,"column":7},"action":"insert","lines":["I"]}],[{"start":{"row":40,"column":7},"end":{"row":40,"column":8},"action":"insert","lines":[" "],"id":129},{"start":{"row":40,"column":8},"end":{"row":40,"column":9},"action":"insert","lines":["F"]},{"start":{"row":40,"column":9},"end":{"row":40,"column":10},"action":"insert","lines":["A"]},{"start":{"row":40,"column":10},"end":{"row":40,"column":11},"action":"insert","lines":["B"]},{"start":{"row":40,"column":11},"end":{"row":40,"column":12},"action":"insert","lines":["R"]},{"start":{"row":40,"column":12},"end":{"row":40,"column":13},"action":"insert","lines":["I"]},{"start":{"row":40,"column":13},"end":{"row":40,"column":14},"action":"insert","lines":["C"]}],[{"start":{"row":40,"column":14},"end":{"row":40,"column":15},"action":"insert","lines":[" "],"id":130},{"start":{"row":40,"column":15},"end":{"row":40,"column":16},"action":"insert","lines":["N"]},{"start":{"row":40,"column":16},"end":{"row":40,"column":17},"action":"insert","lines":["O"]},{"start":{"row":40,"column":17},"end":{"row":40,"column":18},"action":"insert","lines":["D"]},{"start":{"row":40,"column":18},"end":{"row":40,"column":19},"action":"insert","lines":["E"]}],[{"start":{"row":40,"column":19},"end":{"row":40,"column":20},"action":"insert","lines":[" "],"id":131},{"start":{"row":40,"column":20},"end":{"row":40,"column":21},"action":"insert","lines":["M"]},{"start":{"row":40,"column":21},"end":{"row":40,"column":22},"action":"insert","lines":["E"]},{"start":{"row":40,"column":22},"end":{"row":40,"column":23},"action":"insert","lines":["M"]},{"start":{"row":40,"column":23},"end":{"row":40,"column":24},"action":"insert","lines":["B"]},{"start":{"row":40,"column":24},"end":{"row":40,"column":25},"action":"insert","lines":["E"]},{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"insert","lines":["R"]}],[{"start":{"row":39,"column":29},"end":{"row":39,"column":30},"action":"insert","lines":["#"],"id":132},{"start":{"row":39,"column":30},"end":{"row":39,"column":31},"action":"insert","lines":["#"]},{"start":{"row":39,"column":31},"end":{"row":39,"column":32},"action":"insert","lines":["#"]},{"start":{"row":39,"column":32},"end":{"row":39,"column":33},"action":"insert","lines":["#"]}],[{"start":{"row":41,"column":29},"end":{"row":41,"column":30},"action":"insert","lines":["#"],"id":133},{"start":{"row":41,"column":30},"end":{"row":41,"column":31},"action":"insert","lines":["#"]},{"start":{"row":41,"column":31},"end":{"row":41,"column":32},"action":"insert","lines":["#"]},{"start":{"row":41,"column":32},"end":{"row":41,"column":33},"action":"insert","lines":["#"]}],[{"start":{"row":69,"column":80},"end":{"row":70,"column":0},"action":"insert","lines":["",""],"id":134},{"start":{"row":70,"column":0},"end":{"row":70,"column":12},"action":"insert","lines":["            "]},{"start":{"row":70,"column":12},"end":{"row":71,"column":0},"action":"insert","lines":["",""]},{"start":{"row":71,"column":0},"end":{"row":71,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":71,"column":8},"end":{"row":71,"column":12},"action":"remove","lines":["    "],"id":135},{"start":{"row":71,"column":4},"end":{"row":71,"column":8},"action":"remove","lines":["    "]},{"start":{"row":71,"column":0},"end":{"row":71,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":71,"column":0},"end":{"row":73,"column":33},"action":"insert","lines":["#################################","### ACI FABRIC NODE MEMBER    ###","#################################"],"id":136}],[{"start":{"row":72,"column":15},"end":{"row":72,"column":27},"action":"remove","lines":["NODE MEMBER "],"id":137},{"start":{"row":72,"column":15},"end":{"row":72,"column":16},"action":"insert","lines":["I"]},{"start":{"row":72,"column":16},"end":{"row":72,"column":17},"action":"insert","lines":["N"]},{"start":{"row":72,"column":17},"end":{"row":72,"column":18},"action":"insert","lines":["T"]},{"start":{"row":72,"column":18},"end":{"row":72,"column":19},"action":"insert","lines":["E"]},{"start":{"row":72,"column":19},"end":{"row":72,"column":20},"action":"insert","lines":["R"]},{"start":{"row":72,"column":20},"end":{"row":72,"column":21},"action":"insert","lines":["F"]},{"start":{"row":72,"column":21},"end":{"row":72,"column":22},"action":"insert","lines":["A"]},{"start":{"row":72,"column":22},"end":{"row":72,"column":23},"action":"insert","lines":["C"]},{"start":{"row":72,"column":23},"end":{"row":72,"column":24},"action":"insert","lines":["E"]}],[{"start":{"row":72,"column":24},"end":{"row":72,"column":25},"action":"insert","lines":[" "],"id":138},{"start":{"row":72,"column":25},"end":{"row":72,"column":26},"action":"insert","lines":["B"]},{"start":{"row":72,"column":26},"end":{"row":72,"column":27},"action":"insert","lines":["L"]},{"start":{"row":72,"column":27},"end":{"row":72,"column":28},"action":"insert","lines":["A"]},{"start":{"row":72,"column":28},"end":{"row":72,"column":29},"action":"insert","lines":["C"]},{"start":{"row":72,"column":29},"end":{"row":72,"column":30},"action":"insert","lines":["K"]},{"start":{"row":72,"column":30},"end":{"row":72,"column":31},"action":"insert","lines":["L"]},{"start":{"row":72,"column":31},"end":{"row":72,"column":32},"action":"insert","lines":["I"]},{"start":{"row":72,"column":32},"end":{"row":72,"column":33},"action":"insert","lines":["S"]},{"start":{"row":72,"column":33},"end":{"row":72,"column":34},"action":"insert","lines":["T"]}],[{"start":{"row":71,"column":33},"end":{"row":71,"column":34},"action":"insert","lines":["#"],"id":139},{"start":{"row":71,"column":34},"end":{"row":71,"column":35},"action":"insert","lines":["#"]},{"start":{"row":71,"column":35},"end":{"row":71,"column":36},"action":"insert","lines":["#"]},{"start":{"row":71,"column":36},"end":{"row":71,"column":37},"action":"insert","lines":["#"]},{"start":{"row":71,"column":37},"end":{"row":71,"column":38},"action":"insert","lines":["#"]},{"start":{"row":71,"column":38},"end":{"row":71,"column":39},"action":"insert","lines":["#"]},{"start":{"row":71,"column":39},"end":{"row":71,"column":40},"action":"insert","lines":["#"]}],[{"start":{"row":73,"column":33},"end":{"row":73,"column":34},"action":"insert","lines":["#"],"id":140},{"start":{"row":73,"column":34},"end":{"row":73,"column":35},"action":"insert","lines":["#"]},{"start":{"row":73,"column":35},"end":{"row":73,"column":36},"action":"insert","lines":["#"]},{"start":{"row":73,"column":36},"end":{"row":73,"column":37},"action":"insert","lines":["#"]},{"start":{"row":73,"column":37},"end":{"row":73,"column":38},"action":"insert","lines":["#"]},{"start":{"row":73,"column":38},"end":{"row":73,"column":39},"action":"insert","lines":["#"]},{"start":{"row":73,"column":39},"end":{"row":73,"column":40},"action":"insert","lines":["#"]}],[{"start":{"row":37,"column":46},"end":{"row":38,"column":0},"action":"insert","lines":["",""],"id":141},{"start":{"row":38,"column":0},"end":{"row":38,"column":8},"action":"insert","lines":["        "]},{"start":{"row":38,"column":8},"end":{"row":39,"column":0},"action":"insert","lines":["",""]},{"start":{"row":39,"column":0},"end":{"row":39,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":39,"column":4},"end":{"row":39,"column":8},"action":"remove","lines":["    "],"id":142},{"start":{"row":39,"column":0},"end":{"row":39,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":104,"column":0},"end":{"row":128,"column":19},"action":"remove","lines":["def get_aci_token():","    LOGIN_URL = f\"{ACI_BASE_URL}/api/aaaLogin.json\"","    ","    headers = {","        \"Content-Type\": \"application/json\"","    }","","    payload = {","        \"aaaUser\": {","            \"attributes\": {","                \"name\": USERNAME,","                \"pwd\": PASSWORD","            }","        }","    }","    ","    response = requests.post(LOGIN_URL, json=payload, headers=headers, verify=False)","    ","    if response.status_code == 200:","        token = response.json()['imdata'][0]['aaaLogin']['attributes']['token']","        print(f\"Successfully Authenticated to APIC - {os.environ.get('ACI_APIC_IP')} with account - {USERNAME}\")","        return token","    else:","        print(f\"Error: {response.status_code}\")","        return None"],"id":143}],[{"start":{"row":39,"column":0},"end":{"row":63,"column":19},"action":"insert","lines":["def get_aci_token():","    LOGIN_URL = f\"{ACI_BASE_URL}/api/aaaLogin.json\"","    ","    headers = {","        \"Content-Type\": \"application/json\"","    }","","    payload = {","        \"aaaUser\": {","            \"attributes\": {","                \"name\": USERNAME,","                \"pwd\": PASSWORD","            }","        }","    }","    ","    response = requests.post(LOGIN_URL, json=payload, headers=headers, verify=False)","    ","    if response.status_code == 200:","        token = response.json()['imdata'][0]['aaaLogin']['attributes']['token']","        print(f\"Successfully Authenticated to APIC - {os.environ.get('ACI_APIC_IP')} with account - {USERNAME}\")","        return token","    else:","        print(f\"Error: {response.status_code}\")","        return None"],"id":144}],[{"start":{"row":130,"column":0},"end":{"row":197,"column":86},"action":"remove","lines":["def get_fabric_nodes(token):","    URL = f\"{ACI_BASE_URL}/api/node/class/fabricNode.json\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open('fabric_inventory.csv', 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open('fabric_inventory.csv', 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"],"id":145}],[{"start":{"row":129,"column":8},"end":{"row":130,"column":0},"action":"remove","lines":["",""],"id":146},{"start":{"row":129,"column":4},"end":{"row":129,"column":8},"action":"remove","lines":["    "]},{"start":{"row":129,"column":0},"end":{"row":129,"column":4},"action":"remove","lines":["    "]},{"start":{"row":128,"column":0},"end":{"row":129,"column":0},"action":"remove","lines":["",""]},{"start":{"row":127,"column":8},"end":{"row":128,"column":0},"action":"remove","lines":["",""]},{"start":{"row":127,"column":4},"end":{"row":127,"column":8},"action":"remove","lines":["    "]},{"start":{"row":127,"column":0},"end":{"row":127,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":126,"column":95},"end":{"row":127,"column":0},"action":"remove","lines":["",""],"id":147}],[{"start":{"row":95,"column":80},"end":{"row":96,"column":0},"action":"insert","lines":["",""],"id":148},{"start":{"row":96,"column":0},"end":{"row":96,"column":12},"action":"insert","lines":["            "]},{"start":{"row":96,"column":12},"end":{"row":97,"column":0},"action":"insert","lines":["",""]},{"start":{"row":97,"column":0},"end":{"row":97,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":97,"column":8},"end":{"row":97,"column":12},"action":"remove","lines":["    "],"id":149},{"start":{"row":97,"column":4},"end":{"row":97,"column":8},"action":"remove","lines":["    "]},{"start":{"row":97,"column":0},"end":{"row":97,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":97,"column":0},"end":{"row":164,"column":86},"action":"insert","lines":["def get_fabric_nodes(token):","    URL = f\"{ACI_BASE_URL}/api/node/class/fabricNode.json\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open('fabric_inventory.csv', 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open('fabric_inventory.csv', 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"],"id":150}],[{"start":{"row":257,"column":0},"end":{"row":292,"column":93},"action":"remove","lines":["def tf_csicodevnet_aci_aci_fabric_node_member():","    with open('fabric_inventory.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            id=entry['id'],","            name=entry['name'],","            serial=entry['serial']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_fabric_node_member, appended to import.tf successfully!\")"],"id":151}],[{"start":{"row":256,"column":8},"end":{"row":257,"column":0},"action":"remove","lines":["",""],"id":152},{"start":{"row":256,"column":4},"end":{"row":256,"column":8},"action":"remove","lines":["    "]}],[{"start":{"row":256,"column":0},"end":{"row":256,"column":4},"action":"remove","lines":["    "],"id":153},{"start":{"row":255,"column":101},"end":{"row":256,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":164,"column":86},"end":{"row":165,"column":0},"action":"insert","lines":["",""],"id":154},{"start":{"row":165,"column":0},"end":{"row":165,"column":8},"action":"insert","lines":["        "]},{"start":{"row":165,"column":8},"end":{"row":166,"column":0},"action":"insert","lines":["",""]},{"start":{"row":166,"column":0},"end":{"row":166,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":166,"column":4},"end":{"row":166,"column":8},"action":"remove","lines":["    "],"id":155},{"start":{"row":166,"column":0},"end":{"row":166,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":166,"column":0},"end":{"row":201,"column":93},"action":"insert","lines":["def tf_csicodevnet_aci_aci_fabric_node_member():","    with open('fabric_inventory.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            id=entry['id'],","            name=entry['name'],","            serial=entry['serial']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_fabric_node_member, appended to import.tf successfully!\")"],"id":156}],[{"start":{"row":406,"column":102},"end":{"row":407,"column":0},"action":"insert","lines":["",""],"id":157},{"start":{"row":407,"column":0},"end":{"row":407,"column":4},"action":"insert","lines":["    "]},{"start":{"row":407,"column":4},"end":{"row":408,"column":0},"action":"insert","lines":["",""]},{"start":{"row":408,"column":0},"end":{"row":408,"column":4},"action":"insert","lines":["    "]},{"start":{"row":408,"column":4},"end":{"row":409,"column":0},"action":"insert","lines":["",""]},{"start":{"row":409,"column":0},"end":{"row":409,"column":4},"action":"insert","lines":["    "]},{"start":{"row":409,"column":4},"end":{"row":410,"column":0},"action":"insert","lines":["",""]},{"start":{"row":410,"column":0},"end":{"row":410,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":410,"column":0},"end":{"row":410,"column":4},"action":"remove","lines":["    "],"id":158},{"start":{"row":409,"column":4},"end":{"row":410,"column":0},"action":"remove","lines":["",""]},{"start":{"row":409,"column":0},"end":{"row":409,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":409,"column":0},"end":{"row":410,"column":0},"action":"insert","lines":["",""],"id":159},{"start":{"row":410,"column":0},"end":{"row":411,"column":0},"action":"insert","lines":["",""]},{"start":{"row":411,"column":0},"end":{"row":412,"column":0},"action":"insert","lines":["",""]},{"start":{"row":412,"column":0},"end":{"row":413,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":412,"column":0},"end":{"row":414,"column":40},"action":"insert","lines":["########################################","### ACI FABRIC INTERFACE BLACKLIST   ###","########################################"],"id":160}],[{"start":{"row":413,"column":4},"end":{"row":413,"column":34},"action":"remove","lines":["ACI FABRIC INTERFACE BLACKLIST"],"id":161},{"start":{"row":413,"column":4},"end":{"row":413,"column":5},"action":"insert","lines":["O"]},{"start":{"row":413,"column":5},"end":{"row":413,"column":6},"action":"insert","lines":["N"]},{"start":{"row":413,"column":6},"end":{"row":413,"column":7},"action":"insert","lines":["V"]}],[{"start":{"row":413,"column":6},"end":{"row":413,"column":7},"action":"remove","lines":["V"],"id":162},{"start":{"row":413,"column":5},"end":{"row":413,"column":6},"action":"remove","lines":["N"]},{"start":{"row":413,"column":4},"end":{"row":413,"column":5},"action":"remove","lines":["O"]}],[{"start":{"row":413,"column":4},"end":{"row":413,"column":5},"action":"insert","lines":["I"],"id":163},{"start":{"row":413,"column":5},"end":{"row":413,"column":6},"action":"insert","lines":["N"]},{"start":{"row":413,"column":6},"end":{"row":413,"column":7},"action":"insert","lines":["V"]},{"start":{"row":413,"column":7},"end":{"row":413,"column":8},"action":"insert","lines":["O"]},{"start":{"row":413,"column":8},"end":{"row":413,"column":9},"action":"insert","lines":["C"]},{"start":{"row":413,"column":9},"end":{"row":413,"column":10},"action":"insert","lines":["A"]},{"start":{"row":413,"column":10},"end":{"row":413,"column":11},"action":"insert","lines":["T"]},{"start":{"row":413,"column":11},"end":{"row":413,"column":12},"action":"insert","lines":["I"]},{"start":{"row":413,"column":12},"end":{"row":413,"column":13},"action":"insert","lines":["O"]}],[{"start":{"row":413,"column":13},"end":{"row":413,"column":14},"action":"insert","lines":["N"],"id":164}],[{"start":{"row":413,"column":14},"end":{"row":413,"column":15},"action":"insert","lines":[" "],"id":165},{"start":{"row":413,"column":15},"end":{"row":413,"column":16},"action":"insert","lines":["O"]},{"start":{"row":413,"column":16},"end":{"row":413,"column":17},"action":"insert","lines":["F"]}],[{"start":{"row":413,"column":17},"end":{"row":413,"column":18},"action":"insert","lines":[" "],"id":166}],[{"start":{"row":413,"column":18},"end":{"row":413,"column":19},"action":"insert","lines":["S"],"id":167},{"start":{"row":413,"column":19},"end":{"row":413,"column":20},"action":"insert","lines":["C"]},{"start":{"row":413,"column":20},"end":{"row":413,"column":21},"action":"insert","lines":["R"]},{"start":{"row":413,"column":21},"end":{"row":413,"column":22},"action":"insert","lines":["I"]},{"start":{"row":413,"column":22},"end":{"row":413,"column":23},"action":"insert","lines":["P"]},{"start":{"row":413,"column":23},"end":{"row":413,"column":24},"action":"insert","lines":["T"]}],[{"start":{"row":413,"column":24},"end":{"row":413,"column":25},"action":"insert","lines":[" "],"id":168},{"start":{"row":413,"column":25},"end":{"row":413,"column":26},"action":"insert","lines":["F"]},{"start":{"row":413,"column":26},"end":{"row":413,"column":27},"action":"insert","lines":["U"]},{"start":{"row":413,"column":27},"end":{"row":413,"column":28},"action":"insert","lines":["N"]},{"start":{"row":413,"column":28},"end":{"row":413,"column":29},"action":"insert","lines":["C"]},{"start":{"row":413,"column":29},"end":{"row":413,"column":30},"action":"insert","lines":["T"]},{"start":{"row":413,"column":30},"end":{"row":413,"column":31},"action":"insert","lines":["I"]},{"start":{"row":413,"column":31},"end":{"row":413,"column":32},"action":"insert","lines":["O"]},{"start":{"row":413,"column":32},"end":{"row":413,"column":33},"action":"insert","lines":["N"]},{"start":{"row":413,"column":33},"end":{"row":413,"column":34},"action":"insert","lines":["S"]}],[{"start":{"row":166,"column":4},"end":{"row":166,"column":23},"action":"remove","lines":["tf_csicodevnet_aci_"],"id":169},{"start":{"row":166,"column":4},"end":{"row":166,"column":19},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":294,"column":4},"end":{"row":294,"column":23},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":294,"column":4},"end":{"row":294,"column":19},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":322,"column":4},"end":{"row":322,"column":23},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":322,"column":4},"end":{"row":322,"column":19},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":373,"column":4},"end":{"row":373,"column":23},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":373,"column":4},"end":{"row":373,"column":19},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":431,"column":0},"end":{"row":431,"column":19},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":431,"column":0},"end":{"row":431,"column":15},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":432,"column":0},"end":{"row":432,"column":19},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":432,"column":0},"end":{"row":432,"column":15},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":433,"column":0},"end":{"row":433,"column":19},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":433,"column":0},"end":{"row":433,"column":15},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":434,"column":0},"end":{"row":434,"column":19},"action":"remove","lines":["tf_csicodevnet_aci_"]},{"start":{"row":434,"column":0},"end":{"row":434,"column":15},"action":"insert","lines":["tf_ciscodevnet_"]},{"start":{"row":409,"column":0},"end":{"row":439,"column":80},"action":"insert","lines":["#################################","### ACI FABRIC NODE MEMBER    ###","#################################","        ","def fabric_inventory_file():","    filename = \"fabric_inventory.csv\"","    headers = [","        \"APIC\", \"adSt\", \"address\", \"annotation\", \"apicType\", \"childAction\", ","        \"delayedHeartbeat\", \"dn\", \"extMngdBy\", \"fabricSt\", \"id\", \"lastStateModTs\", ","        \"lcOwn\", \"modTs\", \"model\", \"monPolDn\", \"name\", \"nameAlias\", \"nodeType\", ","        \"role\", \"serial\", \"status\", \"uid\", \"userdom\", \"vendor\", \"version\"","    ]","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")"]},{"start":{"row":410,"column":8},"end":{"row":410,"column":26},"action":"remove","lines":["FABRIC NODE MEMBER"]},{"start":{"row":410,"column":8},"end":{"row":410,"column":9},"action":"insert","lines":["A"]},{"start":{"row":410,"column":9},"end":{"row":410,"column":10},"action":"insert","lines":["c"]},{"start":{"row":410,"column":10},"end":{"row":410,"column":11},"action":"insert","lines":["c"]},{"start":{"row":410,"column":11},"end":{"row":410,"column":12},"action":"insert","lines":["e"]},{"start":{"row":410,"column":12},"end":{"row":410,"column":13},"action":"insert","lines":["s"]},{"start":{"row":410,"column":13},"end":{"row":410,"column":14},"action":"insert","lines":["s"]},{"start":{"row":410,"column":13},"end":{"row":410,"column":14},"action":"remove","lines":["s"]},{"start":{"row":410,"column":12},"end":{"row":410,"column":13},"action":"remove","lines":["s"]},{"start":{"row":410,"column":11},"end":{"row":410,"column":12},"action":"remove","lines":["e"]},{"start":{"row":410,"column":10},"end":{"row":410,"column":11},"action":"remove","lines":["c"]},{"start":{"row":410,"column":9},"end":{"row":410,"column":10},"action":"remove","lines":["c"]},{"start":{"row":410,"column":9},"end":{"row":410,"column":10},"action":"insert","lines":["C"]},{"start":{"row":410,"column":10},"end":{"row":410,"column":11},"action":"insert","lines":["C"]},{"start":{"row":410,"column":11},"end":{"row":410,"column":12},"action":"insert","lines":["E"]},{"start":{"row":410,"column":12},"end":{"row":410,"column":13},"action":"insert","lines":["S"]},{"start":{"row":410,"column":13},"end":{"row":410,"column":14},"action":"insert","lines":["S"]},{"start":{"row":410,"column":14},"end":{"row":410,"column":15},"action":"insert","lines":[" "]},{"start":{"row":410,"column":15},"end":{"row":410,"column":16},"action":"insert","lines":["P"]},{"start":{"row":410,"column":16},"end":{"row":410,"column":17},"action":"insert","lines":["O"]},{"start":{"row":410,"column":17},"end":{"row":410,"column":18},"action":"insert","lines":["L"]},{"start":{"row":410,"column":18},"end":{"row":410,"column":19},"action":"insert","lines":["C"]},{"start":{"row":410,"column":18},"end":{"row":410,"column":19},"action":"remove","lines":["C"]},{"start":{"row":410,"column":18},"end":{"row":410,"column":19},"action":"insert","lines":["I"]},{"start":{"row":410,"column":19},"end":{"row":410,"column":20},"action":"insert","lines":["C"]},{"start":{"row":410,"column":20},"end":{"row":410,"column":21},"action":"insert","lines":["Y"]},{"start":{"row":410,"column":20},"end":{"row":410,"column":21},"action":"remove","lines":["Y"]},{"start":{"row":410,"column":20},"end":{"row":410,"column":21},"action":"insert","lines":["I"]},{"start":{"row":410,"column":21},"end":{"row":410,"column":22},"action":"insert","lines":["E"]},{"start":{"row":410,"column":22},"end":{"row":410,"column":23},"action":"insert","lines":["S"]},{"start":{"row":410,"column":23},"end":{"row":410,"column":24},"action":"insert","lines":[" "]},{"start":{"row":410,"column":24},"end":{"row":410,"column":25},"action":"insert","lines":["A"]},{"start":{"row":410,"column":25},"end":{"row":410,"column":26},"action":"insert","lines":["T"]},{"start":{"row":410,"column":26},"end":{"row":410,"column":27},"action":"insert","lines":["T"]},{"start":{"row":410,"column":27},"end":{"row":410,"column":28},"action":"insert","lines":["A"]},{"start":{"row":410,"column":28},"end":{"row":410,"column":29},"action":"insert","lines":["C"]},{"start":{"row":410,"column":29},"end":{"row":410,"column":30},"action":"insert","lines":["H"]},{"start":{"row":410,"column":30},"end":{"row":410,"column":31},"action":"insert","lines":["A"]},{"start":{"row":410,"column":31},"end":{"row":410,"column":32},"action":"insert","lines":["B"]},{"start":{"row":410,"column":32},"end":{"row":410,"column":33},"action":"insert","lines":["L"]},{"start":{"row":410,"column":33},"end":{"row":410,"column":34},"action":"insert","lines":["E"]},{"start":{"row":410,"column":34},"end":{"row":410,"column":35},"action":"insert","lines":[" "]},{"start":{"row":410,"column":35},"end":{"row":410,"column":36},"action":"insert","lines":["A"]},{"start":{"row":410,"column":35},"end":{"row":410,"column":36},"action":"remove","lines":["A"]},{"start":{"row":410,"column":35},"end":{"row":410,"column":36},"action":"insert","lines":["E"]},{"start":{"row":410,"column":36},"end":{"row":410,"column":37},"action":"insert","lines":["N"]},{"start":{"row":410,"column":37},"end":{"row":410,"column":38},"action":"insert","lines":["T"]},{"start":{"row":410,"column":38},"end":{"row":410,"column":39},"action":"insert","lines":["I"]},{"start":{"row":410,"column":39},"end":{"row":410,"column":40},"action":"insert","lines":["T"]},{"start":{"row":410,"column":40},"end":{"row":410,"column":41},"action":"insert","lines":["Y"]},{"start":{"row":410,"column":41},"end":{"row":410,"column":42},"action":"insert","lines":[" "]},{"start":{"row":410,"column":42},"end":{"row":410,"column":43},"action":"insert","lines":["P"]},{"start":{"row":410,"column":43},"end":{"row":410,"column":44},"action":"insert","lines":["R"]},{"start":{"row":410,"column":44},"end":{"row":410,"column":45},"action":"insert","lines":["O"]},{"start":{"row":410,"column":45},"end":{"row":410,"column":46},"action":"insert","lines":["F"]},{"start":{"row":410,"column":46},"end":{"row":410,"column":47},"action":"insert","lines":["I"]},{"start":{"row":410,"column":47},"end":{"row":410,"column":48},"action":"insert","lines":["L"]},{"start":{"row":410,"column":48},"end":{"row":410,"column":49},"action":"insert","lines":["E"]},{"start":{"row":409,"column":33},"end":{"row":409,"column":34},"action":"insert","lines":["#"]},{"start":{"row":409,"column":34},"end":{"row":409,"column":35},"action":"insert","lines":["#"]},{"start":{"row":409,"column":35},"end":{"row":409,"column":36},"action":"insert","lines":["#"]},{"start":{"row":409,"column":36},"end":{"row":409,"column":37},"action":"insert","lines":["#"]},{"start":{"row":409,"column":37},"end":{"row":409,"column":38},"action":"insert","lines":["#"]},{"start":{"row":409,"column":38},"end":{"row":409,"column":39},"action":"insert","lines":["#"]},{"start":{"row":409,"column":39},"end":{"row":409,"column":40},"action":"insert","lines":["#"]},{"start":{"row":409,"column":40},"end":{"row":409,"column":41},"action":"insert","lines":["#"]},{"start":{"row":409,"column":41},"end":{"row":409,"column":42},"action":"insert","lines":["#"]},{"start":{"row":409,"column":42},"end":{"row":409,"column":43},"action":"insert","lines":["#"]},{"start":{"row":409,"column":43},"end":{"row":409,"column":44},"action":"insert","lines":["#"]},{"start":{"row":409,"column":44},"end":{"row":409,"column":45},"action":"insert","lines":["#"]},{"start":{"row":409,"column":45},"end":{"row":409,"column":46},"action":"insert","lines":["#"]},{"start":{"row":409,"column":46},"end":{"row":409,"column":47},"action":"insert","lines":["#"]},{"start":{"row":409,"column":47},"end":{"row":409,"column":48},"action":"insert","lines":["#"]},{"start":{"row":409,"column":48},"end":{"row":409,"column":49},"action":"insert","lines":["#"]},{"start":{"row":409,"column":49},"end":{"row":409,"column":50},"action":"insert","lines":["#"]},{"start":{"row":409,"column":50},"end":{"row":409,"column":51},"action":"insert","lines":["#"]},{"start":{"row":409,"column":51},"end":{"row":409,"column":52},"action":"insert","lines":["#"]},{"start":{"row":409,"column":52},"end":{"row":409,"column":53},"action":"insert","lines":["#"]},{"start":{"row":409,"column":53},"end":{"row":409,"column":54},"action":"insert","lines":["#"]},{"start":{"row":409,"column":54},"end":{"row":409,"column":55},"action":"insert","lines":["#"]},{"start":{"row":409,"column":55},"end":{"row":409,"column":56},"action":"insert","lines":["#"]},{"start":{"row":411,"column":33},"end":{"row":411,"column":34},"action":"insert","lines":["#"]},{"start":{"row":411,"column":34},"end":{"row":411,"column":35},"action":"insert","lines":["#"]},{"start":{"row":411,"column":35},"end":{"row":411,"column":36},"action":"insert","lines":["#"]},{"start":{"row":411,"column":36},"end":{"row":411,"column":37},"action":"insert","lines":["#"]},{"start":{"row":411,"column":37},"end":{"row":411,"column":38},"action":"insert","lines":["#"]},{"start":{"row":411,"column":38},"end":{"row":411,"column":39},"action":"insert","lines":["#"]},{"start":{"row":411,"column":39},"end":{"row":411,"column":40},"action":"insert","lines":["#"]},{"start":{"row":411,"column":40},"end":{"row":411,"column":41},"action":"insert","lines":["#"]},{"start":{"row":411,"column":41},"end":{"row":411,"column":42},"action":"insert","lines":["#"]},{"start":{"row":411,"column":42},"end":{"row":411,"column":43},"action":"insert","lines":["#"]},{"start":{"row":411,"column":43},"end":{"row":411,"column":44},"action":"insert","lines":["#"]},{"start":{"row":411,"column":44},"end":{"row":411,"column":45},"action":"insert","lines":["#"]},{"start":{"row":411,"column":45},"end":{"row":411,"column":46},"action":"insert","lines":["#"]},{"start":{"row":411,"column":46},"end":{"row":411,"column":47},"action":"insert","lines":["#"]},{"start":{"row":411,"column":47},"end":{"row":411,"column":48},"action":"insert","lines":["#"]},{"start":{"row":411,"column":48},"end":{"row":411,"column":49},"action":"insert","lines":["#"]},{"start":{"row":411,"column":49},"end":{"row":411,"column":50},"action":"insert","lines":["#"]},{"start":{"row":411,"column":50},"end":{"row":411,"column":51},"action":"insert","lines":["#"]},{"start":{"row":411,"column":51},"end":{"row":411,"column":52},"action":"insert","lines":["#"]},{"start":{"row":411,"column":52},"end":{"row":411,"column":53},"action":"insert","lines":["#"]},{"start":{"row":411,"column":53},"end":{"row":411,"column":54},"action":"insert","lines":["#"]},{"start":{"row":411,"column":54},"end":{"row":411,"column":55},"action":"insert","lines":["#"]},{"start":{"row":411,"column":55},"end":{"row":411,"column":56},"action":"insert","lines":["#"]},{"start":{"row":413,"column":4},"end":{"row":413,"column":20},"action":"remove","lines":["fabric_inventory"]},{"start":{"row":413,"column":4},"end":{"row":413,"column":5},"action":"insert","lines":["a"]},{"start":{"row":413,"column":5},"end":{"row":413,"column":6},"action":"insert","lines":["c"]},{"start":{"row":413,"column":6},"end":{"row":413,"column":7},"action":"insert","lines":["c"]},{"start":{"row":413,"column":7},"end":{"row":413,"column":8},"action":"insert","lines":["e"]},{"start":{"row":413,"column":8},"end":{"row":413,"column":9},"action":"insert","lines":["s"]},{"start":{"row":413,"column":9},"end":{"row":413,"column":10},"action":"insert","lines":["s"]},{"start":{"row":413,"column":10},"end":{"row":413,"column":11},"action":"insert","lines":["_"]},{"start":{"row":413,"column":11},"end":{"row":413,"column":12},"action":"insert","lines":["o"]},{"start":{"row":413,"column":11},"end":{"row":413,"column":12},"action":"remove","lines":["o"]},{"start":{"row":413,"column":11},"end":{"row":413,"column":12},"action":"insert","lines":["p"]},{"start":{"row":413,"column":12},"end":{"row":413,"column":13},"action":"insert","lines":["o"]},{"start":{"row":413,"column":13},"end":{"row":413,"column":14},"action":"insert","lines":["l"]},{"start":{"row":413,"column":14},"end":{"row":413,"column":15},"action":"insert","lines":["i"]},{"start":{"row":413,"column":15},"end":{"row":413,"column":16},"action":"insert","lines":["c"]},{"start":{"row":413,"column":16},"end":{"row":413,"column":17},"action":"insert","lines":["y"]},{"start":{"row":413,"column":17},"end":{"row":413,"column":18},"action":"insert","lines":["_"]},{"start":{"row":413,"column":18},"end":{"row":413,"column":19},"action":"insert","lines":["a"]},{"start":{"row":413,"column":19},"end":{"row":413,"column":20},"action":"insert","lines":["a"]},{"start":{"row":413,"column":20},"end":{"row":413,"column":21},"action":"insert","lines":["e"]},{"start":{"row":413,"column":21},"end":{"row":413,"column":22},"action":"insert","lines":["p"]},{"start":{"row":414,"column":16},"end":{"row":414,"column":32},"action":"remove","lines":["fabric_inventory"]},{"start":{"row":414,"column":16},"end":{"row":414,"column":34},"action":"insert","lines":["access_policy_aaep"]},{"start":{"row":415,"column":0},"end":{"row":420,"column":5},"action":"remove","lines":["    headers = [","        \"APIC\", \"adSt\", \"address\", \"annotation\", \"apicType\", \"childAction\", ","        \"delayedHeartbeat\", \"dn\", \"extMngdBy\", \"fabricSt\", \"id\", \"lastStateModTs\", ","        \"lcOwn\", \"modTs\", \"model\", \"monPolDn\", \"name\", \"nameAlias\", \"nodeType\", ","        \"role\", \"serial\", \"status\", \"uid\", \"userdom\", \"vendor\", \"version\"","    ]"]},{"start":{"row":415,"column":0},"end":{"row":419,"column":1},"action":"insert","lines":["headers = [","    \"annotation\", \"childAction\", \"configIssues\", \"creator\", \"descr\", \"dn\", ","    \"extMngdBy\", \"lcOwn\", \"modTs\", \"monPolDn\", \"name\", \"nameAlias\", ","    \"ownerKey\", \"ownerTag\", \"status\", \"uid\", \"userdom\"","]"]},{"start":{"row":415,"column":0},"end":{"row":415,"column":4},"action":"insert","lines":["    "]},{"start":{"row":416,"column":0},"end":{"row":416,"column":4},"action":"insert","lines":["    "]},{"start":{"row":417,"column":0},"end":{"row":417,"column":4},"action":"insert","lines":["    "]},{"start":{"row":418,"column":0},"end":{"row":418,"column":4},"action":"insert","lines":["    "]},{"start":{"row":419,"column":0},"end":{"row":419,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":416,"column":8},"end":{"row":416,"column":10},"action":"insert","lines":["\"\""],"id":170},{"start":{"row":416,"column":9},"end":{"row":416,"column":10},"action":"insert","lines":["A"]},{"start":{"row":416,"column":10},"end":{"row":416,"column":11},"action":"insert","lines":["P"]},{"start":{"row":416,"column":11},"end":{"row":416,"column":12},"action":"insert","lines":["I"]},{"start":{"row":416,"column":12},"end":{"row":416,"column":13},"action":"insert","lines":["C"]},{"start":{"row":416,"column":13},"end":{"row":416,"column":14},"action":"insert","lines":["{"]},{"start":{"row":416,"column":13},"end":{"row":416,"column":14},"action":"remove","lines":["{"]},{"start":{"row":416,"column":14},"end":{"row":416,"column":15},"action":"insert","lines":[","]},{"start":{"row":450,"column":34},"end":{"row":451,"column":0},"action":"insert","lines":["",""]},{"start":{"row":451,"column":0},"end":{"row":451,"column":25},"action":"insert","lines":["access_policy_aaep_file()"]},{"start":{"row":414,"column":0},"end":{"row":414,"column":39},"action":"remove","lines":["    filename = \"access_policy_aaep.csv\""]},{"start":{"row":414,"column":0},"end":{"row":415,"column":64},"action":"insert","lines":["    directory = \"data\"","    filename = os.path.join(directory, \"access_policy_aaep.csv\")"]},{"start":{"row":413,"column":0},"end":{"row":439,"column":80},"action":"remove","lines":["def access_policy_aaep_file():","    directory = \"data\"","    filename = os.path.join(directory, \"access_policy_aaep.csv\")","    headers = [","        \"APIC\",\"annotation\", \"childAction\", \"configIssues\", \"creator\", \"descr\", \"dn\", ","        \"extMngdBy\", \"lcOwn\", \"modTs\", \"monPolDn\", \"name\", \"nameAlias\", ","        \"ownerKey\", \"ownerTag\", \"status\", \"uid\", \"userdom\"","    ]","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")"]},{"start":{"row":413,"column":0},"end":{"row":450,"column":0},"action":"insert","lines":["import os","import csv","","def access_policy_aaep_file():","    directory = \"data\"","    filename = os.path.join(directory, \"access_policy_aaep.csv\")","    headers = [","        \"APIC\",\"annotation\", \"childAction\", \"configIssues\", \"creator\", \"descr\", \"dn\", ","        \"extMngdBy\", \"lcOwn\", \"modTs\", \"monPolDn\", \"name\", \"nameAlias\", ","        \"ownerKey\", \"ownerTag\", \"status\", \"uid\", \"userdom\"","    ]","    ","    # Ensure the /data subdirectory exists","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")","","# To test the function","access_policy_aaep_file()",""]},{"start":{"row":412,"column":0},"end":{"row":414,"column":10},"action":"remove","lines":["        ","import os","import csv"]},{"start":{"row":411,"column":56},"end":{"row":412,"column":0},"action":"remove","lines":["",""]},{"start":{"row":444,"column":0},"end":{"row":446,"column":25},"action":"remove","lines":["","# To test the function","access_policy_aaep_file()"]},{"start":{"row":443,"column":80},"end":{"row":444,"column":0},"action":"remove","lines":["",""]},{"start":{"row":443,"column":80},"end":{"row":444,"column":0},"action":"remove","lines":["",""]},{"start":{"row":207,"column":0},"end":{"row":232,"column":83},"action":"remove","lines":["def fabric_blacklist_interfaces_file():","    filename = \"fabric_blacklist_interfaces.csv\"","    headers = [","        \"APIC\",\"annotation\",\"childaction\",\"dn\",\"extMngdBy\",\"forceResolve\",\"forceResolve\"","        \"lc\",\"lcOwn\",\"modTs\",\"monPolDn\",\"rType\",\"state\",\"stateQual\",\"status\",\"tCl\",","        \"tDn\",\"tType\",\"uid\",\"userdom\"","    ]","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")   "]},{"start":{"row":207,"column":0},"end":{"row":238,"column":0},"action":"insert","lines":["def fabric_blacklist_interfaces_file():","    directory = \"data\"","    filename = os.path.join(directory, \"fabric_blacklist_interfaces.csv\")","    headers = [","        \"APIC\", \"annotation\", \"childaction\", \"dn\", \"extMngdBy\", \"forceResolve\", ","        \"lc\", \"lcOwn\", \"modTs\", \"monPolDn\", \"rType\", \"state\", \"stateQual\", \"status\", ","        \"tCl\", \"tDn\", \"tType\", \"uid\", \"userdom\"","    ]","    ","    # Ensure the /data subdirectory exists","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")",""]},{"start":{"row":237,"column":80},"end":{"row":238,"column":12},"action":"remove","lines":["","            "]},{"start":{"row":69,"column":0},"end":{"row":96,"column":12},"action":"remove","lines":["def fabric_inventory_file():","    filename = \"fabric_inventory.csv\"","    headers = [","        \"APIC\", \"adSt\", \"address\", \"annotation\", \"apicType\", \"childAction\", ","        \"delayedHeartbeat\", \"dn\", \"extMngdBy\", \"fabricSt\", \"id\", \"lastStateModTs\", ","        \"lcOwn\", \"modTs\", \"model\", \"monPolDn\", \"name\", \"nameAlias\", \"nodeType\", ","        \"role\", \"serial\", \"status\", \"uid\", \"userdom\", \"vendor\", \"version\"","    ]","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")","            "]},{"start":{"row":69,"column":0},"end":{"row":101,"column":0},"action":"insert","lines":["def fabric_inventory_file():","    directory = \"data\"","    filename = os.path.join(directory, \"fabric_inventory.csv\")","    headers = [","        \"APIC\", \"adSt\", \"address\", \"annotation\", \"apicType\", \"childAction\", ","        \"delayedHeartbeat\", \"dn\", \"extMngdBy\", \"fabricSt\", \"id\", \"lastStateModTs\", ","        \"lcOwn\", \"modTs\", \"model\", \"monPolDn\", \"name\", \"nameAlias\", \"nodeType\", ","        \"role\", \"serial\", \"status\", \"uid\", \"userdom\", \"vendor\", \"version\"","    ]","    ","    # Ensure the /data subdirectory exists","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")",""]},{"start":{"row":102,"column":0},"end":{"row":169,"column":86},"action":"remove","lines":["def get_fabric_nodes(token):","    URL = f\"{ACI_BASE_URL}/api/node/class/fabricNode.json\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open('fabric_inventory.csv', 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open('fabric_inventory.csv', 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"]},{"start":{"row":102,"column":0},"end":{"row":171,"column":86},"action":"insert","lines":["def get_fabric_nodes(token):","    URL = f\"{ACI_BASE_URL}/api/node/class/fabricNode.json\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    filename = os.path.join(\"data\", \"fabric_inventory.csv\")","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"]},{"start":{"row":79,"column":0},"end":{"row":79,"column":42},"action":"remove","lines":["    # Ensure the /data subdirectory exists"]},{"start":{"row":78,"column":4},"end":{"row":79,"column":0},"action":"remove","lines":["",""]},{"start":{"row":222,"column":0},"end":{"row":222,"column":42},"action":"remove","lines":["    # Ensure the /data subdirectory exists"]},{"start":{"row":221,"column":4},"end":{"row":222,"column":0},"action":"remove","lines":["",""]},{"start":{"row":304,"column":0},"end":{"row":324,"column":97},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_node_member_commands():","    with open('fabric_inventory.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_fabric_node_member.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import aci_fabric_node_member_commands appended to import_commands.txt successfully!\")"]},{"start":{"row":304,"column":0},"end":{"row":326,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_node_member_commands():","    # Adjust the file path to point to the data directory","    csv_filepath = os.path.join(\"data\", \"fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_fabric_node_member.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)",""]},{"start":{"row":304,"column":0},"end":{"row":325,"column":36},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_node_member_commands():","    # Adjust the file path to point to the data directory","    csv_filepath = os.path.join(\"data\", \"fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_fabric_node_member.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)"]},{"start":{"row":303,"column":0},"end":{"row":304,"column":0},"action":"remove","lines":["",""]},{"start":{"row":302,"column":101},"end":{"row":303,"column":0},"action":"remove","lines":["",""]},{"start":{"row":207,"column":93},"end":{"row":208,"column":0},"action":"insert","lines":["",""]},{"start":{"row":208,"column":0},"end":{"row":208,"column":4},"action":"insert","lines":["    "]},{"start":{"row":208,"column":4},"end":{"row":209,"column":0},"action":"insert","lines":["",""]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"insert","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":209,"column":4},"action":"remove","lines":["    "]},{"start":{"row":209,"column":0},"end":{"row":230,"column":36},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_node_member_commands():","    # Adjust the file path to point to the data directory","    csv_filepath = os.path.join(\"data\", \"fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_fabric_node_member.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)"]},{"start":{"row":210,"column":0},"end":{"row":210,"column":57},"action":"remove","lines":["    # Adjust the file path to point to the data directory"]},{"start":{"row":209,"column":53},"end":{"row":210,"column":0},"action":"remove","lines":["",""]},{"start":{"row":172,"column":0},"end":{"row":207,"column":93},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_node_member():","    with open('fabric_inventory.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            id=entry['id'],","            name=entry['name'],","            serial=entry['serial']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_fabric_node_member, appended to import.tf successfully!\")"]},{"start":{"row":172,"column":0},"end":{"row":210,"column":93},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_node_member():","    # Adjust the file path to point to the data directory","    csv_filepath = os.path.join(\"data\", \"fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            id=entry['id'],","            name=entry['name'],","            serial=entry['serial']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_fabric_node_member, appended to import.tf successfully!\")"]},{"start":{"row":181,"column":0},"end":{"row":181,"column":4},"action":"insert","lines":["    "]},{"start":{"row":182,"column":0},"end":{"row":182,"column":4},"action":"insert","lines":["    "]},{"start":{"row":183,"column":0},"end":{"row":183,"column":4},"action":"insert","lines":["    "]},{"start":{"row":184,"column":0},"end":{"row":184,"column":4},"action":"insert","lines":["    "]},{"start":{"row":185,"column":0},"end":{"row":185,"column":4},"action":"insert","lines":["    "]},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"insert","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"insert","lines":["    "]},{"start":{"row":188,"column":0},"end":{"row":188,"column":4},"action":"insert","lines":["    "]},{"start":{"row":189,"column":0},"end":{"row":189,"column":4},"action":"insert","lines":["    "]},{"start":{"row":181,"column":0},"end":{"row":181,"column":4},"action":"insert","lines":["    "]},{"start":{"row":182,"column":0},"end":{"row":182,"column":4},"action":"insert","lines":["    "]},{"start":{"row":183,"column":0},"end":{"row":183,"column":4},"action":"insert","lines":["    "]},{"start":{"row":184,"column":0},"end":{"row":184,"column":4},"action":"insert","lines":["    "]},{"start":{"row":185,"column":0},"end":{"row":185,"column":4},"action":"insert","lines":["    "]},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"insert","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"insert","lines":["    "]},{"start":{"row":188,"column":0},"end":{"row":188,"column":4},"action":"insert","lines":["    "]},{"start":{"row":189,"column":0},"end":{"row":189,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":181,"column":0},"end":{"row":181,"column":4},"action":"remove","lines":["    "],"id":171},{"start":{"row":182,"column":0},"end":{"row":182,"column":4},"action":"remove","lines":["    "]},{"start":{"row":183,"column":0},"end":{"row":183,"column":4},"action":"remove","lines":["    "]},{"start":{"row":184,"column":0},"end":{"row":184,"column":4},"action":"remove","lines":["    "]},{"start":{"row":185,"column":0},"end":{"row":185,"column":4},"action":"remove","lines":["    "]},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"remove","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"remove","lines":["    "]},{"start":{"row":188,"column":0},"end":{"row":188,"column":4},"action":"remove","lines":["    "]},{"start":{"row":189,"column":0},"end":{"row":189,"column":4},"action":"remove","lines":["    "]},{"start":{"row":181,"column":0},"end":{"row":181,"column":4},"action":"remove","lines":["    "]},{"start":{"row":182,"column":0},"end":{"row":182,"column":4},"action":"remove","lines":["    "]},{"start":{"row":183,"column":0},"end":{"row":183,"column":4},"action":"remove","lines":["    "]},{"start":{"row":184,"column":0},"end":{"row":184,"column":4},"action":"remove","lines":["    "]},{"start":{"row":185,"column":0},"end":{"row":185,"column":4},"action":"remove","lines":["    "]},{"start":{"row":186,"column":0},"end":{"row":186,"column":4},"action":"remove","lines":["    "]},{"start":{"row":187,"column":0},"end":{"row":187,"column":4},"action":"remove","lines":["    "]},{"start":{"row":188,"column":0},"end":{"row":188,"column":4},"action":"remove","lines":["    "]},{"start":{"row":189,"column":0},"end":{"row":189,"column":4},"action":"remove","lines":["    "]},{"start":{"row":173,"column":0},"end":{"row":173,"column":57},"action":"remove","lines":["    # Adjust the file path to point to the data directory"]},{"start":{"row":172,"column":44},"end":{"row":173,"column":0},"action":"remove","lines":["",""]},{"start":{"row":268,"column":0},"end":{"row":326,"column":101},"action":"remove","lines":["def get_fabric_blacklist_interfaces(token):","    URL = f'{ACI_BASE_URL}/api/node/class/fabricRsOosPath.json?query-target-filter=and(not(wcard(fabricRsOosPath.dn,\"__ui_\")),ne(fabricRsOosPath.lc,\"in-service\"))'","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open('fabric_blacklist_interfaces.csv', 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","","            attributes = entry[\"fabricRsOosPath\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"forceResolve\"),","                attributes.get(\"lc\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"rType\"),","                attributes.get(\"state\"),","                attributes.get(\"stateQual\"),","                attributes.get(\"status\"),","                attributes.get(\"tCl\"),","                attributes.get(\"tDn\"),","                attributes.get(\"tType\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open('fabric_blacklist_interfaces.csv', 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric blacklist interfaces. Status code: {response.status_code}\")"]},{"start":{"row":268,"column":0},"end":{"row":323,"column":0},"action":"insert","lines":["def get_fabric_blacklist_interfaces(token):","    URL = f'{ACI_BASE_URL}/api/node/class/fabricRsOosPath.json?query-target-filter=and(not(wcard(fabricRsOosPath.dn,\"__ui_\")),ne(fabricRsOosPath.lc,\"in-service\"))'","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            attributes = entry[\"fabricRsOosPath\"][\"attributes\"]","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"forceResolve\"),","                attributes.get(\"lc\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"rType\"),","                attributes.get(\"state\"),","                attributes.get(\"stateQual\"),","                attributes.get(\"status\"),","                attributes.get(\"tCl\"),","                attributes.get(\"tDn\"),","                attributes.get(\"tType\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve fabric blacklist interfaces. Status code: {response.status_code}\")",""]},{"start":{"row":322,"column":101},"end":{"row":323,"column":0},"action":"remove","lines":["",""]},{"start":{"row":322,"column":101},"end":{"row":323,"column":0},"action":"remove","lines":["",""]},{"start":{"row":331,"column":0},"end":{"row":333,"column":30},"action":"remove","lines":["    with open('fabric_blacklist_interfaces.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)"]},{"start":{"row":331,"column":0},"end":{"row":333,"column":30},"action":"insert","lines":["    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)"]},{"start":{"row":382,"column":0},"end":{"row":384,"column":30},"action":"remove","lines":["    with open('fabric_blacklist_interfaces.csv', 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)"]},{"start":{"row":382,"column":0},"end":{"row":384,"column":30},"action":"insert","lines":["    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)"]},{"start":{"row":452,"column":0},"end":{"row":453,"column":0},"action":"insert","lines":["",""]},{"start":{"row":453,"column":0},"end":{"row":522,"column":86},"action":"insert","lines":["def get_fabric_nodes(token):","    URL = f\"{ACI_BASE_URL}/api/node/class/fabricNode.json\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    filename = os.path.join(\"data\", \"fabric_inventory.csv\")","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"]},{"start":{"row":453,"column":8},"end":{"row":453,"column":20},"action":"remove","lines":["fabric_nodes"]},{"start":{"row":453,"column":8},"end":{"row":453,"column":26},"action":"insert","lines":["access_policy_aaep"]},{"start":{"row":454,"column":26},"end":{"row":454,"column":57},"action":"remove","lines":["/api/node/class/fabricNode.json"]},{"start":{"row":454,"column":26},"end":{"row":454,"column":111},"action":"insert","lines":["/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAttEntityP"]},{"start":{"row":471,"column":0},"end":{"row":522,"column":86},"action":"remove","lines":["    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if entry[\"fabricNode\"][\"attributes\"][\"role\"] == \"controller\":","                continue","","            attributes = entry[\"fabricNode\"][\"attributes\"]","","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"adSt\"),","                attributes.get(\"address\"),","                attributes.get(\"annotation\"),","                attributes.get(\"apicType\"),","                attributes.get(\"childAction\"),","                attributes.get(\"delayedHeartbeat\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"fabricSt\"),","                attributes.get(\"id\"),","                attributes.get(\"lastStateModTs\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"model\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"nodeType\"),","                attributes.get(\"role\"),","                attributes.get(\"serial\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","                attributes.get(\"vendor\"),","                attributes.get(\"version\")","            ]","","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","            ","    else:","        print(f\"Failed to retrieve fabric nodes. Status code: {response.status_code}\")"]},{"start":{"row":471,"column":0},"end":{"row":509,"column":101},"action":"insert","lines":["    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            attributes = entry[\"fabricRsOosPath\"][\"attributes\"]","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"forceResolve\"),","                attributes.get(\"lc\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"rType\"),","                attributes.get(\"state\"),","                attributes.get(\"stateQual\"),","                attributes.get(\"status\"),","                attributes.get(\"tCl\"),","                attributes.get(\"tDn\"),","                attributes.get(\"tType\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve fabric blacklist interfaces. Status code: {response.status_code}\")"]},{"start":{"row":509,"column":35},"end":{"row":509,"column":62},"action":"remove","lines":["fabric blacklist interfaces"]},{"start":{"row":509,"column":35},"end":{"row":509,"column":36},"action":"insert","lines":["a"]},{"start":{"row":509,"column":36},"end":{"row":509,"column":37},"action":"insert","lines":["c"]},{"start":{"row":509,"column":37},"end":{"row":509,"column":38},"action":"insert","lines":["c"]},{"start":{"row":509,"column":38},"end":{"row":509,"column":39},"action":"insert","lines":["e"]},{"start":{"row":509,"column":39},"end":{"row":509,"column":40},"action":"insert","lines":["s"]},{"start":{"row":509,"column":40},"end":{"row":509,"column":41},"action":"insert","lines":["s"]},{"start":{"row":509,"column":41},"end":{"row":509,"column":42},"action":"insert","lines":[" "]},{"start":{"row":509,"column":42},"end":{"row":509,"column":43},"action":"insert","lines":["p"]},{"start":{"row":509,"column":43},"end":{"row":509,"column":44},"action":"insert","lines":["o"]},{"start":{"row":509,"column":44},"end":{"row":509,"column":45},"action":"insert","lines":["l"]},{"start":{"row":509,"column":45},"end":{"row":509,"column":46},"action":"insert","lines":["c"]},{"start":{"row":509,"column":46},"end":{"row":509,"column":47},"action":"insert","lines":["i"]},{"start":{"row":509,"column":47},"end":{"row":509,"column":48},"action":"insert","lines":["i"]},{"start":{"row":509,"column":48},"end":{"row":509,"column":49},"action":"insert","lines":["e"]},{"start":{"row":509,"column":48},"end":{"row":509,"column":49},"action":"remove","lines":["e"]},{"start":{"row":509,"column":47},"end":{"row":509,"column":48},"action":"remove","lines":["i"]},{"start":{"row":509,"column":46},"end":{"row":509,"column":47},"action":"remove","lines":["i"]},{"start":{"row":509,"column":45},"end":{"row":509,"column":46},"action":"remove","lines":["c"]},{"start":{"row":509,"column":45},"end":{"row":509,"column":46},"action":"insert","lines":["i"]},{"start":{"row":509,"column":46},"end":{"row":509,"column":47},"action":"insert","lines":["c"]},{"start":{"row":509,"column":47},"end":{"row":509,"column":48},"action":"insert","lines":["i"]},{"start":{"row":509,"column":48},"end":{"row":509,"column":49},"action":"insert","lines":["e"]},{"start":{"row":509,"column":49},"end":{"row":509,"column":50},"action":"insert","lines":["s"]},{"start":{"row":509,"column":50},"end":{"row":509,"column":51},"action":"insert","lines":[" "]},{"start":{"row":509,"column":51},"end":{"row":509,"column":52},"action":"insert","lines":["a"]},{"start":{"row":509,"column":52},"end":{"row":509,"column":53},"action":"insert","lines":["e"]},{"start":{"row":509,"column":53},"end":{"row":509,"column":54},"action":"insert","lines":["e"]},{"start":{"row":509,"column":54},"end":{"row":509,"column":55},"action":"insert","lines":["p"]},{"start":{"row":509,"column":54},"end":{"row":509,"column":55},"action":"remove","lines":["p"]},{"start":{"row":509,"column":53},"end":{"row":509,"column":54},"action":"remove","lines":["e"]},{"start":{"row":509,"column":52},"end":{"row":509,"column":53},"action":"remove","lines":["e"]},{"start":{"row":509,"column":52},"end":{"row":509,"column":53},"action":"insert","lines":["a"]},{"start":{"row":509,"column":53},"end":{"row":509,"column":54},"action":"insert","lines":["e"]},{"start":{"row":509,"column":54},"end":{"row":509,"column":55},"action":"insert","lines":["p"]},{"start":{"row":479,"column":0},"end":{"row":501,"column":13},"action":"remove","lines":["        for entry in data['imdata']:","            attributes = entry[\"fabricRsOosPath\"][\"attributes\"]","            row_as_list = [","                os.environ.get('ACI_APIC_IP'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"forceResolve\"),","                attributes.get(\"lc\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"rType\"),","                attributes.get(\"state\"),","                attributes.get(\"stateQual\"),","                attributes.get(\"status\"),","                attributes.get(\"tCl\"),","                attributes.get(\"tDn\"),","                attributes.get(\"tType\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]"]},{"start":{"row":479,"column":0},"end":{"row":500,"column":5},"action":"insert","lines":["for entry in data['imdata']:","    attributes = entry[\"infraAttEntityP\"][\"attributes\"]","    row_as_list = [","        os.environ.get('ACI_APIC_IP'),","        attributes.get(\"annotation\"),","        attributes.get(\"childAction\"),","        attributes.get(\"configIssues\"),","        attributes.get(\"creator\"),","        attributes.get(\"descr\"),","        attributes.get(\"dn\"),","        attributes.get(\"extMngdBy\"),","        attributes.get(\"lcOwn\"),","        attributes.get(\"modTs\"),","        attributes.get(\"monPolDn\"),","        attributes.get(\"name\"),","        attributes.get(\"nameAlias\"),","        attributes.get(\"ownerKey\"),","        attributes.get(\"ownerTag\"),","        attributes.get(\"status\"),","        attributes.get(\"uid\"),","        attributes.get(\"userdom\"),","    ]"]},{"start":{"row":479,"column":0},"end":{"row":479,"column":4},"action":"insert","lines":["    "]},{"start":{"row":480,"column":0},"end":{"row":480,"column":4},"action":"insert","lines":["    "]},{"start":{"row":481,"column":0},"end":{"row":481,"column":4},"action":"insert","lines":["    "]},{"start":{"row":482,"column":0},"end":{"row":482,"column":4},"action":"insert","lines":["    "]},{"start":{"row":483,"column":0},"end":{"row":483,"column":4},"action":"insert","lines":["    "]},{"start":{"row":484,"column":0},"end":{"row":484,"column":4},"action":"insert","lines":["    "]},{"start":{"row":485,"column":0},"end":{"row":485,"column":4},"action":"insert","lines":["    "]},{"start":{"row":486,"column":0},"end":{"row":486,"column":4},"action":"insert","lines":["    "]},{"start":{"row":487,"column":0},"end":{"row":487,"column":4},"action":"insert","lines":["    "]},{"start":{"row":488,"column":0},"end":{"row":488,"column":4},"action":"insert","lines":["    "]},{"start":{"row":489,"column":0},"end":{"row":489,"column":4},"action":"insert","lines":["    "]},{"start":{"row":490,"column":0},"end":{"row":490,"column":4},"action":"insert","lines":["    "]},{"start":{"row":491,"column":0},"end":{"row":491,"column":4},"action":"insert","lines":["    "]},{"start":{"row":492,"column":0},"end":{"row":492,"column":4},"action":"insert","lines":["    "]},{"start":{"row":493,"column":0},"end":{"row":493,"column":4},"action":"insert","lines":["    "]},{"start":{"row":494,"column":0},"end":{"row":494,"column":4},"action":"insert","lines":["    "]},{"start":{"row":495,"column":0},"end":{"row":495,"column":4},"action":"insert","lines":["    "]},{"start":{"row":496,"column":0},"end":{"row":496,"column":4},"action":"insert","lines":["    "]},{"start":{"row":497,"column":0},"end":{"row":497,"column":4},"action":"insert","lines":["    "]},{"start":{"row":498,"column":0},"end":{"row":498,"column":4},"action":"insert","lines":["    "]},{"start":{"row":499,"column":0},"end":{"row":499,"column":4},"action":"insert","lines":["    "]},{"start":{"row":500,"column":0},"end":{"row":500,"column":4},"action":"insert","lines":["    "]},{"start":{"row":479,"column":0},"end":{"row":479,"column":4},"action":"insert","lines":["    "]},{"start":{"row":480,"column":0},"end":{"row":480,"column":4},"action":"insert","lines":["    "]},{"start":{"row":481,"column":0},"end":{"row":481,"column":4},"action":"insert","lines":["    "]},{"start":{"row":482,"column":0},"end":{"row":482,"column":4},"action":"insert","lines":["    "]},{"start":{"row":483,"column":0},"end":{"row":483,"column":4},"action":"insert","lines":["    "]},{"start":{"row":484,"column":0},"end":{"row":484,"column":4},"action":"insert","lines":["    "]},{"start":{"row":485,"column":0},"end":{"row":485,"column":4},"action":"insert","lines":["    "]},{"start":{"row":486,"column":0},"end":{"row":486,"column":4},"action":"insert","lines":["    "]},{"start":{"row":487,"column":0},"end":{"row":487,"column":4},"action":"insert","lines":["    "]},{"start":{"row":488,"column":0},"end":{"row":488,"column":4},"action":"insert","lines":["    "]},{"start":{"row":489,"column":0},"end":{"row":489,"column":4},"action":"insert","lines":["    "]},{"start":{"row":490,"column":0},"end":{"row":490,"column":4},"action":"insert","lines":["    "]},{"start":{"row":491,"column":0},"end":{"row":491,"column":4},"action":"insert","lines":["    "]},{"start":{"row":492,"column":0},"end":{"row":492,"column":4},"action":"insert","lines":["    "]},{"start":{"row":493,"column":0},"end":{"row":493,"column":4},"action":"insert","lines":["    "]},{"start":{"row":494,"column":0},"end":{"row":494,"column":4},"action":"insert","lines":["    "]},{"start":{"row":495,"column":0},"end":{"row":495,"column":4},"action":"insert","lines":["    "]},{"start":{"row":496,"column":0},"end":{"row":496,"column":4},"action":"insert","lines":["    "]},{"start":{"row":497,"column":0},"end":{"row":497,"column":4},"action":"insert","lines":["    "]},{"start":{"row":498,"column":0},"end":{"row":498,"column":4},"action":"insert","lines":["    "]},{"start":{"row":499,"column":0},"end":{"row":499,"column":4},"action":"insert","lines":["    "]},{"start":{"row":500,"column":0},"end":{"row":500,"column":4},"action":"insert","lines":["    "]},{"start":{"row":479,"column":0},"end":{"row":479,"column":4},"action":"insert","lines":["    "]},{"start":{"row":480,"column":0},"end":{"row":480,"column":4},"action":"insert","lines":["    "]},{"start":{"row":481,"column":0},"end":{"row":481,"column":4},"action":"insert","lines":["    "]},{"start":{"row":482,"column":0},"end":{"row":482,"column":4},"action":"insert","lines":["    "]},{"start":{"row":483,"column":0},"end":{"row":483,"column":4},"action":"insert","lines":["    "]},{"start":{"row":484,"column":0},"end":{"row":484,"column":4},"action":"insert","lines":["    "]},{"start":{"row":485,"column":0},"end":{"row":485,"column":4},"action":"insert","lines":["    "]},{"start":{"row":486,"column":0},"end":{"row":486,"column":4},"action":"insert","lines":["    "]},{"start":{"row":487,"column":0},"end":{"row":487,"column":4},"action":"insert","lines":["    "]},{"start":{"row":488,"column":0},"end":{"row":488,"column":4},"action":"insert","lines":["    "]},{"start":{"row":489,"column":0},"end":{"row":489,"column":4},"action":"insert","lines":["    "]},{"start":{"row":490,"column":0},"end":{"row":490,"column":4},"action":"insert","lines":["    "]},{"start":{"row":491,"column":0},"end":{"row":491,"column":4},"action":"insert","lines":["    "]},{"start":{"row":492,"column":0},"end":{"row":492,"column":4},"action":"insert","lines":["    "]},{"start":{"row":493,"column":0},"end":{"row":493,"column":4},"action":"insert","lines":["    "]},{"start":{"row":494,"column":0},"end":{"row":494,"column":4},"action":"insert","lines":["    "]},{"start":{"row":495,"column":0},"end":{"row":495,"column":4},"action":"insert","lines":["    "]},{"start":{"row":496,"column":0},"end":{"row":496,"column":4},"action":"insert","lines":["    "]},{"start":{"row":497,"column":0},"end":{"row":497,"column":4},"action":"insert","lines":["    "]},{"start":{"row":498,"column":0},"end":{"row":498,"column":4},"action":"insert","lines":["    "]},{"start":{"row":499,"column":0},"end":{"row":499,"column":4},"action":"insert","lines":["    "]},{"start":{"row":500,"column":0},"end":{"row":500,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":479,"column":0},"end":{"row":479,"column":4},"action":"remove","lines":["    "],"id":172},{"start":{"row":480,"column":0},"end":{"row":480,"column":4},"action":"remove","lines":["    "]},{"start":{"row":481,"column":0},"end":{"row":481,"column":4},"action":"remove","lines":["    "]},{"start":{"row":482,"column":0},"end":{"row":482,"column":4},"action":"remove","lines":["    "]},{"start":{"row":483,"column":0},"end":{"row":483,"column":4},"action":"remove","lines":["    "]},{"start":{"row":484,"column":0},"end":{"row":484,"column":4},"action":"remove","lines":["    "]},{"start":{"row":485,"column":0},"end":{"row":485,"column":4},"action":"remove","lines":["    "]},{"start":{"row":486,"column":0},"end":{"row":486,"column":4},"action":"remove","lines":["    "]},{"start":{"row":487,"column":0},"end":{"row":487,"column":4},"action":"remove","lines":["    "]},{"start":{"row":488,"column":0},"end":{"row":488,"column":4},"action":"remove","lines":["    "]},{"start":{"row":489,"column":0},"end":{"row":489,"column":4},"action":"remove","lines":["    "]},{"start":{"row":490,"column":0},"end":{"row":490,"column":4},"action":"remove","lines":["    "]},{"start":{"row":491,"column":0},"end":{"row":491,"column":4},"action":"remove","lines":["    "]},{"start":{"row":492,"column":0},"end":{"row":492,"column":4},"action":"remove","lines":["    "]},{"start":{"row":493,"column":0},"end":{"row":493,"column":4},"action":"remove","lines":["    "]},{"start":{"row":494,"column":0},"end":{"row":494,"column":4},"action":"remove","lines":["    "]},{"start":{"row":495,"column":0},"end":{"row":495,"column":4},"action":"remove","lines":["    "]},{"start":{"row":496,"column":0},"end":{"row":496,"column":4},"action":"remove","lines":["    "]},{"start":{"row":497,"column":0},"end":{"row":497,"column":4},"action":"remove","lines":["    "]},{"start":{"row":498,"column":0},"end":{"row":498,"column":4},"action":"remove","lines":["    "]},{"start":{"row":499,"column":0},"end":{"row":499,"column":4},"action":"remove","lines":["    "]},{"start":{"row":500,"column":0},"end":{"row":500,"column":4},"action":"remove","lines":["    "]},{"start":{"row":527,"column":38},"end":{"row":528,"column":0},"action":"insert","lines":["",""]},{"start":{"row":528,"column":0},"end":{"row":528,"column":29},"action":"insert","lines":["get_access_policy_aaep(token)"]},{"start":{"row":11,"column":44},"end":{"row":11,"column":55},"action":"remove","lines":["ACI_APIC_IP"]},{"start":{"row":11,"column":44},"end":{"row":11,"column":76},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":59,"column":70},"end":{"row":59,"column":81},"action":"remove","lines":["ACI_APIC_IP"]},{"start":{"row":59,"column":70},"end":{"row":59,"column":102},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":134,"column":32},"end":{"row":134,"column":43},"action":"remove","lines":["ACI_APIC_IP"]},{"start":{"row":134,"column":32},"end":{"row":134,"column":64},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":295,"column":32},"end":{"row":295,"column":43},"action":"remove","lines":["ACI_APIC_IP"]},{"start":{"row":295,"column":32},"end":{"row":295,"column":64},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":482,"column":32},"end":{"row":482,"column":43},"action":"remove","lines":["ACI_APIC_IP"]},{"start":{"row":482,"column":32},"end":{"row":482,"column":64},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":330,"column":0},"end":{"row":379,"column":94},"action":"remove","lines":["def tf_ciscodevnet_aci_interface_blacklist():","    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    template_fex = Template(\"\"\"","resource \"aci_interface_blacklist\" \"P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}}\" {","    pod_id    = \"{{pod_id}}\"","    node_id   = \"{{node_id}}\"","    fex_id    = \"{{fex_id}}\"","    interface = \"{{interface}}\"","  ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","    template_no_fex = Template(\"\"\"","resource \"aci_interface_blacklist\" \"P{{pod_id}}_N{{node_id}}_{{interface_name}}\" {","    pod_id    = \"{{pod_id}}\"","    node_id   = \"{{node_id}}\"","    interface = \"{{interface}}\"","  ","    lifecycle {","        ignore_changes = all","    }  ","}","\"\"\")","    ","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","        if \"extpaths\" in entry['tDn']:","            terraform_block = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            terraform_block = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_interface_blacklist, appended to import.tf successfully!\")"]},{"start":{"row":330,"column":0},"end":{"row":386,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_blacklist():","    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    template_fex = Template(\"\"\"","resource \"aci_interface_blacklist\" \"P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}}\" {","    pod_id    = \"{{pod_id}}\"","    node_id   = \"{{node_id}}\"","    fex_id    = \"{{fex_id}}\"","    interface = \"{{interface}}\"","  ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","    template_no_fex = Template(\"\"\"","resource \"aci_interface_blacklist\" \"P{{pod_id}}_N{{node_id}}_{{interface_name}}\" {","    pod_id    = \"{{pod_id}}\"","    node_id   = \"{{node_id}}\"","    interface = \"{{interface}}\"","  ","    lifecycle {","        ignore_changes = all","    }  ","}","\"\"\")","    ","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","","        # Check if interface is None or empty","        if not interface:","            print(f\"Warning: Could not parse tDn for entry {entry['tDn']}\")","            continue","","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","        if \"extpaths\" in entry['tDn']:","            terraform_block = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            terraform_block = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_interface_blacklist, appended to import.tf successfully!\")",""]},{"start":{"row":385,"column":94},"end":{"row":386,"column":0},"action":"remove","lines":["",""]},{"start":{"row":368,"column":0},"end":{"row":368,"column":45},"action":"remove","lines":["        # Check if interface is None or empty"]},{"start":{"row":367,"column":0},"end":{"row":368,"column":0},"action":"remove","lines":["",""]},{"start":{"row":386,"column":0},"end":{"row":419,"column":102},"action":"remove","lines":["def tf_ciscodevnet_aci_interface_blacklist_commands():","    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    template_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/extpaths-{{fex_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","    template_no_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","","    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","","        if \"extpaths\" in entry['tDn']:","            command = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            command = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import commands for aci_interface_blacklist appended to import_commands.txt successfully!\")"]},{"start":{"row":386,"column":0},"end":{"row":426,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_blacklist_commands():","    with open(os.path.join('data', 'fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    template_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/extpaths-{{fex_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","    template_no_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","","    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","","        # Check if interface is None or empty","        if not interface:","            print(f\"Warning: Could not parse tDn for entry {entry['tDn']}\")","            continue","","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","","        if \"extpaths\" in entry['tDn']:","            command = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            command = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import commands for aci_interface_blacklist appended to import_commands.txt successfully!\")",""]},{"start":{"row":425,"column":102},"end":{"row":426,"column":0},"action":"remove","lines":["",""]},{"start":{"row":426,"column":0},"end":{"row":426,"column":4},"action":"remove","lines":["    "]},{"start":{"row":425,"column":102},"end":{"row":426,"column":0},"action":"remove","lines":["",""]},{"start":{"row":11,"column":31},"end":{"row":11,"column":84},"action":"remove","lines":["TF_VAR_CISCO_TF_VAR_CISCO_ACI_APIC_IP_ADDRESS_ADDRESS"]},{"start":{"row":11,"column":31},"end":{"row":11,"column":66},"action":"insert","lines":["TF_VAR_CISCO_ACI_TERRAFORM_USERNAME"]},{"start":{"row":11,"column":31},"end":{"row":11,"column":66},"action":"remove","lines":["TF_VAR_CISCO_ACI_TERRAFORM_USERNAME"]},{"start":{"row":11,"column":31},"end":{"row":11,"column":63},"action":"insert","lines":["TF_VAR_CISCO_ACI_APIC_IP_ADDRESS"]},{"start":{"row":433,"column":40},"end":{"row":433,"column":41},"action":"insert","lines":["p"]},{"start":{"row":433,"column":41},"end":{"row":433,"column":42},"action":"insert","lines":["y"]},{"start":{"row":433,"column":42},"end":{"row":433,"column":43},"action":"insert","lines":["_"]},{"start":{"row":485,"column":40},"end":{"row":485,"column":71},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":485,"column":40},"end":{"row":485,"column":65},"action":"insert","lines":["py_access_policy_aaep.csv"]},{"start":{"row":514,"column":40},"end":{"row":514,"column":71},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":514,"column":40},"end":{"row":514,"column":65},"action":"insert","lines":["py_access_policy_aaep.csv"]},{"start":{"row":239,"column":40},"end":{"row":239,"column":71},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":239,"column":40},"end":{"row":239,"column":74},"action":"insert","lines":["py_fabric_blacklist_interfaces.csv"]},{"start":{"row":288,"column":40},"end":{"row":288,"column":71},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":288,"column":40},"end":{"row":288,"column":74},"action":"insert","lines":["py_fabric_blacklist_interfaces.csv"]},{"start":{"row":318,"column":40},"end":{"row":318,"column":71},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":318,"column":40},"end":{"row":318,"column":74},"action":"insert","lines":["py_fabric_blacklist_interfaces.csv"]},{"start":{"row":331,"column":36},"end":{"row":331,"column":67},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":331,"column":36},"end":{"row":331,"column":70},"action":"insert","lines":["py_fabric_blacklist_interfaces.csv"]},{"start":{"row":387,"column":36},"end":{"row":387,"column":67},"action":"remove","lines":["fabric_blacklist_interfaces.csv"]},{"start":{"row":387,"column":36},"end":{"row":387,"column":70},"action":"insert","lines":["py_fabric_blacklist_interfaces.csv"]},{"start":{"row":71,"column":40},"end":{"row":71,"column":60},"action":"remove","lines":["fabric_inventory.csv"]},{"start":{"row":71,"column":40},"end":{"row":71,"column":63},"action":"insert","lines":["py_fabric_inventory.csv"]},{"start":{"row":117,"column":37},"end":{"row":117,"column":57},"action":"remove","lines":["fabric_inventory.csv"]},{"start":{"row":117,"column":37},"end":{"row":117,"column":60},"action":"insert","lines":["py_fabric_inventory.csv"]},{"start":{"row":173,"column":41},"end":{"row":173,"column":61},"action":"remove","lines":["fabric_inventory.csv"]},{"start":{"row":173,"column":41},"end":{"row":173,"column":64},"action":"insert","lines":["py_fabric_inventory.csv"]},{"start":{"row":212,"column":41},"end":{"row":212,"column":61},"action":"remove","lines":["fabric_inventory.csv"]},{"start":{"row":212,"column":41},"end":{"row":212,"column":64},"action":"insert","lines":["py_fabric_inventory.csv"]},{"start":{"row":479,"column":37},"end":{"row":479,"column":57},"action":"remove","lines":["fabric_inventory.csv"]},{"start":{"row":479,"column":37},"end":{"row":479,"column":60},"action":"insert","lines":["py_fabric_inventory.csv"]},{"start":{"row":518,"column":94},"end":{"row":519,"column":0},"action":"insert","lines":["",""]},{"start":{"row":519,"column":0},"end":{"row":519,"column":8},"action":"insert","lines":["        "]},{"start":{"row":519,"column":8},"end":{"row":520,"column":0},"action":"insert","lines":["",""]},{"start":{"row":520,"column":0},"end":{"row":520,"column":8},"action":"insert","lines":["        "]},{"start":{"row":520,"column":4},"end":{"row":520,"column":8},"action":"remove","lines":["    "]},{"start":{"row":520,"column":0},"end":{"row":520,"column":4},"action":"remove","lines":["    "]},{"start":{"row":520,"column":0},"end":{"row":557,"column":93},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_node_member():","    csv_filepath = os.path.join(\"data\", \"py_fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            id=entry['id'],","            name=entry['name'],","            serial=entry['serial']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_fabric_node_member, appended to import.tf successfully!\")"]},{"start":{"row":520,"column":23},"end":{"row":520,"column":41},"action":"remove","lines":["fabric_node_member"]},{"start":{"row":520,"column":23},"end":{"row":520,"column":41},"action":"insert","lines":["access_policy_aaep"]},{"start":{"row":521,"column":44},"end":{"row":521,"column":60},"action":"remove","lines":["fabric_inventory"]},{"start":{"row":521,"column":44},"end":{"row":521,"column":62},"action":"insert","lines":["access_policy_aaep"]},{"start":{"row":528,"column":0},"end":{"row":530,"column":30},"action":"remove","lines":["resource \"aci_fabric_node_member\" \"Node{{id}}_{{serial}}\" {","    name        = \"{{name}}\"","    serial      = \"{{serial}}\""]},{"start":{"row":528,"column":0},"end":{"row":532,"column":30},"action":"insert","lines":["resource \"aci_attachable_access_entity_profile\" \"example\" {","  description = \"AAEP description\"","  name        = \"demo_entity_prof\"","  annotation  = \"tag_entity\"","  name_alias  = \"alias_entity\""]},{"start":{"row":529,"column":2},"end":{"row":529,"column":4},"action":"insert","lines":["  "]},{"start":{"row":530,"column":2},"end":{"row":530,"column":4},"action":"insert","lines":["  "]},{"start":{"row":531,"column":2},"end":{"row":531,"column":4},"action":"insert","lines":["  "]},{"start":{"row":532,"column":2},"end":{"row":532,"column":4},"action":"insert","lines":["  "]},{"start":{"row":529,"column":0},"end":{"row":529,"column":36},"action":"remove","lines":["    description = \"AAEP description\""]},{"start":{"row":528,"column":59},"end":{"row":529,"column":0},"action":"remove","lines":["",""]},{"start":{"row":530,"column":0},"end":{"row":531,"column":32},"action":"remove","lines":["    annotation  = \"tag_entity\"","    name_alias  = \"alias_entity\""]},{"start":{"row":529,"column":36},"end":{"row":530,"column":0},"action":"remove","lines":["",""]},{"start":{"row":528,"column":49},"end":{"row":528,"column":56},"action":"remove","lines":["example"]},{"start":{"row":528,"column":49},"end":{"row":528,"column":50},"action":"insert","lines":["{"]},{"start":{"row":528,"column":50},"end":{"row":528,"column":51},"action":"insert","lines":["{"]},{"start":{"row":528,"column":51},"end":{"row":528,"column":52},"action":"insert","lines":["}"]},{"start":{"row":528,"column":52},"end":{"row":528,"column":53},"action":"insert","lines":["}"]},{"start":{"row":528,"column":51},"end":{"row":528,"column":52},"action":"insert","lines":["n"]},{"start":{"row":528,"column":52},"end":{"row":528,"column":53},"action":"insert","lines":["a"]},{"start":{"row":528,"column":53},"end":{"row":528,"column":54},"action":"insert","lines":["m"]},{"start":{"row":528,"column":54},"end":{"row":528,"column":55},"action":"insert","lines":["e"]},{"start":{"row":529,"column":19},"end":{"row":529,"column":35},"action":"remove","lines":["demo_entity_prof"]},{"start":{"row":529,"column":19},"end":{"row":529,"column":27},"action":"insert","lines":["{{name}}"]},{"start":{"row":546,"column":0},"end":{"row":546,"column":27},"action":"remove","lines":["            id=entry['id'],"]},{"start":{"row":545,"column":42},"end":{"row":546,"column":0},"action":"remove","lines":["",""]},{"start":{"row":547,"column":1},"end":{"row":547,"column":34},"action":"remove","lines":["           serial=entry['serial']"]},{"start":{"row":547,"column":0},"end":{"row":547,"column":1},"action":"remove","lines":[" "]},{"start":{"row":546,"column":31},"end":{"row":547,"column":0},"action":"remove","lines":["",""]},{"start":{"row":546,"column":30},"end":{"row":546,"column":31},"action":"remove","lines":[","]},{"start":{"row":554,"column":32},"end":{"row":554,"column":54},"action":"remove","lines":["aci_fabric_node_member"]},{"start":{"row":554,"column":32},"end":{"row":554,"column":68},"action":"insert","lines":["aci_attachable_access_entity_profile"]},{"start":{"row":580,"column":49},"end":{"row":581,"column":0},"action":"insert","lines":["",""]},{"start":{"row":581,"column":0},"end":{"row":581,"column":39},"action":"insert","lines":["tf_ciscodevnet_aci_access_policy_aaep()"]},{"start":{"row":554,"column":107},"end":{"row":555,"column":0},"action":"insert","lines":["",""]},{"start":{"row":555,"column":0},"end":{"row":555,"column":4},"action":"insert","lines":["    "]},{"start":{"row":555,"column":4},"end":{"row":556,"column":0},"action":"insert","lines":["",""]},{"start":{"row":556,"column":0},"end":{"row":556,"column":4},"action":"insert","lines":["    "]},{"start":{"row":556,"column":0},"end":{"row":556,"column":4},"action":"remove","lines":["    "]},{"start":{"row":556,"column":0},"end":{"row":576,"column":36},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_node_member_commands():","    csv_filepath = os.path.join(\"data\", \"py_fabric_inventory.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_fabric_node_member.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)"]},{"start":{"row":556,"column":23},"end":{"row":556,"column":50},"action":"remove","lines":["fabric_node_member_commands"]},{"start":{"row":556,"column":23},"end":{"row":556,"column":45},"action":"insert","lines":["aci_access_policy_aaep"]},{"start":{"row":557,"column":44},"end":{"row":557,"column":60},"action":"remove","lines":["fabric_inventory"]},{"start":{"row":557,"column":44},"end":{"row":557,"column":66},"action":"insert","lines":["aci_access_policy_aaep"]},{"start":{"row":563,"column":48},"end":{"row":563,"column":70},"action":"remove","lines":["aci_fabric_node_member"]},{"start":{"row":563,"column":48},"end":{"row":563,"column":84},"action":"insert","lines":["aci_attachable_access_entity_profile"]},{"start":{"row":407,"column":0},"end":{"row":407,"column":45},"action":"remove","lines":["        # Check if interface is None or empty"]},{"start":{"row":406,"column":0},"end":{"row":407,"column":0},"action":"remove","lines":["",""]},{"start":{"row":555,"column":0},"end":{"row":576,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_aci_access_policy_aaep():","    csv_filepath = os.path.join(\"data\", \"py_aci_access_policy_aaep.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    import_command_template = \"terraform import aci_attachable_access_entity_profile.Node{}_{} uni/controller/nodeidentpol/nodep-{}\\n\"","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","    for entry in entries:","        command = import_command_template.format(entry['id'], entry['serial'], entry['serial'])","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)",""]},{"start":{"row":555,"column":0},"end":{"row":593,"column":102},"action":"insert","lines":["def tf_ciscodevnet_aci_interface_blacklist_commands():","    with open(os.path.join('data', 'py_fabric_blacklist_interfaces.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    template_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/extpaths-{{fex_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","    template_no_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_commands = cmd_file.readlines()","","    new_commands = \"\"","","    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","","        if not interface:","            print(f\"Warning: Could not parse tDn for entry {entry['tDn']}\")","            continue","","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","","        if \"extpaths\" in entry['tDn']:","            command = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            command = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if command not in existing_commands:","            new_commands += command","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import commands for aci_interface_blacklist appended to import_commands.txt successfully!\")"]},{"start":{"row":555,"column":19},"end":{"row":555,"column":51},"action":"remove","lines":["aci_interface_blacklist_commands"]},{"start":{"row":555,"column":19},"end":{"row":555,"column":37},"action":"insert","lines":["access_policy_aaep"]}],[{"start":{"row":593,"column":102},"end":{"row":594,"column":0},"action":"insert","lines":["",""],"id":173},{"start":{"row":594,"column":0},"end":{"row":594,"column":4},"action":"insert","lines":["    "]},{"start":{"row":555,"column":19},"end":{"row":555,"column":20},"action":"insert","lines":["a"]},{"start":{"row":555,"column":20},"end":{"row":555,"column":21},"action":"insert","lines":["c"]},{"start":{"row":555,"column":21},"end":{"row":555,"column":22},"action":"insert","lines":["i"]},{"start":{"row":555,"column":22},"end":{"row":555,"column":23},"action":"insert","lines":["_"]},{"start":{"row":555,"column":41},"end":{"row":555,"column":42},"action":"insert","lines":["_"]},{"start":{"row":555,"column":42},"end":{"row":555,"column":43},"action":"insert","lines":["c"]},{"start":{"row":555,"column":43},"end":{"row":555,"column":44},"action":"insert","lines":["o"]},{"start":{"row":555,"column":44},"end":{"row":555,"column":45},"action":"insert","lines":["m"]},{"start":{"row":555,"column":45},"end":{"row":555,"column":46},"action":"insert","lines":["m"]},{"start":{"row":555,"column":46},"end":{"row":555,"column":47},"action":"insert","lines":["a"]},{"start":{"row":555,"column":47},"end":{"row":555,"column":48},"action":"insert","lines":["n"]},{"start":{"row":555,"column":48},"end":{"row":555,"column":49},"action":"insert","lines":["d"]},{"start":{"row":555,"column":49},"end":{"row":555,"column":50},"action":"insert","lines":["s"]},{"start":{"row":556,"column":39},"end":{"row":556,"column":66},"action":"remove","lines":["fabric_blacklist_interfaces"]},{"start":{"row":556,"column":39},"end":{"row":556,"column":61},"action":"insert","lines":["aci_access_policy_aaep"]},{"start":{"row":563,"column":0},"end":{"row":565,"column":4},"action":"remove","lines":["    template_no_fex = Template(\"\"\"","terraform import aci_interface_blacklist.P{{pod_id}}_N{{node_id}}_{{interface_name}} uni/fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/paths-{{node_id}}/pathep-[{{interface}}]]","\"\"\")"]},{"start":{"row":562,"column":4},"end":{"row":563,"column":0},"action":"remove","lines":["",""]},{"start":{"row":560,"column":4},"end":{"row":560,"column":16},"action":"remove","lines":["template_fex"]},{"start":{"row":560,"column":4},"end":{"row":560,"column":5},"action":"insert","lines":["c"]},{"start":{"row":560,"column":5},"end":{"row":560,"column":6},"action":"insert","lines":["o"]},{"start":{"row":560,"column":6},"end":{"row":560,"column":7},"action":"insert","lines":["m"]},{"start":{"row":560,"column":7},"end":{"row":560,"column":8},"action":"insert","lines":["m"]},{"start":{"row":560,"column":8},"end":{"row":560,"column":9},"action":"insert","lines":["a"]},{"start":{"row":560,"column":9},"end":{"row":560,"column":10},"action":"insert","lines":["n"]},{"start":{"row":560,"column":10},"end":{"row":560,"column":11},"action":"insert","lines":["d"]},{"start":{"row":560,"column":11},"end":{"row":560,"column":12},"action":"insert","lines":["_"]},{"start":{"row":560,"column":12},"end":{"row":560,"column":13},"action":"insert","lines":["t"]},{"start":{"row":560,"column":13},"end":{"row":560,"column":14},"action":"insert","lines":["e"]},{"start":{"row":560,"column":14},"end":{"row":560,"column":15},"action":"insert","lines":["m"]},{"start":{"row":560,"column":15},"end":{"row":560,"column":16},"action":"insert","lines":["p"]},{"start":{"row":560,"column":16},"end":{"row":560,"column":17},"action":"insert","lines":["l"]},{"start":{"row":560,"column":17},"end":{"row":560,"column":18},"action":"insert","lines":["a"]},{"start":{"row":560,"column":18},"end":{"row":560,"column":19},"action":"insert","lines":["t"]},{"start":{"row":560,"column":19},"end":{"row":560,"column":20},"action":"insert","lines":["e"]},{"start":{"row":561,"column":17},"end":{"row":561,"column":40},"action":"remove","lines":["aci_interface_blacklist"]},{"start":{"row":561,"column":17},"end":{"row":561,"column":53},"action":"insert","lines":["aci_attachable_access_entity_profile"]},{"start":{"row":561,"column":54},"end":{"row":561,"column":109},"action":"remove","lines":["P{{pod_id}}_N{{node_id}}_F{{fex_id}}_{{interface_name}}"]},{"start":{"row":561,"column":54},"end":{"row":561,"column":55},"action":"insert","lines":["{"]},{"start":{"row":561,"column":55},"end":{"row":561,"column":56},"action":"insert","lines":["{"]},{"start":{"row":561,"column":56},"end":{"row":561,"column":57},"action":"insert","lines":["}"]},{"start":{"row":561,"column":57},"end":{"row":561,"column":58},"action":"insert","lines":["}"]},{"start":{"row":561,"column":56},"end":{"row":561,"column":57},"action":"insert","lines":["n"]},{"start":{"row":561,"column":57},"end":{"row":561,"column":58},"action":"insert","lines":["a"]},{"start":{"row":561,"column":58},"end":{"row":561,"column":59},"action":"insert","lines":["m"]},{"start":{"row":561,"column":59},"end":{"row":561,"column":60},"action":"insert","lines":["e"]},{"start":{"row":561,"column":67},"end":{"row":561,"column":178},"action":"remove","lines":["fabric/outofsvc/rsoosPath-[topology/pod-{{pod_id}}/extpaths-{{fex_id}}/paths-{{node_id}}/pathep-[{{interface}}]"]},{"start":{"row":561,"column":67},"end":{"row":561,"column":68},"action":"remove","lines":["]"]},{"start":{"row":561,"column":67},"end":{"row":561,"column":68},"action":"insert","lines":["i"]},{"start":{"row":561,"column":68},"end":{"row":561,"column":69},"action":"insert","lines":["n"]},{"start":{"row":561,"column":69},"end":{"row":561,"column":70},"action":"insert","lines":["f"]},{"start":{"row":561,"column":70},"end":{"row":561,"column":71},"action":"insert","lines":["r"]},{"start":{"row":561,"column":71},"end":{"row":561,"column":72},"action":"insert","lines":["a"]},{"start":{"row":561,"column":72},"end":{"row":561,"column":73},"action":"insert","lines":["/"]},{"start":{"row":561,"column":73},"end":{"row":561,"column":74},"action":"insert","lines":["a"]},{"start":{"row":561,"column":74},"end":{"row":561,"column":75},"action":"insert","lines":["t"]},{"start":{"row":561,"column":75},"end":{"row":561,"column":76},"action":"insert","lines":["t"]},{"start":{"row":561,"column":76},"end":{"row":561,"column":77},"action":"insert","lines":["e"]},{"start":{"row":561,"column":77},"end":{"row":561,"column":78},"action":"insert","lines":["n"]},{"start":{"row":561,"column":78},"end":{"row":561,"column":79},"action":"insert","lines":["t"]},{"start":{"row":561,"column":79},"end":{"row":561,"column":80},"action":"insert","lines":["p"]},{"start":{"row":561,"column":80},"end":{"row":561,"column":81},"action":"insert","lines":["-"]},{"start":{"row":561,"column":81},"end":{"row":561,"column":82},"action":"insert","lines":[";"]},{"start":{"row":561,"column":82},"end":{"row":561,"column":83},"action":"insert","lines":[";"]},{"start":{"row":561,"column":82},"end":{"row":561,"column":83},"action":"remove","lines":[";"]},{"start":{"row":561,"column":81},"end":{"row":561,"column":82},"action":"remove","lines":[";"]}],[{"start":{"row":561,"column":81},"end":{"row":561,"column":83},"action":"insert","lines":["[]"],"id":174}],[{"start":{"row":561,"column":82},"end":{"row":561,"column":84},"action":"insert","lines":["[]"],"id":175},{"start":{"row":561,"column":84},"end":{"row":561,"column":85},"action":"remove","lines":["]"]},{"start":{"row":561,"column":83},"end":{"row":561,"column":84},"action":"remove","lines":["]"]},{"start":{"row":561,"column":82},"end":{"row":561,"column":83},"action":"remove","lines":["["]},{"start":{"row":561,"column":81},"end":{"row":561,"column":82},"action":"remove","lines":["["]},{"start":{"row":561,"column":81},"end":{"row":561,"column":82},"action":"insert","lines":["{"]},{"start":{"row":561,"column":82},"end":{"row":561,"column":83},"action":"insert","lines":["{"]},{"start":{"row":561,"column":83},"end":{"row":561,"column":84},"action":"insert","lines":["}"]},{"start":{"row":561,"column":84},"end":{"row":561,"column":85},"action":"insert","lines":["}"]},{"start":{"row":561,"column":83},"end":{"row":561,"column":84},"action":"insert","lines":["n"]},{"start":{"row":561,"column":84},"end":{"row":561,"column":85},"action":"insert","lines":["a"]},{"start":{"row":561,"column":85},"end":{"row":561,"column":86},"action":"insert","lines":["m"]},{"start":{"row":561,"column":86},"end":{"row":561,"column":87},"action":"insert","lines":["e"]},{"start":{"row":570,"column":0},"end":{"row":586,"column":0},"action":"remove","lines":["    for entry in entries:","        pod_id, node_id, fex_id, interface = parse_tdn(entry['tDn'])","","        if not interface:","            print(f\"Warning: Could not parse tDn for entry {entry['tDn']}\")","            continue","","        interface_name = interface.replace(\"/\", \"_\")  # Change / to _ for the resource name","","        if \"extpaths\" in entry['tDn']:","            command = template_fex.render(pod_id=pod_id, node_id=node_id, fex_id=fex_id, interface=interface, interface_name=interface_name)","        else:","            command = template_no_fex.render(pod_id=pod_id, node_id=node_id, interface=interface, interface_name=interface_name)","","        if command not in existing_commands:","            new_commands += command",""]},{"start":{"row":567,"column":0},"end":{"row":568,"column":0},"action":"insert","lines":["",""]},{"start":{"row":568,"column":0},"end":{"row":568,"column":43},"action":"insert","lines":["    template = Template(terraform_template)"]},{"start":{"row":568,"column":24},"end":{"row":568,"column":42},"action":"remove","lines":["terraform_template"]},{"start":{"row":568,"column":24},"end":{"row":568,"column":40},"action":"insert","lines":["command_template"]},{"start":{"row":569,"column":21},"end":{"row":570,"column":0},"action":"insert","lines":["",""]},{"start":{"row":570,"column":0},"end":{"row":570,"column":4},"action":"insert","lines":["    "]},{"start":{"row":570,"column":4},"end":{"row":571,"column":0},"action":"insert","lines":["",""]},{"start":{"row":571,"column":0},"end":{"row":571,"column":4},"action":"insert","lines":["    "]},{"start":{"row":571,"column":0},"end":{"row":582,"column":4},"action":"insert","lines":["    for entry in entries:","        terraform_block = template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_attachable_access_entity_profile, appended to import.tf successfully!\")","    "]},{"start":{"row":576,"column":12},"end":{"row":576,"column":33},"action":"remove","lines":["new_terraform_content"]},{"start":{"row":576,"column":12},"end":{"row":576,"column":24},"action":"insert","lines":["new_commands"]},{"start":{"row":566,"column":8},"end":{"row":566,"column":25},"action":"remove","lines":["existing_commands"]},{"start":{"row":566,"column":8},"end":{"row":566,"column":24},"action":"insert","lines":["existing_content"]},{"start":{"row":578,"column":15},"end":{"row":578,"column":24},"action":"remove","lines":["import.tf"]},{"start":{"row":578,"column":15},"end":{"row":578,"column":34},"action":"insert","lines":["import_commands.txt"]},{"start":{"row":579,"column":22},"end":{"row":579,"column":43},"action":"remove","lines":["new_terraform_content"]},{"start":{"row":579,"column":22},"end":{"row":579,"column":34},"action":"insert","lines":["new_commands"]},{"start":{"row":583,"column":0},"end":{"row":584,"column":0},"action":"remove","lines":["",""]},{"start":{"row":582,"column":0},"end":{"row":585,"column":36},"action":"remove","lines":["        ","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)"]},{"start":{"row":581,"column":107},"end":{"row":582,"column":0},"action":"remove","lines":["",""]},{"start":{"row":581,"column":0},"end":{"row":581,"column":107},"action":"remove","lines":["    print(\"Terraform resources, aci_attachable_access_entity_profile, appended to import.tf successfully!\")"]},{"start":{"row":580,"column":0},"end":{"row":581,"column":0},"action":"remove","lines":["",""]},{"start":{"row":579,"column":35},"end":{"row":580,"column":0},"action":"remove","lines":["",""]},{"start":{"row":608,"column":39},"end":{"row":609,"column":0},"action":"insert","lines":["",""]},{"start":{"row":609,"column":0},"end":{"row":609,"column":48},"action":"insert","lines":["tf_ciscodevnet_aci_access_policy_aaep_commands()"]},{"start":{"row":556,"column":41},"end":{"row":556,"column":42},"action":"remove","lines":["i"]},{"start":{"row":556,"column":40},"end":{"row":556,"column":41},"action":"remove","lines":["c"]},{"start":{"row":556,"column":39},"end":{"row":556,"column":40},"action":"remove","lines":["a"]},{"start":{"row":556,"column":38},"end":{"row":556,"column":39},"action":"remove","lines":["_"]},{"start":{"row":555,"column":0},"end":{"row":581,"column":102},"action":"remove","lines":["def tf_ciscodevnet_aci_access_policy_aaep_commands():","    with open(os.path.join('data', 'py_access_policy_aaep.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_attachable_access_entity_profile.{{name}} uni/infra/attentp-{{name}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    template = Template(command_template)","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_interface_blacklist appended to import_commands.txt successfully!\")"]},{"start":{"row":555,"column":0},"end":{"row":581,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_access_policy_aaep_commands():","    with open(os.path.join('data', 'py_access_policy_aaep.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_attachable_access_entity_profile.{{name}} uni/infra/attentp-{{name}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_attachable_access_entity_profile appended to import_commands.txt successfully!\")",""]}],[{"start":{"row":582,"column":0},"end":{"row":584,"column":56},"action":"insert","lines":["########################################################","### ACI ACCESS POLICIES ATTACHABLE ENTITY PROFILE    ###","########################################################"],"id":176},{"start":{"row":584,"column":56},"end":{"row":584,"column":60},"action":"remove","lines":["    "]},{"start":{"row":584,"column":56},"end":{"row":585,"column":0},"action":"insert","lines":["",""]},{"start":{"row":585,"column":0},"end":{"row":586,"column":0},"action":"insert","lines":["",""]},{"start":{"row":586,"column":0},"end":{"row":587,"column":0},"action":"insert","lines":["",""]},{"start":{"row":587,"column":0},"end":{"row":588,"column":0},"action":"insert","lines":["",""]},{"start":{"row":583,"column":24},"end":{"row":583,"column":49},"action":"remove","lines":["ATTACHABLE ENTITY PROFILE"]},{"start":{"row":583,"column":24},"end":{"row":583,"column":25},"action":"insert","lines":["P"]},{"start":{"row":583,"column":25},"end":{"row":583,"column":26},"action":"insert","lines":["H"]},{"start":{"row":583,"column":26},"end":{"row":583,"column":27},"action":"insert","lines":["Y"]},{"start":{"row":583,"column":27},"end":{"row":583,"column":28},"action":"insert","lines":["S"]},{"start":{"row":583,"column":28},"end":{"row":583,"column":29},"action":"insert","lines":["I"]},{"start":{"row":583,"column":29},"end":{"row":583,"column":30},"action":"insert","lines":["C"]},{"start":{"row":583,"column":30},"end":{"row":583,"column":31},"action":"insert","lines":["A"]},{"start":{"row":583,"column":31},"end":{"row":583,"column":32},"action":"insert","lines":["L"]},{"start":{"row":583,"column":32},"end":{"row":583,"column":33},"action":"insert","lines":[" "]},{"start":{"row":583,"column":33},"end":{"row":583,"column":34},"action":"insert","lines":["D"]},{"start":{"row":583,"column":34},"end":{"row":583,"column":35},"action":"insert","lines":["O"]},{"start":{"row":583,"column":35},"end":{"row":583,"column":36},"action":"insert","lines":["M"]},{"start":{"row":583,"column":36},"end":{"row":583,"column":37},"action":"insert","lines":["A"]},{"start":{"row":583,"column":37},"end":{"row":583,"column":38},"action":"insert","lines":["I"]},{"start":{"row":583,"column":38},"end":{"row":583,"column":39},"action":"insert","lines":["N"]},{"start":{"row":583,"column":43},"end":{"row":583,"column":44},"action":"insert","lines":[" "]},{"start":{"row":583,"column":44},"end":{"row":583,"column":45},"action":"insert","lines":[" "]},{"start":{"row":583,"column":45},"end":{"row":583,"column":46},"action":"insert","lines":[" "]},{"start":{"row":583,"column":46},"end":{"row":583,"column":47},"action":"insert","lines":[" "]},{"start":{"row":583,"column":47},"end":{"row":583,"column":48},"action":"insert","lines":[" "]},{"start":{"row":583,"column":48},"end":{"row":583,"column":49},"action":"insert","lines":[" "]},{"start":{"row":583,"column":49},"end":{"row":583,"column":50},"action":"insert","lines":[" "]},{"start":{"row":583,"column":50},"end":{"row":583,"column":51},"action":"insert","lines":[" "]},{"start":{"row":583,"column":51},"end":{"row":583,"column":52},"action":"insert","lines":[" "]},{"start":{"row":583,"column":52},"end":{"row":583,"column":53},"action":"insert","lines":[" "]},{"start":{"row":586,"column":0},"end":{"row":594,"column":62},"action":"insert","lines":["def physical_domain_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_physical_domain.csv\")","    headers = [","        \"APIC\",\"annotation\", \"childAction\", \"configIssues\", \"dn\", ","        \"extMngdBy\", \"lcOwn\", \"modTs\", \"monPolDn\", \"name\", \"nameAlias\", ","        \"ownerKey\", \"ownerTag\", \"status\", \"uid\", \"userdom\"","    ]","    # [ ... same logic as your access_policy_aaep_file() ... ]"]},{"start":{"row":439,"column":0},"end":{"row":439,"column":42},"action":"remove","lines":["    # Ensure the /data subdirectory exists"]},{"start":{"row":438,"column":4},"end":{"row":439,"column":0},"action":"remove","lines":["",""]},{"start":{"row":593,"column":0},"end":{"row":593,"column":62},"action":"remove","lines":["    # [ ... same logic as your access_policy_aaep_file() ... ]"]},{"start":{"row":593,"column":0},"end":{"row":613,"column":80},"action":"insert","lines":["    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","         ","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")"]},{"start":{"row":592,"column":5},"end":{"row":593,"column":0},"action":"insert","lines":["",""]},{"start":{"row":593,"column":0},"end":{"row":593,"column":4},"action":"insert","lines":["    "]},{"start":{"row":615,"column":0},"end":{"row":616,"column":0},"action":"insert","lines":["",""]},{"start":{"row":616,"column":0},"end":{"row":620,"column":0},"action":"insert","lines":["def get_physical_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni.json?query-target=subtree&target-subtree-class=physDomP\"","    # [ ... same logic as your get_access_policy_aaep() ... ]","    # But adjust the data extraction to: attributes = entry[\"physDomP\"][\"attributes\"]",""]},{"start":{"row":616,"column":0},"end":{"row":619,"column":85},"action":"remove","lines":["def get_physical_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni.json?query-target=subtree&target-subtree-class=physDomP\"","    # [ ... same logic as your get_access_policy_aaep() ... ]","    # But adjust the data extraction to: attributes = entry[\"physDomP\"][\"attributes\"]"]},{"start":{"row":616,"column":0},"end":{"row":670,"column":0},"action":"insert","lines":["def get_physical_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni.json?query-target=subtree&target-subtree-class=physDomP\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    filename = os.path.join(\"data\", \"py_physical_domain.csv\")","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            attributes = entry[\"physDomP\"][\"attributes\"]","            row_as_list = [","                os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"configIssues\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"ownerKey\"),","                attributes.get(\"ownerTag\"),","                attributes.get(\"status\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve physical domains. Status code: {response.status_code}\")",""]},{"start":{"row":670,"column":0},"end":{"row":671,"column":0},"action":"insert","lines":["",""]},{"start":{"row":671,"column":0},"end":{"row":686,"column":3},"action":"insert","lines":["def tf_ciscodevnet_aci_physical_domain():","    csv_filepath = os.path.join(\"data\", \"py_physical_domain.csv\")","    ","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_physical_domain\" \"{{name}}\" {","    name        = \"{{name}}\"","    ","    lifecycle {","        ignore_changes = all","    }","}","\"\"\""]},{"start":{"row":686,"column":3},"end":{"row":687,"column":0},"action":"insert","lines":["",""]},{"start":{"row":687,"column":0},"end":{"row":688,"column":0},"action":"insert","lines":["",""]},{"start":{"row":688,"column":0},"end":{"row":706,"column":107},"action":"insert","lines":["","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_attachable_access_entity_profile, appended to import.tf successfully!\")"]},{"start":{"row":687,"column":0},"end":{"row":688,"column":0},"action":"remove","lines":["",""]},{"start":{"row":705,"column":32},"end":{"row":705,"column":68},"action":"remove","lines":["aci_attachable_access_entity_profile"]},{"start":{"row":705,"column":32},"end":{"row":705,"column":51},"action":"insert","lines":["aci_physical_domain"]},{"start":{"row":707,"column":0},"end":{"row":714,"column":4},"action":"insert","lines":["def tf_ciscodevnet_aci_physical_domain_commands():","    with open(os.path.join('data', 'py_physical_domain.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_physical_domain.{{name}} {{dn}}","\"\"\")"]},{"start":{"row":714,"column":4},"end":{"row":715,"column":0},"action":"insert","lines":["",""]},{"start":{"row":715,"column":0},"end":{"row":732,"column":115},"action":"insert","lines":["","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            name=entry['name']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_attachable_access_entity_profile appended to import_commands.txt successfully!\")"]},{"start":{"row":732,"column":115},"end":{"row":733,"column":0},"action":"insert","lines":["",""]},{"start":{"row":733,"column":0},"end":{"row":733,"column":4},"action":"insert","lines":["    "]},{"start":{"row":732,"column":31},"end":{"row":732,"column":67},"action":"remove","lines":["aci_attachable_access_entity_profile"]},{"start":{"row":732,"column":31},"end":{"row":732,"column":50},"action":"insert","lines":["aci_physical_domain"]},{"start":{"row":744,"column":25},"end":{"row":745,"column":0},"action":"insert","lines":["",""]},{"start":{"row":745,"column":0},"end":{"row":745,"column":22},"action":"insert","lines":["physical_domain_file()"]},{"start":{"row":753,"column":29},"end":{"row":754,"column":0},"action":"insert","lines":["",""]},{"start":{"row":754,"column":0},"end":{"row":754,"column":27},"action":"insert","lines":[" get_physical_domain(token)"]},{"start":{"row":754,"column":0},"end":{"row":754,"column":1},"action":"remove","lines":[" "]},{"start":{"row":762,"column":48},"end":{"row":763,"column":0},"action":"insert","lines":["",""]},{"start":{"row":763,"column":0},"end":{"row":763,"column":36},"action":"insert","lines":["tf_ciscodevnet_aci_physical_domain()"]},{"start":{"row":763,"column":36},"end":{"row":764,"column":0},"action":"insert","lines":["",""]},{"start":{"row":764,"column":0},"end":{"row":764,"column":45},"action":"insert","lines":["tf_ciscodevnet_aci_physical_domain_commands()"]},{"start":{"row":724,"column":30},"end":{"row":724,"column":31},"action":"insert","lines":[","]},{"start":{"row":724,"column":31},"end":{"row":725,"column":0},"action":"insert","lines":["",""]},{"start":{"row":725,"column":0},"end":{"row":725,"column":12},"action":"insert","lines":["            "]},{"start":{"row":725,"column":12},"end":{"row":725,"column":13},"action":"insert","lines":["d"]},{"start":{"row":725,"column":13},"end":{"row":725,"column":14},"action":"insert","lines":["n"]},{"start":{"row":725,"column":14},"end":{"row":725,"column":15},"action":"insert","lines":["="]},{"start":{"row":725,"column":15},"end":{"row":725,"column":16},"action":"insert","lines":["e"]},{"start":{"row":725,"column":16},"end":{"row":725,"column":17},"action":"insert","lines":["n"]},{"start":{"row":725,"column":17},"end":{"row":725,"column":18},"action":"insert","lines":["t"]},{"start":{"row":725,"column":18},"end":{"row":725,"column":19},"action":"insert","lines":["r"]},{"start":{"row":725,"column":19},"end":{"row":725,"column":20},"action":"insert","lines":["y"]}],[{"start":{"row":725,"column":20},"end":{"row":725,"column":22},"action":"insert","lines":["[]"],"id":177}],[{"start":{"row":725,"column":21},"end":{"row":725,"column":23},"action":"insert","lines":["''"],"id":178},{"start":{"row":725,"column":22},"end":{"row":725,"column":23},"action":"insert","lines":["d"]},{"start":{"row":725,"column":23},"end":{"row":725,"column":24},"action":"insert","lines":["n"]},{"start":{"row":733,"column":98},"end":{"row":734,"column":0},"action":"insert","lines":["",""]},{"start":{"row":734,"column":0},"end":{"row":734,"column":4},"action":"insert","lines":["    "]},{"start":{"row":734,"column":4},"end":{"row":735,"column":0},"action":"insert","lines":["",""]},{"start":{"row":735,"column":0},"end":{"row":735,"column":4},"action":"insert","lines":["    "]},{"start":{"row":735,"column":0},"end":{"row":735,"column":4},"action":"remove","lines":["    "]},{"start":{"row":735,"column":0},"end":{"row":737,"column":56},"action":"insert","lines":["########################################################","### ACI ACCESS POLICIES PHYSICAL DOMAIN              ###","########################################################"]},{"start":{"row":737,"column":56},"end":{"row":738,"column":0},"action":"insert","lines":["",""]},{"start":{"row":736,"column":24},"end":{"row":736,"column":25},"action":"insert","lines":["A"]},{"start":{"row":736,"column":25},"end":{"row":736,"column":26},"action":"insert","lines":["A"]},{"start":{"row":736,"column":26},"end":{"row":736,"column":27},"action":"insert","lines":["E"]},{"start":{"row":736,"column":27},"end":{"row":736,"column":28},"action":"insert","lines":["P"]},{"start":{"row":736,"column":28},"end":{"row":736,"column":29},"action":"insert","lines":[" "]},{"start":{"row":736,"column":29},"end":{"row":736,"column":30},"action":"insert","lines":["t"]},{"start":{"row":736,"column":30},"end":{"row":736,"column":31},"action":"insert","lines":["o"]},{"start":{"row":736,"column":31},"end":{"row":736,"column":32},"action":"insert","lines":[" "]},{"start":{"row":736,"column":60},"end":{"row":736,"column":61},"action":"remove","lines":[" "]},{"start":{"row":736,"column":56},"end":{"row":736,"column":60},"action":"remove","lines":["    "]},{"start":{"row":736,"column":52},"end":{"row":736,"column":56},"action":"remove","lines":["    "]},{"start":{"row":736,"column":52},"end":{"row":736,"column":53},"action":"insert","lines":[" "]},{"start":{"row":738,"column":0},"end":{"row":739,"column":0},"action":"insert","lines":["",""]},{"start":{"row":739,"column":0},"end":{"row":755,"column":0},"action":"insert","lines":["def aaep_to_domain_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_aaep_to_domain.csv\")","    headers = [","        \"APIC\",\"infraAttEntityP_name\", \"infraAttEntityP_dn\", ","        \"infraRsDomP_name\", \"infraRsDomP_rn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")",""]},{"start":{"row":755,"column":0},"end":{"row":756,"column":0},"action":"insert","lines":["",""]},{"start":{"row":756,"column":0},"end":{"row":794,"column":0},"action":"insert","lines":["def get_aaep_to_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP\"","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_domain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAttEntityP_name = entry[\"infraAttEntityP\"][\"attributes\"][\"name\"]","            infraAttEntityP_dn = entry[\"infraAttEntityP\"][\"attributes\"][\"dn\"]","            for child in entry[\"infraAttEntityP\"].get(\"children\", []):","                if \"infraRsDomP\" in child:","                    infraRsDomP_name = child[\"infraRsDomP\"][\"attributes\"][\"tDn\"].split(\"/\")[-1]","                    infraRsDomP_rn = child[\"infraRsDomP\"][\"attributes\"][\"rn\"]","                    row_as_list = [","                        os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                        infraAttEntityP_name,","                        infraAttEntityP_dn,","                        infraRsDomP_name,","                        infraRsDomP_rn","                    ]","                    if row_as_list not in existing_entries:","                        existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve AAEP to Domain mappings. Status code: {response.status_code}\")",""]},{"start":{"row":794,"column":0},"end":{"row":795,"column":0},"action":"insert","lines":["",""]},{"start":{"row":795,"column":0},"end":{"row":827,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_domain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_domain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = \"\"\"","resource \"aci_aaep_to_domain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_l3_domain_profile.{{infraRsDomP_name}}.id","}","\"\"\"","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0) ","        existing_content = tf_file.read()","","    template = Template(terraform_template)","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_domain, appended to import.tf successfully!\")",""]},{"start":{"row":827,"column":0},"end":{"row":828,"column":0},"action":"insert","lines":["",""]},{"start":{"row":828,"column":0},"end":{"row":857,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_domain_commands():","    with open(os.path.join('data', 'py_aaep_to_domain.csv'), 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_domain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.readlines()","","    new_commands = \"\"","    ","    for entry in entries:","        terraform_block = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_block not in existing_content:","            new_commands += terraform_block","","    with open('import_commands.txt', 'a') as tf_file:","        tf_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_domain appended to import_commands.txt successfully!\")",""]},{"start":{"row":857,"column":0},"end":{"row":858,"column":0},"action":"insert","lines":["",""]},{"start":{"row":857,"column":0},"end":{"row":858,"column":0},"action":"remove","lines":["",""]},{"start":{"row":856,"column":97},"end":{"row":857,"column":0},"action":"remove","lines":["",""]},{"start":{"row":869,"column":22},"end":{"row":870,"column":0},"action":"insert","lines":["",""]},{"start":{"row":870,"column":0},"end":{"row":870,"column":21},"action":"insert","lines":["aaep_to_domain_file()"]},{"start":{"row":879,"column":26},"end":{"row":880,"column":0},"action":"insert","lines":["",""]},{"start":{"row":880,"column":0},"end":{"row":880,"column":25},"action":"insert","lines":["get_aaep_to_domain(token)"]},{"start":{"row":890,"column":45},"end":{"row":891,"column":0},"action":"insert","lines":["",""]},{"start":{"row":891,"column":0},"end":{"row":891,"column":35},"action":"insert","lines":["tf_ciscodevnet_aci_aaep_to_domain()"]},{"start":{"row":891,"column":35},"end":{"row":892,"column":0},"action":"insert","lines":["",""]},{"start":{"row":892,"column":0},"end":{"row":892,"column":44},"action":"insert","lines":["tf_ciscodevnet_aci_aaep_to_domain_commands()"]},{"start":{"row":804,"column":42},"end":{"row":804,"column":63},"action":"remove","lines":["aci_l3_domain_profile"]},{"start":{"row":804,"column":42},"end":{"row":804,"column":61},"action":"insert","lines":["aci_physical_domain"]},{"start":{"row":741,"column":40},"end":{"row":741,"column":57},"action":"remove","lines":["py_aaep_to_domain"]},{"start":{"row":741,"column":40},"end":{"row":741,"column":61},"action":"insert","lines":["py_aaep_to_physdomain"]},{"start":{"row":763,"column":37},"end":{"row":763,"column":54},"action":"remove","lines":["py_aaep_to_domain"]},{"start":{"row":763,"column":37},"end":{"row":763,"column":58},"action":"insert","lines":["py_aaep_to_physdomain"]},{"start":{"row":796,"column":41},"end":{"row":796,"column":58},"action":"remove","lines":["py_aaep_to_domain"]},{"start":{"row":796,"column":41},"end":{"row":796,"column":62},"action":"insert","lines":["py_aaep_to_physdomain"]},{"start":{"row":829,"column":36},"end":{"row":829,"column":53},"action":"remove","lines":["py_aaep_to_domain"]},{"start":{"row":829,"column":36},"end":{"row":829,"column":57},"action":"insert","lines":["py_aaep_to_physdomain"]},{"start":{"row":756,"column":0},"end":{"row":793,"column":97},"action":"remove","lines":["def get_aaep_to_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP\"","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAttEntityP_name = entry[\"infraAttEntityP\"][\"attributes\"][\"name\"]","            infraAttEntityP_dn = entry[\"infraAttEntityP\"][\"attributes\"][\"dn\"]","            for child in entry[\"infraAttEntityP\"].get(\"children\", []):","                if \"infraRsDomP\" in child:","                    infraRsDomP_name = child[\"infraRsDomP\"][\"attributes\"][\"tDn\"].split(\"/\")[-1]","                    infraRsDomP_rn = child[\"infraRsDomP\"][\"attributes\"][\"rn\"]","                    row_as_list = [","                        os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                        infraAttEntityP_name,","                        infraAttEntityP_dn,","                        infraRsDomP_name,","                        infraRsDomP_rn","                    ]","                    if row_as_list not in existing_entries:","                        existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve AAEP to Domain mappings. Status code: {response.status_code}\")"]},{"start":{"row":756,"column":0},"end":{"row":804,"column":0},"action":"insert","lines":["def get_aaep_to_domain(token):","    # Updated URL","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP&rsp-subtree-filter=eq(infraRsDomP.tCl,'physDomP')\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAttEntityP_name = entry[\"infraAttEntityP\"][\"attributes\"][\"name\"]","            infraAttEntityP_dn = entry[\"infraAttEntityP\"][\"attributes\"][\"dn\"]","            children = entry[\"infraAttEntityP\"].get(\"children\", [])","            ","            # Check if there are any 'infraRsDomP' children, if not, skip this entry","            if not any(\"infraRsDomP\" in child for child in children):","                continue","            ","            for child in children:","                if \"infraRsDomP\" in child:","                    infraRsDomP_name = child[\"infraRsDomP\"][\"attributes\"][\"tDn\"].split(\"/\")[-1]","                    infraRsDomP_rn = child[\"infraRsDomP\"][\"attributes\"][\"rn\"]","                    row_as_list = [","                        os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                        infraAttEntityP_name,","                        infraAttEntityP_dn,","                        infraRsDomP_name,","                        infraRsDomP_rn","                    ]","                    if row_as_list not in existing_entries:","                        existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve AAEP to Domain mappings. Status code: {response.status_code}\")",""]},{"start":{"row":758,"column":202},"end":{"row":758,"column":203},"action":"remove","lines":["'"]},{"start":{"row":758,"column":202},"end":{"row":758,"column":203},"action":"insert","lines":["/"]},{"start":{"row":758,"column":203},"end":{"row":758,"column":204},"action":"insert","lines":["\""]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"remove","lines":["'"]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"insert","lines":["\\"]},{"start":{"row":758,"column":213},"end":{"row":758,"column":215},"action":"insert","lines":["\"\""]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"remove","lines":["\\"]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"insert","lines":["/"]},{"start":{"row":758,"column":214},"end":{"row":758,"column":215},"action":"remove","lines":["\""]},{"start":{"row":758,"column":202},"end":{"row":758,"column":203},"action":"remove","lines":["/"]},{"start":{"row":758,"column":202},"end":{"row":758,"column":203},"action":"insert","lines":["\\"]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"remove","lines":["/"]},{"start":{"row":758,"column":212},"end":{"row":758,"column":213},"action":"insert","lines":["\\"]}],[{"start":{"row":757,"column":0},"end":{"row":757,"column":17},"action":"remove","lines":["    # Updated URL"],"id":180},{"start":{"row":756,"column":30},"end":{"row":757,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":780,"column":0},"end":{"row":780,"column":84},"action":"remove","lines":["            # Check if there are any 'infraRsDomP' children, if not, skip this entry"],"id":181},{"start":{"row":779,"column":12},"end":{"row":780,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":865,"column":97},"end":{"row":866,"column":0},"action":"insert","lines":["",""],"id":182},{"start":{"row":866,"column":0},"end":{"row":866,"column":4},"action":"insert","lines":["    "]},{"start":{"row":866,"column":4},"end":{"row":867,"column":0},"action":"insert","lines":["",""]},{"start":{"row":867,"column":0},"end":{"row":867,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":867,"column":0},"end":{"row":867,"column":4},"action":"remove","lines":["    "],"id":183}],[{"start":{"row":867,"column":0},"end":{"row":870,"column":56},"action":"insert","lines":["    ","########################################################","### ACI ACCESS POLICIES AAEP to PHYSICAL DOMAIN      ###","########################################################"],"id":184}],[{"start":{"row":870,"column":56},"end":{"row":871,"column":0},"action":"insert","lines":["",""],"id":185},{"start":{"row":871,"column":0},"end":{"row":872,"column":0},"action":"insert","lines":["",""]},{"start":{"row":872,"column":0},"end":{"row":873,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":869,"column":24},"end":{"row":869,"column":47},"action":"remove","lines":["AAEP to PHYSICAL DOMAIN"],"id":186},{"start":{"row":869,"column":24},"end":{"row":869,"column":25},"action":"insert","lines":["V"]},{"start":{"row":869,"column":25},"end":{"row":869,"column":26},"action":"insert","lines":["L"]},{"start":{"row":869,"column":26},"end":{"row":869,"column":27},"action":"insert","lines":["A"]},{"start":{"row":869,"column":27},"end":{"row":869,"column":28},"action":"insert","lines":["N"]}],[{"start":{"row":869,"column":28},"end":{"row":869,"column":29},"action":"insert","lines":[" "],"id":187},{"start":{"row":869,"column":29},"end":{"row":869,"column":30},"action":"insert","lines":["R"]},{"start":{"row":869,"column":30},"end":{"row":869,"column":31},"action":"insert","lines":["O"]},{"start":{"row":869,"column":31},"end":{"row":869,"column":32},"action":"insert","lines":["O"]},{"start":{"row":869,"column":32},"end":{"row":869,"column":33},"action":"insert","lines":["L"]}],[{"start":{"row":869,"column":33},"end":{"row":869,"column":34},"action":"insert","lines":[" "],"id":188},{"start":{"row":869,"column":34},"end":{"row":869,"column":35},"action":"insert","lines":["&"]}],[{"start":{"row":869,"column":35},"end":{"row":869,"column":36},"action":"insert","lines":[" "],"id":189},{"start":{"row":869,"column":36},"end":{"row":869,"column":37},"action":"insert","lines":["R"]},{"start":{"row":869,"column":37},"end":{"row":869,"column":38},"action":"insert","lines":["A"]},{"start":{"row":869,"column":38},"end":{"row":869,"column":39},"action":"insert","lines":["N"]},{"start":{"row":869,"column":39},"end":{"row":869,"column":40},"action":"insert","lines":["G"]},{"start":{"row":869,"column":40},"end":{"row":869,"column":41},"action":"insert","lines":["E"]},{"start":{"row":869,"column":41},"end":{"row":869,"column":42},"action":"insert","lines":["S"]}],[{"start":{"row":869,"column":42},"end":{"row":869,"column":43},"action":"insert","lines":[" "],"id":190},{"start":{"row":869,"column":43},"end":{"row":869,"column":44},"action":"insert","lines":[" "]},{"start":{"row":869,"column":44},"end":{"row":869,"column":45},"action":"insert","lines":[" "]},{"start":{"row":869,"column":45},"end":{"row":869,"column":46},"action":"insert","lines":[" "]},{"start":{"row":869,"column":46},"end":{"row":869,"column":47},"action":"insert","lines":[" "]}],[{"start":{"row":872,"column":0},"end":{"row":934,"column":0},"action":"insert","lines":["def vlan_pool_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_vlan_pool.csv\")","    headers = [","        \"APIC\", \"fvnsVlanInstP_name\", \"fvnsVlanInstP_dn\", ","        \"fvnsEncapBlk_from\", \"fvnsEncapBlk_to\", \"fvnsEncapBlk_rn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","","def get_vlan_pools(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=fvnsVlanInstP&rsp-subtree-class=fvnsEncapBlk&query-target=subtree&rsp-subtree=full\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_vlan_pool.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            vlan_pool_name = entry[\"fvnsVlanInstP\"][\"attributes\"][\"name\"]","            vlan_pool_dn = entry[\"fvnsVlanInstP\"][\"attributes\"][\"dn\"]","            children = entry[\"fvnsVlanInstP\"].get(\"children\", [])","            ","            for child in children:","                if \"fvnsEncapBlk\" in child:","                    encap_from = child[\"fvnsEncapBlk\"][\"attributes\"][\"from\"]","                    encap_to = child[\"fvnsEncapBlk\"][\"attributes\"][\"to\"]","                    encap_rn = child[\"fvnsEncapBlk\"][\"attributes\"][\"rn\"]","                    row_as_list = [","                        os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                        vlan_pool_name,","                        vlan_pool_dn,","                        encap_from,","                        encap_to,","                        encap_rn","                    ]","                    if row_as_list not in existing_entries:","                        existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve VLAN Pool mappings. Status code: {response.status_code}\")",""],"id":191}],[{"start":{"row":934,"column":0},"end":{"row":935,"column":0},"action":"insert","lines":["",""],"id":192}],[{"start":{"row":935,"column":0},"end":{"row":988,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_vlan_pool():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    # Separate templates for vlan_pool and ranges.","    vlan_pool_template = Template(\"\"\"","resource \"aci_vlan_pool\" \"{{fvnsVlanInstP_name}}\" {","    name       = \"{{fvnsVlanInstP_name}}\"","    alloc_mode = \"dynamic\"","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    range_template = Template(\"\"\"","resource \"aci_ranges\" \"{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}}\" {","    vlan_pool_dn = aci_vlan_pool.{{fvnsVlanInstP_name}}.id","    from         = \"{{fvnsEncapBlk_from}}\"","    to           = \"{{fvnsEncapBlk_to}}\"","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    added_vlan_pools = set()  # Use a set to track VLAN pools that are already added.","","    for entry in entries:","        if entry['fvnsVlanInstP_name'] not in added_vlan_pools:","            new_terraform_content += vlan_pool_template.render(","                fvnsVlanInstP_name=entry['fvnsVlanInstP_name']","            )","            added_vlan_pools.add(entry['fvnsVlanInstP_name'])","","        # Append the range block every time, because each entry corresponds to a unique range.","        new_terraform_content += range_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to']","        )","","    with open('import.tf', 'a') as tf_file:","        tf_file.write(new_terraform_content)","","    print(\"Terraform resources for VLAN pools and ranges appended to import.tf successfully!\")",""],"id":193}],[{"start":{"row":988,"column":0},"end":{"row":989,"column":0},"action":"insert","lines":["",""],"id":194}],[{"start":{"row":989,"column":0},"end":{"row":1032,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_vlan_pool_commands():","    csv_filepath = os.path.join(\"data\", \"py_vlan_pool.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    vlan_pool_command_template = Template(\"\"\"","terraform import aci_vlan_pool.{{fvnsVlanInstP_name}} {{fvnsVlanInstP_dn}}","\"\"\")","","    range_command_template = Template(\"\"\"","terraform import aci_ranges.{{fvnsVlanInstP_name}}-{{fvnsEncapBlk_from}}-{{fvnsEncapBlk_to}} {{fvnsVlanInstP_dn}}/{{fvnsEncapBlk_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","    added_vlan_pools = set()  # Use a set to track VLAN pools that already have import commands.","","    for entry in entries:","        # Add the VLAN pool import command if it hasn't been added yet.","        if entry['fvnsVlanInstP_name'] not in added_vlan_pools:","            new_commands += vlan_pool_command_template.render(","                fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","                fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn']","            )","            added_vlan_pools.add(entry['fvnsVlanInstP_name'])","","        # Add the range import command for each entry.","        new_commands += range_command_template.render(","            fvnsVlanInstP_name=entry['fvnsVlanInstP_name'],","            fvnsEncapBlk_from=entry['fvnsEncapBlk_from'],","            fvnsEncapBlk_to=entry['fvnsEncapBlk_to'],","            fvnsVlanInstP_dn=entry['fvnsVlanInstP_dn'],","            fvnsEncapBlk_rn=entry['fvnsEncapBlk_rn']","        )","","    with open('import_commands.txt', 'a') as cmd_file:","        cmd_file.write(new_commands)","","    print(\"Import commands for VLAN pools and ranges appended to import_commands.txt successfully!\")",""],"id":195}],[{"start":{"row":1032,"column":0},"end":{"row":1033,"column":0},"action":"remove","lines":["",""],"id":196}],[{"start":{"row":1068,"column":44},"end":{"row":1069,"column":0},"action":"insert","lines":["",""],"id":197}],[{"start":{"row":1069,"column":0},"end":{"row":1069,"column":39},"action":"insert","lines":["tf_ciscodevnet_aci_vlan_pool_commands()"],"id":198}],[{"start":{"row":1068,"column":44},"end":{"row":1069,"column":0},"action":"insert","lines":["",""],"id":199}],[{"start":{"row":1069,"column":0},"end":{"row":1069,"column":30},"action":"insert","lines":["tf_ciscodevnet_aci_vlan_pool()"],"id":200}],[{"start":{"row":1056,"column":25},"end":{"row":1057,"column":0},"action":"insert","lines":["",""],"id":201}],[{"start":{"row":1057,"column":0},"end":{"row":1057,"column":21},"action":"insert","lines":["get_vlan_pools(token)"],"id":202}],[{"start":{"row":1046,"column":21},"end":{"row":1047,"column":0},"action":"insert","lines":["",""],"id":203}],[{"start":{"row":1047,"column":0},"end":{"row":1047,"column":16},"action":"insert","lines":["vlan_pool_file()"],"id":204}],[{"start":{"row":1019,"column":0},"end":{"row":1019,"column":54},"action":"remove","lines":["        # Add the range import command for each entry."],"id":205},{"start":{"row":1018,"column":0},"end":{"row":1019,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1011,"column":0},"end":{"row":1011,"column":71},"action":"remove","lines":["        # Add the VLAN pool import command if it hasn't been added yet."],"id":206},{"start":{"row":1010,"column":25},"end":{"row":1011,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1008,"column":29},"end":{"row":1008,"column":96},"action":"remove","lines":[" # Use a set to track VLAN pools that already have import commands."],"id":207},{"start":{"row":1008,"column":28},"end":{"row":1008,"column":29},"action":"remove","lines":[" "]}],[{"start":{"row":977,"column":0},"end":{"row":977,"column":94},"action":"remove","lines":["        # Append the range block every time, because each entry corresponds to a unique range."],"id":208},{"start":{"row":976,"column":0},"end":{"row":977,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":968,"column":28},"end":{"row":968,"column":85},"action":"remove","lines":["  # Use a set to track VLAN pools that are already added."],"id":209}],[{"start":{"row":941,"column":0},"end":{"row":941,"column":50},"action":"remove","lines":["    # Separate templates for vlan_pool and ranges."],"id":210},{"start":{"row":940,"column":0},"end":{"row":941,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":14051,"scrollleft":0,"selection":{"start":{"row":1024,"column":47},"end":{"row":1024,"column":47},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":37,"state":"start","mode":"ace/mode/python"}},"timestamp":1698331246718,"hash":"aa6cccac13d4910d7755a31ca8eabebb02916d71"}