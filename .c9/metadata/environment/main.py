{"filter":false,"title":"main.py","tooltip":"/main.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":1819,"column":19},"end":{"row":1819,"column":20},"action":"insert","lines":["_"],"id":365},{"start":{"row":1819,"column":20},"end":{"row":1819,"column":21},"action":"insert","lines":["n"]},{"start":{"row":1819,"column":21},"end":{"row":1819,"column":22},"action":"insert","lines":["a"]},{"start":{"row":1819,"column":22},"end":{"row":1819,"column":23},"action":"insert","lines":["m"]},{"start":{"row":1819,"column":23},"end":{"row":1819,"column":24},"action":"insert","lines":["e"]}],[{"start":{"row":1819,"column":25},"end":{"row":1819,"column":26},"action":"insert","lines":[","],"id":366}],[{"start":{"row":1819,"column":26},"end":{"row":1819,"column":27},"action":"insert","lines":[" "],"id":367}],[{"start":{"row":1819,"column":26},"end":{"row":1819,"column":27},"action":"insert","lines":[" "],"id":368}],[{"start":{"row":1819,"column":26},"end":{"row":1819,"column":27},"action":"remove","lines":[" "],"id":369}],[{"start":{"row":1819,"column":26},"end":{"row":1819,"column":27},"action":"insert","lines":[" "],"id":370}],[{"start":{"row":1819,"column":27},"end":{"row":1819,"column":44},"action":"insert","lines":["\"infraLeafS_name\""],"id":371}],[{"start":{"row":1819,"column":44},"end":{"row":1819,"column":45},"action":"insert","lines":[","],"id":372}],[{"start":{"row":1819,"column":45},"end":{"row":1819,"column":46},"action":"insert","lines":[" "],"id":373}],[{"start":{"row":1819,"column":47},"end":{"row":1819,"column":49},"action":"insert","lines":["\"\""],"id":374}],[{"start":{"row":1819,"column":48},"end":{"row":1819,"column":60},"action":"insert","lines":["infraNodeBlk"],"id":375}],[{"start":{"row":1819,"column":60},"end":{"row":1819,"column":61},"action":"insert","lines":["."],"id":376},{"start":{"row":1819,"column":61},"end":{"row":1819,"column":62},"action":"insert","lines":["f"]},{"start":{"row":1819,"column":62},"end":{"row":1819,"column":63},"action":"insert","lines":["r"]},{"start":{"row":1819,"column":63},"end":{"row":1819,"column":64},"action":"insert","lines":["o"]},{"start":{"row":1819,"column":64},"end":{"row":1819,"column":65},"action":"insert","lines":["m"]}],[{"start":{"row":1819,"column":60},"end":{"row":1819,"column":61},"action":"remove","lines":["."],"id":377}],[{"start":{"row":1819,"column":60},"end":{"row":1819,"column":61},"action":"insert","lines":["_"],"id":378}],[{"start":{"row":1819,"column":47},"end":{"row":1820,"column":0},"action":"insert","lines":["",""],"id":379},{"start":{"row":1820,"column":0},"end":{"row":1820,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":1820,"column":27},"end":{"row":1820,"column":28},"action":"insert","lines":[","],"id":380}],[{"start":{"row":1820,"column":28},"end":{"row":1820,"column":29},"action":"insert","lines":[" "],"id":381}],[{"start":{"row":1820,"column":29},"end":{"row":1820,"column":41},"action":"insert","lines":["infraNodeBlk"],"id":382}],[{"start":{"row":1820,"column":40},"end":{"row":1820,"column":41},"action":"remove","lines":["k"],"id":383},{"start":{"row":1820,"column":39},"end":{"row":1820,"column":40},"action":"remove","lines":["l"]},{"start":{"row":1820,"column":38},"end":{"row":1820,"column":39},"action":"remove","lines":["B"]},{"start":{"row":1820,"column":37},"end":{"row":1820,"column":38},"action":"remove","lines":["e"]},{"start":{"row":1820,"column":36},"end":{"row":1820,"column":37},"action":"remove","lines":["d"]},{"start":{"row":1820,"column":35},"end":{"row":1820,"column":36},"action":"remove","lines":["o"]},{"start":{"row":1820,"column":34},"end":{"row":1820,"column":35},"action":"remove","lines":["N"]},{"start":{"row":1820,"column":33},"end":{"row":1820,"column":34},"action":"remove","lines":["a"]},{"start":{"row":1820,"column":32},"end":{"row":1820,"column":33},"action":"remove","lines":["r"]},{"start":{"row":1820,"column":31},"end":{"row":1820,"column":32},"action":"remove","lines":["f"]},{"start":{"row":1820,"column":30},"end":{"row":1820,"column":31},"action":"remove","lines":["n"]},{"start":{"row":1820,"column":29},"end":{"row":1820,"column":30},"action":"remove","lines":["i"]}],[{"start":{"row":1820,"column":29},"end":{"row":1820,"column":31},"action":"insert","lines":["\"\""],"id":384}],[{"start":{"row":1820,"column":30},"end":{"row":1820,"column":42},"action":"insert","lines":["infraNodeBlk"],"id":385}],[{"start":{"row":1820,"column":42},"end":{"row":1820,"column":43},"action":"insert","lines":["_"],"id":386},{"start":{"row":1820,"column":43},"end":{"row":1820,"column":44},"action":"insert","lines":["t"]},{"start":{"row":1820,"column":44},"end":{"row":1820,"column":45},"action":"insert","lines":["o"]}],[{"start":{"row":1830,"column":78},"end":{"row":1831,"column":0},"action":"insert","lines":["",""],"id":387},{"start":{"row":1831,"column":0},"end":{"row":1831,"column":12},"action":"insert","lines":["            "]},{"start":{"row":1831,"column":12},"end":{"row":1832,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1832,"column":0},"end":{"row":1832,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":1832,"column":8},"end":{"row":1832,"column":12},"action":"remove","lines":["    "],"id":388},{"start":{"row":1832,"column":4},"end":{"row":1832,"column":8},"action":"remove","lines":["    "]},{"start":{"row":1832,"column":0},"end":{"row":1832,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1832,"column":0},"end":{"row":1870,"column":64},"action":"insert","lines":["def process_fabric_switch_interface_profiles(data, filename):","    existing_entries = []","","    with open(filename, 'a+', newline='') as file:","        writer = csv.writer(file)","        file.seek(0)","        reader = csv.reader(file)","        existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            if \"infraNodeP\" in entry:","                nodeP = entry[\"infraNodeP\"]","                infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                infraNodeP_name = nodeP[\"attributes\"][\"name\"]","","                for child in nodeP.get(\"children\", []):","                    if \"infraRsAccPortP\" in child:","                        rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                        infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1]","                        infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","","                    if \"infraLeafS\" in child:","                        leafS = child[\"infraLeafS\"]","                        infraLeafS_name = leafS[\"attributes\"][\"name\"]","                        for leaf_child in leafS.get(\"children\", []):","                            if \"infraNodeBlk\" in leaf_child:","                                nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                infraNodeBlk_from = nodeBlk[\"from_\"]","                                infraNodeBlk_to = nodeBlk[\"to_\"]","","                                row_as_list = [","                                    \"{{APIC}}\", infraNodeP_dn, infraNodeP_name, ","                                    infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                    infraLeafS_name, infraLeafS_name,  ","                                    infraNodeBlk_from, infraNodeBlk_to","                                ]","","                                if row_as_list not in existing_entries:","                                    writer.writerow(row_as_list)"],"id":389}],[{"start":{"row":1832,"column":4},"end":{"row":1832,"column":12},"action":"remove","lines":["process_"],"id":390},{"start":{"row":1832,"column":4},"end":{"row":1832,"column":8},"action":"insert","lines":["get_"]}],[{"start":{"row":1870,"column":64},"end":{"row":1871,"column":0},"action":"insert","lines":["",""],"id":391},{"start":{"row":1871,"column":0},"end":{"row":1871,"column":36},"action":"insert","lines":["                                    "]},{"start":{"row":1871,"column":36},"end":{"row":1872,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1872,"column":0},"end":{"row":1872,"column":36},"action":"insert","lines":["                                    "]},{"start":{"row":1872,"column":36},"end":{"row":1873,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1873,"column":0},"end":{"row":1873,"column":36},"action":"insert","lines":["                                    "]}],[{"start":{"row":1872,"column":0},"end":{"row":1923,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_profile\" \"{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('fabric_switch_profiles.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        specific_resource_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        if specific_resource_leaf not in existing_content or specific_resource_interface not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource_leaf} or {specific_resource_interface} already exists in fabric_switch_profiles.tf\")","","    if new_terraform_content:","        with open('fabric_switch_profiles.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to fabric_switch_profiles.tf successfully!\")",""],"id":392}],[{"start":{"row":1889,"column":5},"end":{"row":1890,"column":0},"action":"insert","lines":["",""],"id":393},{"start":{"row":1890,"column":0},"end":{"row":1890,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1890,"column":4},"end":{"row":1890,"column":33},"action":"insert","lines":["relation_infra_rs_acc_port_p "],"id":394}],[{"start":{"row":1890,"column":33},"end":{"row":1890,"column":34},"action":"insert","lines":["="],"id":395}],[{"start":{"row":1890,"column":34},"end":{"row":1890,"column":35},"action":"insert","lines":[" "],"id":396}],[{"start":{"row":1890,"column":35},"end":{"row":1890,"column":61},"action":"insert","lines":["aci_leaf_interface_profile"],"id":397}],[{"start":{"row":1890,"column":61},"end":{"row":1890,"column":62},"action":"insert","lines":["."],"id":398}],[{"start":{"row":1890,"column":62},"end":{"row":1890,"column":88},"action":"insert","lines":["{{ infraRsAccPortP_name }}"],"id":399}],[{"start":{"row":1890,"column":88},"end":{"row":1890,"column":89},"action":"insert","lines":["."],"id":400},{"start":{"row":1890,"column":89},"end":{"row":1890,"column":90},"action":"insert","lines":["i"]},{"start":{"row":1890,"column":90},"end":{"row":1890,"column":91},"action":"insert","lines":["d"]}],[{"start":{"row":1895,"column":0},"end":{"row":1901,"column":1},"action":"remove","lines":["","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}"],"id":401}],[{"start":{"row":1878,"column":37},"end":{"row":1879,"column":0},"action":"insert","lines":["",""],"id":402},{"start":{"row":1879,"column":0},"end":{"row":1879,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1879,"column":0},"end":{"row":1885,"column":1},"action":"insert","lines":["","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}"],"id":403}],[{"start":{"row":1885,"column":1},"end":{"row":1885,"column":5},"action":"remove","lines":["    "],"id":404},{"start":{"row":1885,"column":1},"end":{"row":1886,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":1927,"column":0},"end":{"row":1927,"column":1},"action":"remove","lines":[" "],"id":405}],[{"start":{"row":1927,"column":0},"end":{"row":1957,"column":125},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{ infraRsAccPortP_name }} {{ infraRsAccPortP_tDn }}","terraform import aci_leaf_profile.{{ infraNodeP_name }} {{ infraNodeP_dn }}","\"\"\")","","    with open('fabric_switch_import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        specific_command_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        if specific_command_interface not in existing_content or specific_command_leaf not in existing_content:","            terraform_command = command_template.render(entry)","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_interface} or {specific_command_leaf} already exists in fabric_switch_import_commands.txt\")","","    if new_commands:","        with open('fabric_switch_import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for fabric switch interface profiles appended to fabric_switch_import_commands.txt successfully!\")"],"id":406}],[{"start":{"row":1977,"column":16},"end":{"row":1978,"column":0},"action":"insert","lines":["",""],"id":407}],[{"start":{"row":1978,"column":0},"end":{"row":1978,"column":34},"action":"insert","lines":["fabric_switch_interface_profiles()"],"id":408}],[{"start":{"row":1993,"column":30},"end":{"row":1994,"column":0},"action":"insert","lines":["",""],"id":409}],[{"start":{"row":1994,"column":0},"end":{"row":1994,"column":52},"action":"insert","lines":["get_fabric_switch_interface_profiles(data, filename)"],"id":410}],[{"start":{"row":1832,"column":57},"end":{"row":1833,"column":0},"action":"insert","lines":["",""],"id":411},{"start":{"row":1833,"column":0},"end":{"row":1833,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1833,"column":4},"end":{"row":1834,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1834,"column":0},"end":{"row":1834,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1834,"column":0},"end":{"row":1848,"column":53},"action":"insert","lines":["    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP&rsp-subtree-filter=eq(infraRsDomP.tCl,\\\"l3extDomP\\\")\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:"],"id":412}],[{"start":{"row":1851,"column":0},"end":{"row":1851,"column":4},"action":"insert","lines":["    "],"id":413},{"start":{"row":1852,"column":0},"end":{"row":1852,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1853,"column":0},"end":{"row":1853,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1854,"column":0},"end":{"row":1854,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1855,"column":0},"end":{"row":1855,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1856,"column":0},"end":{"row":1856,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1857,"column":0},"end":{"row":1857,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1858,"column":0},"end":{"row":1858,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1859,"column":0},"end":{"row":1859,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1860,"column":0},"end":{"row":1860,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1861,"column":0},"end":{"row":1861,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1862,"column":0},"end":{"row":1862,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1863,"column":0},"end":{"row":1863,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1864,"column":0},"end":{"row":1864,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1865,"column":0},"end":{"row":1865,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1866,"column":0},"end":{"row":1866,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1867,"column":0},"end":{"row":1867,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1868,"column":0},"end":{"row":1868,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1869,"column":0},"end":{"row":1869,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1870,"column":0},"end":{"row":1870,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1871,"column":0},"end":{"row":1871,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1872,"column":0},"end":{"row":1872,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1873,"column":0},"end":{"row":1873,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1874,"column":0},"end":{"row":1874,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1875,"column":0},"end":{"row":1875,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1876,"column":0},"end":{"row":1876,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1877,"column":0},"end":{"row":1877,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1878,"column":0},"end":{"row":1878,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1879,"column":0},"end":{"row":1879,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1880,"column":0},"end":{"row":1880,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1881,"column":0},"end":{"row":1881,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1882,"column":0},"end":{"row":1882,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1883,"column":0},"end":{"row":1883,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1884,"column":0},"end":{"row":1884,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1885,"column":0},"end":{"row":1885,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1886,"column":0},"end":{"row":1886,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1848,"column":0},"end":{"row":1849,"column":25},"action":"remove","lines":["        with open(filename, 'r', newline='') as file:    ","    existing_entries = []"],"id":414},{"start":{"row":1847,"column":0},"end":{"row":1848,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1846,"column":29},"end":{"row":1847,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1834,"column":26},"end":{"row":1834,"column":216},"action":"remove","lines":["/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP&rsp-subtree-filter=eq(infraRsDomP.tCl,\\\"l3extDomP\\\")"],"id":415},{"start":{"row":1834,"column":26},"end":{"row":1834,"column":275},"action":"insert","lines":["/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp"]}],[{"start":{"row":2007,"column":37},"end":{"row":2007,"column":51},"action":"remove","lines":["data, filename"],"id":416},{"start":{"row":2007,"column":37},"end":{"row":2007,"column":38},"action":"insert","lines":["t"]},{"start":{"row":2007,"column":38},"end":{"row":2007,"column":39},"action":"insert","lines":["o"]},{"start":{"row":2007,"column":39},"end":{"row":2007,"column":40},"action":"insert","lines":["k"]},{"start":{"row":2007,"column":40},"end":{"row":2007,"column":41},"action":"insert","lines":["e"]},{"start":{"row":2007,"column":41},"end":{"row":2007,"column":42},"action":"insert","lines":["n"]}],[{"start":{"row":2030,"column":39},"end":{"row":2031,"column":0},"action":"insert","lines":["",""],"id":417}],[{"start":{"row":2031,"column":0},"end":{"row":2032,"column":62},"action":"insert","lines":["tf_ciscodevnet_aci_fabric_switch_interface_profiles()","tf_ciscodevnet_aci_fabric_switch_interface_profiles_commands()"],"id":418}],[{"start":{"row":1832,"column":41},"end":{"row":1832,"column":55},"action":"remove","lines":["data, filename"],"id":419},{"start":{"row":1832,"column":41},"end":{"row":1832,"column":42},"action":"insert","lines":["t"]},{"start":{"row":1832,"column":42},"end":{"row":1832,"column":43},"action":"insert","lines":["o"]},{"start":{"row":1832,"column":43},"end":{"row":1832,"column":44},"action":"insert","lines":["k"]},{"start":{"row":1832,"column":44},"end":{"row":1832,"column":45},"action":"insert","lines":["e"]},{"start":{"row":1832,"column":45},"end":{"row":1832,"column":46},"action":"insert","lines":["n"]}],[{"start":{"row":2012,"column":17},"end":{"row":2013,"column":0},"action":"insert","lines":["",""],"id":420}],[{"start":{"row":2013,"column":0},"end":{"row":2013,"column":3},"action":"insert","lines":["\"\"\""],"id":421}],[{"start":{"row":2031,"column":39},"end":{"row":2032,"column":0},"action":"insert","lines":["",""],"id":422}],[{"start":{"row":2032,"column":0},"end":{"row":2032,"column":3},"action":"insert","lines":["\"\"\""],"id":423}],[{"start":{"row":2036,"column":0},"end":{"row":2036,"column":3},"action":"insert","lines":["\"\"\""],"id":424}],[{"start":{"row":2040,"column":49},"end":{"row":2041,"column":0},"action":"insert","lines":["",""],"id":425}],[{"start":{"row":2041,"column":0},"end":{"row":2041,"column":3},"action":"insert","lines":["\"\"\""],"id":426}],[{"start":{"row":1885,"column":0},"end":{"row":1970,"column":127},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","","\"\"\")","","    with open('fabric_switch_profiles.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        specific_resource_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        if specific_resource_leaf not in existing_content or specific_resource_interface not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource_leaf} or {specific_resource_interface} already exists in fabric_switch_profiles.tf\")","","    if new_terraform_content:","        with open('fabric_switch_profiles.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to fabric_switch_profiles.tf successfully!\")","                                    ","def tf_ciscodevnet_aci_fabric_switch_interface_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{ infraRsAccPortP_name }} {{ infraRsAccPortP_tDn }}","terraform import aci_leaf_profile.{{ infraNodeP_name }} {{ infraNodeP_dn }}","\"\"\")","","    with open('fabric_switch_import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        specific_command_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        if specific_command_interface not in existing_content or specific_command_leaf not in existing_content:","            terraform_command = command_template.render(entry)","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_interface} or {specific_command_leaf} already exists in fabric_switch_import_commands.txt\")","","    if new_commands:","        with open('fabric_switch_import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for fabric switch interface profiles appended to fabric_switch_import_commands.txt successfully!\")  "],"id":427}],[{"start":{"row":1885,"column":0},"end":{"row":1936,"column":20},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        specific_resource_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        if specific_resource_leaf not in existing_content or specific_resource_interface not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource_leaf} or {specific_resource_interface} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform"],"id":428}],[{"start":{"row":1936,"column":20},"end":{"row":1937,"column":0},"action":"insert","lines":[" resources for fabric switch interface profiles appended to import.tf successfully!\")",""],"id":429}],[{"start":{"row":1937,"column":0},"end":{"row":1938,"column":0},"action":"insert","lines":["",""],"id":430}],[{"start":{"row":1938,"column":0},"end":{"row":1968,"column":111},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{ infraRsAccPortP_name }} {{ infraRsAccPortP_tDn }}","terraform import aci_leaf_profile.{{ infraNodeP_name }} {{ infraNodeP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        specific_command_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        if specific_command_interface not in existing_content or specific_command_leaf not in existing_content:","            terraform_command = command_template.render(entry)","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_interface} or {specific_command_leaf} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for fabric switch interface profiles appended to import_commands.txt successfully!\")"],"id":431}],[{"start":{"row":1832,"column":0},"end":{"row":1883,"column":68},"action":"remove","lines":["def get_fabric_switch_interface_profiles(token):","    ","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","    ","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","    ","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1]","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","    ","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","    ","                                    row_as_list = [","                                        \"{{APIC}}\", infraNodeP_dn, infraNodeP_name, ","                                        infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                        infraLeafS_name, infraLeafS_name,  ","                                        infraNodeBlk_from, infraNodeBlk_to","                                    ]","    ","                                    if row_as_list not in existing_entries:","                                        writer.writerow(row_as_list)"],"id":432},{"start":{"row":1832,"column":0},"end":{"row":1890,"column":42},"action":"insert","lines":["def get_fabric_switch_interface_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        print(\"API Response Data:\", json.dumps(data, indent=4))  # Debugging print","","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","    ","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","    ","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1]","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","    ","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","    ","                                    row_as_list = [","                                        \"{{APIC}}\", infraNodeP_dn, infraNodeP_name, ","                                        infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                        infraLeafS_name, infraLeafS_name,  ","                                        infraNodeBlk_from, infraNodeBlk_to","                                    ]","    ","                                    print(\"Row to write:\", row_as_list)  # Debugging print","                                    if row_as_list not in existing_entries:","                                        writer.writerow(row_as_list)","                                        print(\"Row written to CSV\")  # Debugging print","    else:","        print(f\"Failed to retrieve fabric switch interface profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text) "]}],[{"start":{"row":1832,"column":0},"end":{"row":1890,"column":42},"action":"remove","lines":["def get_fabric_switch_interface_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        print(\"API Response Data:\", json.dumps(data, indent=4))  # Debugging print","","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","    ","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","    ","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1]","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","    ","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","    ","                                    row_as_list = [","                                        \"{{APIC}}\", infraNodeP_dn, infraNodeP_name, ","                                        infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                        infraLeafS_name, infraLeafS_name,  ","                                        infraNodeBlk_from, infraNodeBlk_to","                                    ]","    ","                                    print(\"Row to write:\", row_as_list)  # Debugging print","                                    if row_as_list not in existing_entries:","                                        writer.writerow(row_as_list)","                                        print(\"Row written to CSV\")  # Debugging print","    else:","        print(f\"Failed to retrieve fabric switch interface profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text) "],"id":433},{"start":{"row":1832,"column":0},"end":{"row":1888,"column":0},"action":"insert","lines":["def get_fabric_switch_interface_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","    ","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')  # Corrected here","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","    ","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","    ","                                    row_as_list = [","                                        ACI_BASE_URL,  # Replaced {{APIC}} with actual APIC URL","                                        infraNodeP_dn, infraNodeP_name, ","                                        infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                        infraLeafS_name, infraLeafS_name,  ","                                        infraNodeBlk_from, infraNodeBlk_to","                                    ]","    ","                                    if row_as_list not in existing_entries:","                                        writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch interface profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)",""]}],[{"start":{"row":1890,"column":0},"end":{"row":1941,"column":105},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        specific_resource_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'","        if specific_resource_leaf not in existing_content or specific_resource_interface not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource_leaf} or {specific_resource_interface} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"],"id":434},{"start":{"row":1890,"column":0},"end":{"row":1943,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        leaf_resource_name = f'profile_{entry[\"infraNodeP_name\"]}'","        interface_resource_name = f'profile_{entry[\"infraRsAccPortP_name\"]}'","","        if leaf_resource_name not in existing_content and interface_resource_name not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_name} or {interface_resource_name} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1890,"column":0},"end":{"row":1944,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        leaf_resource_name = f'profile_{entry[\"infraNodeP_name\"]}'","        interface_resource_name = f'profile_{entry[\"infraRsAccPortP_name\"]}'","","        if leaf_resource_name not in existing_content and interface_resource_name not in existing_content:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_name} or {interface_resource_name} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")","",""],"id":435},{"start":{"row":1890,"column":0},"end":{"row":1942,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'r') as tf_file:","        existing_resources = tf_file.readlines()","","    new_terraform_content = \"\"","","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1890,"column":0},"end":{"row":1941,"column":105},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'r') as tf_file:","        existing_resources = tf_file.readlines()","","    new_terraform_content = \"\"","","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"],"id":436}],[{"start":{"row":1890,"column":0},"end":{"row":1944,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""],"id":437}],[{"start":{"row":1890,"column":0},"end":{"row":1943,"column":105},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"],"id":438},{"start":{"row":1890,"column":0},"end":{"row":1944,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1943,"column":105},"end":{"row":1944,"column":0},"action":"remove","lines":["",""],"id":439}],[{"start":{"row":1889,"column":0},"end":{"row":1945,"column":0},"action":"remove","lines":["                                    ","def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")","",""],"id":440},{"start":{"row":1889,"column":0},"end":{"row":1949,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    print(\"Existing resources found in import.tf:\", existing_resources)  # Debugging print","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        print(f\"Checking for {leaf_resource_declaration} and {interface_resource_declaration}\")  # Debugging print","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","            print(f\"Appending resources for {entry['infraNodeP_name']} and {entry['infraRsAccPortP_name']}\")  # Debugging print","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","            print(\"New resources appended to import.tf\")  # Debugging print","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1889,"column":0},"end":{"row":1948,"column":105},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if \"resource \\\"aci_leaf_interface_profile\\\"\" in line or \"resource \\\"aci_leaf_profile\\\"\" in line:","                existing_resources.add(line.strip())","","    print(\"Existing resources found in import.tf:\", existing_resources)  # Debugging print","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        print(f\"Checking for {leaf_resource_declaration} and {interface_resource_declaration}\")  # Debugging print","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","            print(f\"Appending resources for {entry['infraNodeP_name']} and {entry['infraRsAccPortP_name']}\")  # Debugging print","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","            print(\"New resources appended to import.tf\")  # Debugging print","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"],"id":441},{"start":{"row":1889,"column":0},"end":{"row":1945,"column":105},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        file_contents = tf_file.read()","        existing_resources = set(re.findall(r'resource \"aci_leaf_(?:interface_profile|profile)\" \"([^\"]+)\"', file_contents))","","    print(\"Existing resources found in import.tf:\", existing_resources)  # Debugging print","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_name = f'profile_{entry[\"infraNodeP_name\"]}'","        interface_resource_name = f'profile_{entry[\"infraRsAccPortP_name\"]}'","","        if leaf_resource_name not in existing_resources and interface_resource_name not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","            print(f\"Appending resources for {entry['infraNodeP_name']} and {entry['infraRsAccPortP_name']}\")  # Debugging print","        else:","            print(f\"Resource {leaf_resource_name} or {interface_resource_name} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","            print(\"New resources appended to import.tf\")  # Debugging print","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"]}],[{"start":{"row":2003,"column":23},"end":{"row":2004,"column":0},"action":"insert","lines":["",""],"id":442}],[{"start":{"row":2004,"column":0},"end":{"row":2004,"column":3},"action":"insert","lines":["\"\"\""],"id":443}],[{"start":{"row":2014,"column":30},"end":{"row":2015,"column":0},"action":"insert","lines":["",""],"id":444}],[{"start":{"row":2015,"column":0},"end":{"row":2015,"column":3},"action":"insert","lines":["\"\"\""],"id":445}],[{"start":{"row":2018,"column":0},"end":{"row":2018,"column":3},"action":"insert","lines":["\"\"\""],"id":446}],[{"start":{"row":2020,"column":0},"end":{"row":2020,"column":3},"action":"insert","lines":["\"\"\""],"id":447}],[{"start":{"row":2020,"column":3},"end":{"row":2021,"column":0},"action":"insert","lines":["",""],"id":448}],[{"start":{"row":1986,"column":24},"end":{"row":1987,"column":0},"action":"insert","lines":["",""],"id":449}],[{"start":{"row":1987,"column":0},"end":{"row":1987,"column":3},"action":"insert","lines":["\"\"\""],"id":450}],[{"start":{"row":1998,"column":16},"end":{"row":1999,"column":0},"action":"insert","lines":["",""],"id":451}],[{"start":{"row":1999,"column":0},"end":{"row":1999,"column":3},"action":"insert","lines":["\"\"\""],"id":452}],[{"start":{"row":1889,"column":0},"end":{"row":1945,"column":105},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        file_contents = tf_file.read()","        existing_resources = set(re.findall(r'resource \"aci_leaf_(?:interface_profile|profile)\" \"([^\"]+)\"', file_contents))","","    print(\"Existing resources found in import.tf:\", existing_resources)  # Debugging print","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_name = f'profile_{entry[\"infraNodeP_name\"]}'","        interface_resource_name = f'profile_{entry[\"infraRsAccPortP_name\"]}'","","        if leaf_resource_name not in existing_resources and interface_resource_name not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","            print(f\"Appending resources for {entry['infraNodeP_name']} and {entry['infraRsAccPortP_name']}\")  # Debugging print","        else:","            print(f\"Resource {leaf_resource_name} or {interface_resource_name} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","            print(\"New resources appended to import.tf\")  # Debugging print","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"],"id":453},{"start":{"row":1889,"column":0},"end":{"row":1943,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if line.startswith('resource \"aci_leaf_interface_profile\"') or line.startswith('resource \"aci_leaf_profile\"'):","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1902,"column":0},"end":{"row":1903,"column":0},"action":"insert","lines":["",""],"id":455},{"start":{"row":1903,"column":0},"end":{"row":1904,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1904,"column":0},"end":{"row":1905,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1903,"column":0},"end":{"row":1903,"column":74},"action":"insert","lines":["resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\""]},{"start":{"row":1903,"column":74},"end":{"row":1903,"column":75},"action":"insert","lines":[" "]},{"start":{"row":1903,"column":75},"end":{"row":1903,"column":134},"action":"insert","lines":["resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\""]},{"start":{"row":1903,"column":74},"end":{"row":1903,"column":134},"action":"remove","lines":[" resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\""]},{"start":{"row":1903,"column":74},"end":{"row":1904,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1904,"column":0},"end":{"row":1905,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1905,"column":0},"end":{"row":1905,"column":59},"action":"insert","lines":["resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\""]},{"start":{"row":1903,"column":0},"end":{"row":1905,"column":59},"action":"remove","lines":["resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\"","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\""]},{"start":{"row":1902,"column":0},"end":{"row":1903,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1901,"column":1},"end":{"row":1902,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1901,"column":1},"end":{"row":1902,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1889,"column":0},"end":{"row":1943,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    existing_resources = set()","    with open('import.tf', 'r') as tf_file:","        for line in tf_file:","            if line.startswith('resource \"aci_leaf_interface_profile\"') or line.startswith('resource \"aci_leaf_profile\"'):","                existing_resources.add(line.strip())","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_declaration = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_declaration = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_declaration not in existing_resources and interface_resource_declaration not in existing_resources:","            terraform_block = terraform_template.render(entry)","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {leaf_resource_declaration} or {interface_resource_declaration} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]},{"start":{"row":1889,"column":0},"end":{"row":1940,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_switch_interface_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","","resource \"aci_leaf_profile\" \"profile_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = aci_leaf_interface_profile.profile_{{ infraRsAccPortP_name }}.id","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_line = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_line = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_line not in existing_content and interface_resource_line not in existing_content:","            new_terraform_content += terraform_template.render(entry)","        else:","            print(f\"Resource {leaf_resource_line} or {interface_resource_line} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")",""]},{"start":{"row":1807,"column":0},"end":{"row":1808,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1808,"column":0},"end":{"row":1809,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1808,"column":0},"end":{"row":1810,"column":64},"action":"insert","lines":["################################################################","### ACI Fabric Access Policy Switch and Interface Profiles   ###","################################################################"]},{"start":{"row":1809,"column":29},"end":{"row":1809,"column":40},"action":"remove","lines":["Switch and "]},{"start":{"row":1809,"column":29},"end":{"row":1809,"column":30},"action":"insert","lines":["L"]},{"start":{"row":1809,"column":30},"end":{"row":1809,"column":31},"action":"insert","lines":["e"]},{"start":{"row":1809,"column":31},"end":{"row":1809,"column":32},"action":"insert","lines":["a"]},{"start":{"row":1809,"column":32},"end":{"row":1809,"column":33},"action":"insert","lines":["f"]},{"start":{"row":1809,"column":33},"end":{"row":1809,"column":34},"action":"insert","lines":[" "]},{"start":{"row":1808,"column":63},"end":{"row":1808,"column":64},"action":"remove","lines":["#"]},{"start":{"row":1808,"column":62},"end":{"row":1808,"column":63},"action":"remove","lines":["#"]},{"start":{"row":1808,"column":61},"end":{"row":1808,"column":62},"action":"remove","lines":["#"]},{"start":{"row":1808,"column":60},"end":{"row":1808,"column":61},"action":"remove","lines":["#"]},{"start":{"row":1808,"column":59},"end":{"row":1808,"column":60},"action":"remove","lines":["#"]},{"start":{"row":1808,"column":58},"end":{"row":1808,"column":59},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":63},"end":{"row":1810,"column":64},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":62},"end":{"row":1810,"column":63},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":61},"end":{"row":1810,"column":62},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":60},"end":{"row":1810,"column":61},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":59},"end":{"row":1810,"column":60},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":58},"end":{"row":1810,"column":59},"action":"remove","lines":["#"]},{"start":{"row":1810,"column":58},"end":{"row":1811,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1812,"column":0},"end":{"row":1826,"column":78},"action":"insert","lines":["def bundle_policy_groups_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_bundle_policy_groups.csv\")","    headers = [","        \"APIC\", \"infraAccBndlGrp_name\", \"infraAccBndlGrp_dn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")"]},{"start":{"row":1826,"column":78},"end":{"row":1826,"column":81},"action":"remove","lines":["   "]},{"start":{"row":1826,"column":78},"end":{"row":1827,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1827,"column":0},"end":{"row":1827,"column":12},"action":"insert","lines":["            "]},{"start":{"row":1827,"column":12},"end":{"row":1828,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1828,"column":0},"end":{"row":1828,"column":12},"action":"insert","lines":["            "]},{"start":{"row":1812,"column":4},"end":{"row":1812,"column":23},"action":"remove","lines":["bundle_policy_group"]},{"start":{"row":1812,"column":4},"end":{"row":1812,"column":30},"action":"insert","lines":["aci_leaf_interface_profile"]},{"start":{"row":1812,"column":8},"end":{"row":1812,"column":9},"action":"insert","lines":["f"]},{"start":{"row":1812,"column":9},"end":{"row":1812,"column":10},"action":"insert","lines":["a"]},{"start":{"row":1812,"column":10},"end":{"row":1812,"column":11},"action":"insert","lines":["b"]},{"start":{"row":1812,"column":11},"end":{"row":1812,"column":12},"action":"insert","lines":["r"]},{"start":{"row":1812,"column":12},"end":{"row":1812,"column":13},"action":"insert","lines":["i"]},{"start":{"row":1812,"column":13},"end":{"row":1812,"column":14},"action":"insert","lines":["c"]},{"start":{"row":1812,"column":14},"end":{"row":1812,"column":15},"action":"insert","lines":["_"]},{"start":{"row":1812,"column":15},"end":{"row":1812,"column":16},"action":"insert","lines":["a"]},{"start":{"row":1812,"column":16},"end":{"row":1812,"column":17},"action":"insert","lines":["c"]},{"start":{"row":1812,"column":17},"end":{"row":1812,"column":18},"action":"insert","lines":["c"]},{"start":{"row":1812,"column":18},"end":{"row":1812,"column":19},"action":"insert","lines":["e"]},{"start":{"row":1812,"column":19},"end":{"row":1812,"column":20},"action":"insert","lines":["s"]},{"start":{"row":1812,"column":20},"end":{"row":1812,"column":21},"action":"insert","lines":["s"]},{"start":{"row":1812,"column":21},"end":{"row":1812,"column":22},"action":"insert","lines":["_"]},{"start":{"row":1812,"column":7},"end":{"row":1812,"column":8},"action":"remove","lines":["_"]},{"start":{"row":1812,"column":6},"end":{"row":1812,"column":7},"action":"remove","lines":["i"]},{"start":{"row":1812,"column":5},"end":{"row":1812,"column":6},"action":"remove","lines":["c"]},{"start":{"row":1812,"column":4},"end":{"row":1812,"column":5},"action":"remove","lines":["a"]},{"start":{"row":1812,"column":40},"end":{"row":1812,"column":41},"action":"remove","lines":["s"]},{"start":{"row":1814,"column":43},"end":{"row":1814,"column":63},"action":"remove","lines":["bundle_policy_groups"]},{"start":{"row":1814,"column":43},"end":{"row":1814,"column":79},"action":"insert","lines":["fabric_access_leaf_interface_profile"]},{"start":{"row":1814,"column":79},"end":{"row":1814,"column":80},"action":"insert","lines":["s"]},{"start":{"row":1812,"column":40},"end":{"row":1812,"column":41},"action":"insert","lines":["s"]},{"start":{"row":1816,"column":17},"end":{"row":1816,"column":32},"action":"remove","lines":["infraAccBndlGrp"]},{"start":{"row":1816,"column":17},"end":{"row":1816,"column":30},"action":"insert","lines":["infraAccPortP"]},{"start":{"row":1816,"column":39},"end":{"row":1816,"column":54},"action":"remove","lines":["infraAccBndlGrp"]},{"start":{"row":1816,"column":39},"end":{"row":1816,"column":52},"action":"insert","lines":["infraAccPortP"]},{"start":{"row":1828,"column":0},"end":{"row":1858,"column":94},"action":"insert","lines":["def get_bundle_policy_groups(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccBndlGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_bundle_policy_groups.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                infraAccBndlGrp_name = entry[\"infraAccBndlGrp\"][\"attributes\"][\"name\"]","                infraAccBndlGrp_dn = entry[\"infraAccBndlGrp\"][\"attributes\"][\"dn\"]","                row_as_list = [ACI_BASE_URL, infraAccBndlGrp_name, infraAccBndlGrp_dn]","","                if row_as_list not in existing_entries:","                    writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve Bundle Policy Groups. Status code: {response.status_code}\")"]},{"start":{"row":1858,"column":94},"end":{"row":1858,"column":106},"action":"remove","lines":["            "]},{"start":{"row":1858,"column":94},"end":{"row":1859,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1859,"column":0},"end":{"row":1859,"column":8},"action":"insert","lines":["        "]},{"start":{"row":1828,"column":8},"end":{"row":1828,"column":28},"action":"remove","lines":["bundle_policy_groups"]},{"start":{"row":1828,"column":8},"end":{"row":1828,"column":45},"action":"insert","lines":["fabric_access_leaf_interface_profiles"]},{"start":{"row":1830,"column":27},"end":{"row":1830,"column":111},"action":"remove","lines":["api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccBndlGrp"]},{"start":{"row":1830,"column":27},"end":{"row":1830,"column":109},"action":"insert","lines":["api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortP"]},{"start":{"row":1838,"column":40},"end":{"row":1838,"column":60},"action":"remove","lines":["bundle_policy_groups"]},{"start":{"row":1838,"column":40},"end":{"row":1838,"column":77},"action":"insert","lines":["fabric_access_leaf_interface_profiles"]},{"start":{"row":1851,"column":46},"end":{"row":1851,"column":61},"action":"remove","lines":["infraAccBndlGrp"]},{"start":{"row":1851,"column":46},"end":{"row":1851,"column":59},"action":"insert","lines":["infraAccPortP"]},{"start":{"row":1852,"column":44},"end":{"row":1852,"column":59},"action":"remove","lines":["infraAccBndlGrp"]},{"start":{"row":1852,"column":44},"end":{"row":1852,"column":57},"action":"insert","lines":["infraAccPortP"]},{"start":{"row":1814,"column":86},"end":{"row":1814,"column":87},"action":"insert","lines":[" "]},{"start":{"row":1814,"column":86},"end":{"row":1814,"column":87},"action":"remove","lines":[" "]},{"start":{"row":1812,"column":0},"end":{"row":1826,"column":78},"action":"remove","lines":["def fabric_access_leaf_interface_profiles_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_fabric_access_leaf_interface_profiles.csv\")","    headers = [","        \"APIC\", \"infraAccPortP_name\", \"infraAccPortP_dn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")"]},{"start":{"row":1812,"column":0},"end":{"row":1827,"column":0},"action":"insert","lines":["def fabric_access_leaf_interface_profiles_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_fabric_access_leaf_interface_profiles.csv\")","    headers = [","        \"APIC\", \"infraAccPortP_name\", \"infraAccPortP_dn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")",""]},{"start":{"row":1826,"column":78},"end":{"row":1827,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1828,"column":0},"end":{"row":1858,"column":94},"action":"remove","lines":["def get_fabric_access_leaf_interface_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortP\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_leaf_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                infraAccBndlGrp_name = entry[\"infraAccPortP\"][\"attributes\"][\"name\"]","                infraAccBndlGrp_dn = entry[\"infraAccPortP\"][\"attributes\"][\"dn\"]","                row_as_list = [ACI_BASE_URL, infraAccBndlGrp_name, infraAccBndlGrp_dn]","","                if row_as_list not in existing_entries:","                    writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve Bundle Policy Groups. Status code: {response.status_code}\")"]},{"start":{"row":1828,"column":0},"end":{"row":1860,"column":0},"action":"insert","lines":["def get_fabric_access_leaf_interface_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=subtree&target-subtree-class=infraAccPortP\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_leaf_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                infraAccPortP_name = entry[\"infraAccPortP\"][\"attributes\"][\"name\"]","                infraAccPortP_dn = entry[\"infraAccPortP\"][\"attributes\"][\"dn\"]","                row_as_list = [ACI_BASE_URL, infraAccPortP_name, infraAccPortP_dn]","","                if row_as_list not in existing_entries:","                    writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve Access Leaf Interface Profiles. Status code: {response.status_code}\")","",""]},{"start":{"row":1860,"column":0},"end":{"row":1895,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_bundle_policy_groups():","    csv_filepath = os.path.join(\"data\", \"py_fabric_access_leaf_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_interface_profile\" \"{{ infraAccPortP_name }}\" {","    name = \"{{ infraAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        specific_resource = f'resource \"aci_leaf_interface_profile\" \"{entry[\"infraAccPortP_name\"]}\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAccPortP_name=entry['infraAccPortP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for ACI Bundle Policy Groups appended to import.tf successfully!\")",""]},{"start":{"row":1895,"column":0},"end":{"row":1896,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1896,"column":0},"end":{"row":1927,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_bundle_policy_groups_commands():","    csv_filepath = os.path.join('data', 'py_fabric_access_leaf_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_interface_profile.{{ infraAccPortP_name }} {{ infraAccPortP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","    for entry in entries:","        specific_command = f'aci_leaf_interface_profile.\"{entry[\"infraAccPortP_name\"]}\"'","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAccPortP_name=entry['infraAccPortP_name'],","                infraAccPortP_dn=entry['infraAccPortP_dn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for ACI Bundle Policy Groups appended to import_commands.txt successfully!\")",""]},{"start":{"row":2115,"column":3},"end":{"row":2116,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2116,"column":0},"end":{"row":2116,"column":42},"action":"insert","lines":["fabric_access_leaf_interface_profiles_file"]},{"start":{"row":2117,"column":0},"end":{"row":2117,"column":1},"action":"insert","lines":["#"]},{"start":{"row":2134,"column":3},"end":{"row":2135,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2135,"column":0},"end":{"row":2135,"column":41},"action":"insert","lines":["get_fabric_access_leaf_interface_profiles"]},{"start":{"row":2136,"column":0},"end":{"row":2136,"column":1},"action":"insert","lines":["#"]},{"start":{"row":1860,"column":19},"end":{"row":1860,"column":43},"action":"remove","lines":["aci_bundle_policy_groups"]},{"start":{"row":1860,"column":19},"end":{"row":1860,"column":56},"action":"insert","lines":["fabric_access_leaf_interface_profiles"]},{"start":{"row":1896,"column":19},"end":{"row":1896,"column":43},"action":"remove","lines":["aci_bundle_policy_groups"]},{"start":{"row":1896,"column":19},"end":{"row":1896,"column":56},"action":"insert","lines":["fabric_access_leaf_interface_profiles"]},{"start":{"row":1860,"column":19},"end":{"row":1860,"column":20},"action":"insert","lines":["a"]},{"start":{"row":1860,"column":20},"end":{"row":1860,"column":21},"action":"insert","lines":["c"]},{"start":{"row":1860,"column":21},"end":{"row":1860,"column":22},"action":"insert","lines":["i"]},{"start":{"row":1860,"column":22},"end":{"row":1860,"column":23},"action":"insert","lines":["_"]},{"start":{"row":1896,"column":19},"end":{"row":1896,"column":20},"action":"insert","lines":["a"]},{"start":{"row":1896,"column":20},"end":{"row":1896,"column":21},"action":"insert","lines":["c"]},{"start":{"row":1896,"column":21},"end":{"row":1896,"column":22},"action":"insert","lines":["i"]},{"start":{"row":1896,"column":22},"end":{"row":1896,"column":23},"action":"insert","lines":["_"]},{"start":{"row":2162,"column":3},"end":{"row":2163,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2163,"column":0},"end":{"row":2163,"column":58},"action":"insert","lines":["tf_ciscodevnet_aci_fabric_access_leaf_interface_profiles()"]},{"start":{"row":2166,"column":0},"end":{"row":2166,"column":67},"action":"insert","lines":["tf_ciscodevnet_aci_fabric_access_leaf_interface_profiles_commands()"]}],[{"start":{"row":2166,"column":0},"end":{"row":2166,"column":67},"action":"remove","lines":["tf_ciscodevnet_aci_fabric_access_leaf_interface_profiles_commands()"],"id":456},{"start":{"row":2165,"column":62},"end":{"row":2166,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2163,"column":58},"end":{"row":2164,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2164,"column":0},"end":{"row":2164,"column":67},"action":"insert","lines":["tf_ciscodevnet_aci_fabric_access_leaf_interface_profiles_commands()"]},{"start":{"row":2165,"column":0},"end":{"row":2165,"column":1},"action":"insert","lines":["#"]},{"start":{"row":2166,"column":0},"end":{"row":2166,"column":1},"action":"insert","lines":["#"]}],[{"start":{"row":2116,"column":42},"end":{"row":2116,"column":44},"action":"insert","lines":["()"],"id":457}],[{"start":{"row":2135,"column":41},"end":{"row":2135,"column":43},"action":"insert","lines":["()"],"id":458},{"start":{"row":2135,"column":42},"end":{"row":2135,"column":43},"action":"insert","lines":["t"]},{"start":{"row":2135,"column":43},"end":{"row":2135,"column":44},"action":"insert","lines":["o"]},{"start":{"row":2135,"column":44},"end":{"row":2135,"column":45},"action":"insert","lines":["k"]},{"start":{"row":2135,"column":45},"end":{"row":2135,"column":46},"action":"insert","lines":["e"]},{"start":{"row":2135,"column":46},"end":{"row":2135,"column":47},"action":"insert","lines":["n"]}],[{"start":{"row":1997,"column":55},"end":{"row":1997,"column":95},"action":"remove","lines":["# Replaced {{APIC}} with actual APIC URL"],"id":459},{"start":{"row":1997,"column":54},"end":{"row":1997,"column":55},"action":"remove","lines":[" "]},{"start":{"row":1997,"column":53},"end":{"row":1997,"column":54},"action":"remove","lines":[" "]}],[{"start":{"row":2035,"column":35},"end":{"row":2035,"column":36},"action":"insert","lines":["["],"id":460}],[{"start":{"row":2035,"column":100},"end":{"row":2035,"column":101},"action":"insert","lines":["]"],"id":461}],[{"start":{"row":2017,"column":0},"end":{"row":2022,"column":1},"action":"remove","lines":["resource \"aci_leaf_interface_profile\" \"profile_{{ infraRsAccPortP_name }}\" {","    name = \"{{ infraRsAccPortP_name }}\"","    lifecycle {","        ignore_changes = all","    }","}"],"id":462},{"start":{"row":2016,"column":37},"end":{"row":2017,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":2016,"column":37},"end":{"row":2017,"column":0},"action":"remove","lines":["",""],"id":463}],[{"start":{"row":2063,"column":0},"end":{"row":2063,"column":96},"action":"remove","lines":["terraform import aci_leaf_interface_profile.{{ infraRsAccPortP_name }} {{ infraRsAccPortP_tDn }}"],"id":464},{"start":{"row":2062,"column":35},"end":{"row":2063,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1894,"column":39},"end":{"row":1894,"column":59},"action":"remove","lines":["Bundle Policy Groups"]},{"start":{"row":1894,"column":39},"end":{"row":1894,"column":40},"action":"insert","lines":["F"]},{"start":{"row":1894,"column":40},"end":{"row":1894,"column":41},"action":"insert","lines":["a"]},{"start":{"row":1894,"column":41},"end":{"row":1894,"column":42},"action":"insert","lines":["b"]},{"start":{"row":1894,"column":42},"end":{"row":1894,"column":43},"action":"insert","lines":["r"]},{"start":{"row":1894,"column":43},"end":{"row":1894,"column":44},"action":"insert","lines":["i"]},{"start":{"row":1894,"column":44},"end":{"row":1894,"column":45},"action":"insert","lines":["c"]},{"start":{"row":1894,"column":45},"end":{"row":1894,"column":46},"action":"insert","lines":[" "]},{"start":{"row":1894,"column":46},"end":{"row":1894,"column":47},"action":"insert","lines":["A"]},{"start":{"row":1894,"column":47},"end":{"row":1894,"column":48},"action":"insert","lines":["c"]},{"start":{"row":1894,"column":48},"end":{"row":1894,"column":49},"action":"insert","lines":["c"]},{"start":{"row":1894,"column":49},"end":{"row":1894,"column":50},"action":"insert","lines":["e"]},{"start":{"row":1894,"column":50},"end":{"row":1894,"column":51},"action":"insert","lines":["s"]},{"start":{"row":1894,"column":51},"end":{"row":1894,"column":52},"action":"insert","lines":["s"]},{"start":{"row":1894,"column":52},"end":{"row":1894,"column":53},"action":"insert","lines":[" "]},{"start":{"row":1894,"column":53},"end":{"row":1894,"column":54},"action":"insert","lines":["I"]},{"start":{"row":1894,"column":54},"end":{"row":1894,"column":55},"action":"insert","lines":["n"]},{"start":{"row":1894,"column":55},"end":{"row":1894,"column":56},"action":"insert","lines":["t"]},{"start":{"row":1894,"column":56},"end":{"row":1894,"column":57},"action":"insert","lines":["e"]},{"start":{"row":1894,"column":57},"end":{"row":1894,"column":58},"action":"insert","lines":["r"]},{"start":{"row":1894,"column":58},"end":{"row":1894,"column":59},"action":"insert","lines":["f"]},{"start":{"row":1894,"column":59},"end":{"row":1894,"column":60},"action":"insert","lines":["a"]},{"start":{"row":1894,"column":60},"end":{"row":1894,"column":61},"action":"insert","lines":["c"]},{"start":{"row":1894,"column":61},"end":{"row":1894,"column":62},"action":"insert","lines":["e"]},{"start":{"row":1894,"column":62},"end":{"row":1894,"column":63},"action":"insert","lines":[" "]},{"start":{"row":1894,"column":63},"end":{"row":1894,"column":64},"action":"insert","lines":["P"]},{"start":{"row":1894,"column":64},"end":{"row":1894,"column":65},"action":"insert","lines":["r"]},{"start":{"row":1894,"column":65},"end":{"row":1894,"column":66},"action":"insert","lines":["o"]},{"start":{"row":1894,"column":66},"end":{"row":1894,"column":67},"action":"insert","lines":["f"]},{"start":{"row":1894,"column":67},"end":{"row":1894,"column":68},"action":"insert","lines":["i"]},{"start":{"row":1894,"column":68},"end":{"row":1894,"column":69},"action":"insert","lines":["l"]},{"start":{"row":1894,"column":69},"end":{"row":1894,"column":70},"action":"insert","lines":["e"]},{"start":{"row":1894,"column":70},"end":{"row":1894,"column":71},"action":"insert","lines":["s"]},{"start":{"row":1926,"column":31},"end":{"row":1926,"column":55},"action":"remove","lines":["ACI Bundle Policy Groups"]},{"start":{"row":1926,"column":31},"end":{"row":1926,"column":68},"action":"insert","lines":[" ACI Fabric Access Interface Profiles"]},{"start":{"row":2033,"column":4},"end":{"row":2034,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2034,"column":0},"end":{"row":2035,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2035,"column":0},"end":{"row":2054,"column":109},"action":"insert","lines":["    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        specific_resource = f'resource \"aci_leaf_interface_profile\" \"{entry[\"infraAccPortP_name\"]}\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAccPortP_name=entry['infraAccPortP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for ACI Fabric Access Interface Profiles appended to import.tf successfully!\")"]},{"start":{"row":2041,"column":26},"end":{"row":2041,"column":100},"action":"remove","lines":["= f'resource \"aci_leaf_interface_profile\" \"{entry[\"infraAccPortP_name\"]}\"'"]},{"start":{"row":2041,"column":26},"end":{"row":2041,"column":110},"action":"insert","lines":["= f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'"]},{"start":{"row":2041,"column":28},"end":{"row":2041,"column":110},"action":"remove","lines":["f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'"]},{"start":{"row":2041,"column":28},"end":{"row":2041,"column":97},"action":"insert","lines":["= f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'"]},{"start":{"row":2044,"column":16},"end":{"row":2044,"column":33},"action":"remove","lines":["infraAccPortP_nam"]},{"start":{"row":2044,"column":16},"end":{"row":2044,"column":31},"action":"insert","lines":["infraNodeP_name"]},{"start":{"row":2044,"column":31},"end":{"row":2044,"column":32},"action":"remove","lines":["e"]},{"start":{"row":2044,"column":39},"end":{"row":2044,"column":57},"action":"remove","lines":["infraAccPortP_name"]},{"start":{"row":2044,"column":39},"end":{"row":2044,"column":54},"action":"insert","lines":["infraNodeP_name"]},{"start":{"row":2056,"column":5},"end":{"row":2074,"column":105},"action":"remove","lines":["ith open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        leaf_resource_line = f'resource \"aci_leaf_profile\" \"profile_{entry[\"infraNodeP_name\"]}\"'","        interface_resource_line = f'resource \"aci_leaf_interface_profile\" \"profile_{entry[\"infraRsAccPortP_name\"]}\"'","","        if leaf_resource_line not in existing_content and interface_resource_line not in existing_content:","            new_terraform_content += terraform_template.render(entry)","        else:","            print(f\"Resource {leaf_resource_line} or {interface_resource_line} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for fabric switch interface profiles appended to import.tf successfully!\")"]},{"start":{"row":2056,"column":4},"end":{"row":2056,"column":5},"action":"remove","lines":["w"]},{"start":{"row":2056,"column":0},"end":{"row":2056,"column":4},"action":"remove","lines":["    "]},{"start":{"row":2055,"column":0},"end":{"row":2056,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2054,"column":109},"end":{"row":2055,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2054,"column":109},"end":{"row":2055,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2054,"column":53},"end":{"row":2054,"column":62},"action":"remove","lines":["Interface"]},{"start":{"row":2054,"column":53},"end":{"row":2054,"column":54},"action":"insert","lines":["S"]},{"start":{"row":2054,"column":54},"end":{"row":2054,"column":55},"action":"insert","lines":["w"]},{"start":{"row":2054,"column":55},"end":{"row":2054,"column":56},"action":"insert","lines":["i"]},{"start":{"row":2054,"column":56},"end":{"row":2054,"column":57},"action":"insert","lines":["t"]},{"start":{"row":2054,"column":57},"end":{"row":2054,"column":58},"action":"insert","lines":["c"]},{"start":{"row":2054,"column":58},"end":{"row":2054,"column":59},"action":"insert","lines":["h"]},{"start":{"row":2073,"column":0},"end":{"row":2073,"column":100},"action":"remove","lines":["        specific_command_interface = f'aci_leaf_interface_profile.\"{entry[\"infraRsAccPortP_name\"]}\"'"]},{"start":{"row":2072,"column":25},"end":{"row":2073,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2074,"column":11},"end":{"row":2074,"column":65},"action":"remove","lines":["specific_command_interface not in existing_content or "]},{"start":{"row":2078,"column":32},"end":{"row":2078,"column":64},"action":"remove","lines":["{specific_command_interface} or "]},{"start":{"row":2084,"column":31},"end":{"row":2084,"column":63},"action":"remove","lines":["fabric switch interface profiles"]},{"start":{"row":2084,"column":31},"end":{"row":2084,"column":64},"action":"insert","lines":["ACI Fabric Access Switch Profiles"]},{"start":{"row":2108,"column":0},"end":{"row":2108,"column":1},"action":"remove","lines":["#"]},{"start":{"row":2127,"column":0},"end":{"row":2127,"column":1},"action":"remove","lines":["#"]},{"start":{"row":2156,"column":0},"end":{"row":2156,"column":1},"action":"remove","lines":["#"]},{"start":{"row":2157,"column":0},"end":{"row":2157,"column":1},"action":"remove","lines":["#"]},{"start":{"row":2041,"column":29},"end":{"row":2041,"column":30},"action":"remove","lines":[" "]},{"start":{"row":2041,"column":28},"end":{"row":2041,"column":29},"action":"remove","lines":["="]},{"start":{"row":2017,"column":29},"end":{"row":2017,"column":37},"action":"remove","lines":["profile_"]},{"start":{"row":2017,"column":29},"end":{"row":2017,"column":30},"action":"insert","lines":["t"]},{"start":{"row":2017,"column":30},"end":{"row":2017,"column":31},"action":"insert","lines":["f"]},{"start":{"row":2017,"column":31},"end":{"row":2017,"column":32},"action":"insert","lines":["_"]},{"start":{"row":1867,"column":39},"end":{"row":1867,"column":42},"action":"insert","lines":["tf_"]},{"start":{"row":2028,"column":63},"end":{"row":2028,"column":71},"action":"remove","lines":["profile_"]},{"start":{"row":2028,"column":63},"end":{"row":2028,"column":66},"action":"insert","lines":["tf_"]},{"start":{"row":2041,"column":59},"end":{"row":2041,"column":67},"action":"remove","lines":["profile_"]},{"start":{"row":2041,"column":59},"end":{"row":2041,"column":62},"action":"insert","lines":["tf_"]},{"start":{"row":2063,"column":34},"end":{"row":2063,"column":37},"action":"insert","lines":["tf_"]},{"start":{"row":1881,"column":69},"end":{"row":1881,"column":72},"action":"insert","lines":["tf_"]},{"start":{"row":1903,"column":44},"end":{"row":1903,"column":47},"action":"insert","lines":["tf_"]},{"start":{"row":1934,"column":11},"end":{"row":1934,"column":12},"action":"insert","lines":["a"]},{"start":{"row":1934,"column":12},"end":{"row":1934,"column":13},"action":"insert","lines":["c"]},{"start":{"row":1934,"column":13},"end":{"row":1934,"column":14},"action":"insert","lines":["e"]},{"start":{"row":1934,"column":14},"end":{"row":1934,"column":15},"action":"insert","lines":["s"]},{"start":{"row":1934,"column":15},"end":{"row":1934,"column":16},"action":"insert","lines":["s"]},{"start":{"row":1934,"column":16},"end":{"row":1934,"column":17},"action":"insert","lines":["_"]},{"start":{"row":1934,"column":23},"end":{"row":1934,"column":33},"action":"remove","lines":["_interface"]},{"start":{"row":1934,"column":32},"end":{"row":1934,"column":33},"action":"insert","lines":["_"]},{"start":{"row":1934,"column":33},"end":{"row":1934,"column":34},"action":"insert","lines":["f"]},{"start":{"row":1934,"column":34},"end":{"row":1934,"column":35},"action":"insert","lines":["i"]},{"start":{"row":1934,"column":35},"end":{"row":1934,"column":36},"action":"insert","lines":["l"]},{"start":{"row":1934,"column":36},"end":{"row":1934,"column":37},"action":"insert","lines":["e"]},{"start":{"row":1953,"column":8},"end":{"row":1953,"column":40},"action":"remove","lines":["fabric_switch_interface_profiles"]},{"start":{"row":1953,"column":8},"end":{"row":1953,"column":36},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2010,"column":23},"end":{"row":2010,"column":55},"action":"remove","lines":["fabric_switch_interface_profiles"]},{"start":{"row":2010,"column":23},"end":{"row":2010,"column":51},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2056,"column":23},"end":{"row":2056,"column":64},"action":"remove","lines":["fabric_switch_interface_profiles_commands"]},{"start":{"row":2056,"column":23},"end":{"row":2056,"column":51},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2108,"column":0},"end":{"row":2108,"column":32},"action":"remove","lines":["fabric_switch_interface_profiles"]},{"start":{"row":2108,"column":0},"end":{"row":2108,"column":28},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2108,"column":28},"end":{"row":2108,"column":29},"action":"insert","lines":["_"]},{"start":{"row":2108,"column":29},"end":{"row":2108,"column":30},"action":"insert","lines":["f"]},{"start":{"row":2108,"column":30},"end":{"row":2108,"column":31},"action":"insert","lines":["i"]},{"start":{"row":2108,"column":31},"end":{"row":2108,"column":32},"action":"insert","lines":["l"]},{"start":{"row":2108,"column":32},"end":{"row":2108,"column":33},"action":"insert","lines":["e"]},{"start":{"row":2127,"column":4},"end":{"row":2127,"column":35},"action":"remove","lines":["fabric_switch_interface_profile"]},{"start":{"row":2127,"column":4},"end":{"row":2127,"column":32},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2127,"column":32},"end":{"row":2127,"column":33},"action":"remove","lines":["s"]},{"start":{"row":2156,"column":19},"end":{"row":2156,"column":51},"action":"remove","lines":["fabric_switch_interface_profiles"]},{"start":{"row":2156,"column":19},"end":{"row":2156,"column":47},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2157,"column":19},"end":{"row":2157,"column":60},"action":"remove","lines":["fabric_switch_interface_profiles_commands"]},{"start":{"row":2157,"column":19},"end":{"row":2157,"column":47},"action":"insert","lines":["fabric_acess_switch_profiles"]},{"start":{"row":2157,"column":47},"end":{"row":2157,"column":48},"action":"insert","lines":["_"]},{"start":{"row":2157,"column":48},"end":{"row":2157,"column":49},"action":"insert","lines":["c"]},{"start":{"row":2157,"column":49},"end":{"row":2157,"column":50},"action":"insert","lines":["o"]},{"start":{"row":2157,"column":50},"end":{"row":2157,"column":51},"action":"insert","lines":["m"]},{"start":{"row":2157,"column":51},"end":{"row":2157,"column":52},"action":"insert","lines":["m"]},{"start":{"row":2157,"column":52},"end":{"row":2157,"column":53},"action":"insert","lines":["a"]},{"start":{"row":2157,"column":53},"end":{"row":2157,"column":54},"action":"insert","lines":["n"]},{"start":{"row":2157,"column":54},"end":{"row":2157,"column":55},"action":"insert","lines":["d"]},{"start":{"row":2157,"column":55},"end":{"row":2157,"column":56},"action":"insert","lines":["s"]},{"start":{"row":2056,"column":51},"end":{"row":2056,"column":52},"action":"insert","lines":["_"]},{"start":{"row":2056,"column":52},"end":{"row":2056,"column":53},"action":"insert","lines":["c"]},{"start":{"row":2056,"column":53},"end":{"row":2056,"column":54},"action":"insert","lines":["o"]},{"start":{"row":2056,"column":54},"end":{"row":2056,"column":55},"action":"insert","lines":["m"]},{"start":{"row":2056,"column":55},"end":{"row":2056,"column":56},"action":"insert","lines":["m"]},{"start":{"row":2056,"column":56},"end":{"row":2056,"column":57},"action":"insert","lines":["a"]},{"start":{"row":2056,"column":57},"end":{"row":2056,"column":58},"action":"insert","lines":["n"]},{"start":{"row":2056,"column":58},"end":{"row":2056,"column":59},"action":"insert","lines":["d"]},{"start":{"row":2056,"column":59},"end":{"row":2056,"column":60},"action":"insert","lines":["s"]},{"start":{"row":2157,"column":0},"end":{"row":2157,"column":58},"action":"remove","lines":["tf_ciscodevnet_aci_fabric_acess_switch_profiles_commands()"]},{"start":{"row":2157,"column":0},"end":{"row":2157,"column":56},"action":"insert","lines":["tf_ciscodevnet_aci_fabric_acess_switch_profiles_commands"]},{"start":{"row":2157,"column":56},"end":{"row":2157,"column":58},"action":"insert","lines":["()"]},{"start":{"row":2157,"column":28},"end":{"row":2157,"column":29},"action":"insert","lines":["C"]},{"start":{"row":2157,"column":29},"end":{"row":2157,"column":30},"action":"insert","lines":["="]},{"start":{"row":2157,"column":29},"end":{"row":2157,"column":30},"action":"remove","lines":["="]},{"start":{"row":2157,"column":28},"end":{"row":2157,"column":29},"action":"remove","lines":["C"]},{"start":{"row":2157,"column":28},"end":{"row":2157,"column":29},"action":"insert","lines":["c"]},{"start":{"row":2156,"column":28},"end":{"row":2156,"column":29},"action":"insert","lines":["c"]},{"start":{"row":2127,"column":13},"end":{"row":2127,"column":14},"action":"insert","lines":["c"]},{"start":{"row":2108,"column":9},"end":{"row":2108,"column":10},"action":"insert","lines":["c"]},{"start":{"row":2056,"column":31},"end":{"row":2056,"column":32},"action":"insert","lines":["c"]},{"start":{"row":2010,"column":31},"end":{"row":2010,"column":32},"action":"insert","lines":["c"]},{"start":{"row":1953,"column":17},"end":{"row":1953,"column":18},"action":"insert","lines":["c"]},{"start":{"row":1934,"column":13},"end":{"row":1934,"column":14},"action":"insert","lines":["c"]},{"start":{"row":1930,"column":36},"end":{"row":1930,"column":49},"action":"remove","lines":["and Interface"]},{"start":{"row":1929,"column":46},"end":{"row":1929,"column":64},"action":"remove","lines":["##################"]},{"start":{"row":1930,"column":36},"end":{"row":1930,"column":37},"action":"remove","lines":[" "]},{"start":{"row":1929,"column":46},"end":{"row":1929,"column":47},"action":"insert","lines":["#"]},{"start":{"row":1929,"column":47},"end":{"row":1929,"column":48},"action":"insert","lines":["#"]},{"start":{"row":1929,"column":48},"end":{"row":1929,"column":49},"action":"insert","lines":["#"]},{"start":{"row":1929,"column":49},"end":{"row":1929,"column":50},"action":"insert","lines":["#"]},{"start":{"row":1931,"column":63},"end":{"row":1931,"column":64},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":62},"end":{"row":1931,"column":63},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":61},"end":{"row":1931,"column":62},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":60},"end":{"row":1931,"column":61},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":59},"end":{"row":1931,"column":60},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":58},"end":{"row":1931,"column":59},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":57},"end":{"row":1931,"column":58},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":56},"end":{"row":1931,"column":57},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":55},"end":{"row":1931,"column":56},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":54},"end":{"row":1931,"column":55},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":53},"end":{"row":1931,"column":54},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":52},"end":{"row":1931,"column":53},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":51},"end":{"row":1931,"column":52},"action":"remove","lines":["#"]},{"start":{"row":1931,"column":50},"end":{"row":1931,"column":51},"action":"remove","lines":["#"]},{"start":{"row":1932,"column":0},"end":{"row":1933,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2009,"column":0},"end":{"row":2053,"column":106},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_profile\" \"tf_{{ infraNodeP_name }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = [aci_leaf_interface_profile.tf_{{ infraRsAccPortP_name }}.id]","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        specific_resource = f'resource \"aci_leaf_profile\" \"tf_{entry[\"infraNodeP_name\"]}\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraNodeP_name=entry['infraNodeP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for ACI Fabric Access Switch Profiles appended to import.tf successfully!\")"]},{"start":{"row":2009,"column":0},"end":{"row":2059,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles():","    csv_filepath = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_leaf_profile\" \"tf_{{ infraNodeP_name | replace('-', '_') }}\" {","    name = \"{{ infraNodeP_name }}\"","    leaf_selector {","        name = \"{{ infraLeafS_name }}\"","        switch_association_type = \"range\"","        node_block {","            name = \"blk1\"","            from_ = \"{{ infraNodeBlk_from }}\"","            to_ = \"{{ infraNodeBlk_to }}\"","        }","    }","    relation_infra_rs_acc_port_p = [aci_leaf_interface_profile.tf_{{ infraRsAccPortP_name | replace('-', '_') }}.id]","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","    for entry in entries:","        infraNodeP_name_sanitized = entry['infraNodeP_name'].replace('-', '_')","        specific_resource = f'resource \"aci_leaf_profile\" \"tf_{infraNodeP_name_sanitized}\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraNodeP_name=infraNodeP_name_sanitized,","                infraLeafS_name=entry['infraLeafS_name'],","                infraNodeBlk_from=entry['infraNodeBlk_from'],","                infraNodeBlk_to=entry['infraNodeBlk_to'],","                infraRsAccPortP_name=entry['infraRsAccPortP_name'].replace('-', '_')","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for ACI Fabric Access Switch Profiles appended to import.tf successfully!\")",""]},{"start":{"row":2058,"column":106},"end":{"row":2059,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2060,"column":0},"end":{"row":2088,"column":96},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_profile.tf_{{ infraNodeP_name }} {{ infraNodeP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command_leaf = f'aci_leaf_profile.\"{entry[\"infraNodeP_name\"]}\"'","        if specific_command_leaf not in existing_content:","            terraform_command = command_template.render(entry)","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_leaf} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for ACI Fabric Access Switch Profiles appended to import_commands.txt"]},{"start":{"row":2060,"column":0},"end":{"row":2090,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_profile.tf_{{ infraNodeP_name | replace('-', '_') }} {{ infraNodeP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        infraNodeP_name_sanitized = entry['infraNodeP_name'].replace('-', '_')","        specific_command_leaf = f'aci_leaf_profile.\"tf_{infraNodeP_name_sanitized}\"'","        if specific_command_leaf not in existing_content:","            terraform_command = command_template.render(infraNodeP_name=infraNodeP_name_sanitized, infraNodeP_dn=entry['infraNodeP_dn'])","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_leaf} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for ACI Fabric Access Switch Profiles appended to import_commands.txt successfully!\")",""]}],[{"start":{"row":2060,"column":0},"end":{"row":2090,"column":18},"action":"remove","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_profile.tf_{{ infraNodeP_name | replace('-', '_') }} {{ infraNodeP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        infraNodeP_name_sanitized = entry['infraNodeP_name'].replace('-', '_')","        specific_command_leaf = f'aci_leaf_profile.\"tf_{infraNodeP_name_sanitized}\"'","        if specific_command_leaf not in existing_content:","            terraform_command = command_template.render(infraNodeP_name=infraNodeP_name_sanitized, infraNodeP_dn=entry['infraNodeP_dn'])","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_leaf} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for ACI Fabric Access Switch Profiles appended to import_commands.txt successfully!\")"," successfully!\")  "],"id":465},{"start":{"row":2060,"column":0},"end":{"row":2090,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_fabric_access_switch_profiles_commands():","    csv_filepath = os.path.join('data', 'py_fabric_switch_interface_profiles.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_profile.tf_{{ infraNodeP_name | replace('-', '_') }} {{ infraNodeP_dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        infraNodeP_name_sanitized = entry['infraNodeP_name'].replace('-', '_')","        specific_command_leaf = f'aci_leaf_profile.\"tf_{infraNodeP_name_sanitized}\"'","        if specific_command_leaf not in existing_content:","            terraform_command = command_template.render(infraNodeP_name=infraNodeP_name_sanitized, infraNodeP_dn=entry['infraNodeP_dn'])","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command_leaf} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for ACI Fabric Access Switch Profiles appended to import_commands.txt successfully!\")",""]},{"start":{"row":2089,"column":112},"end":{"row":2090,"column":31},"action":"remove","lines":["","                               "]},{"start":{"row":1952,"column":0},"end":{"row":2007,"column":41},"action":"remove","lines":["def get_fabric_access_switch_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","    ","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')  # Corrected here","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","    ","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","    ","                                    row_as_list = [","                                        ACI_BASE_URL,","                                        infraNodeP_dn, infraNodeP_name, ","                                        infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                        infraLeafS_name, infraLeafS_name,  ","                                        infraNodeBlk_from, infraNodeBlk_to","                                    ]","    ","                                    if row_as_list not in existing_entries:","                                        writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch interface profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)"]},{"start":{"row":1952,"column":0},"end":{"row":2012,"column":0},"action":"insert","lines":["def get_fabric_access_switch_profiles(token):","    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_switch_interface_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","","                    infraRsAccPortP_name = None","                    infraRsAccPortP_tDn = None","","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","","                                    if infraRsAccPortP_name and infraRsAccPortP_tDn:  # Ensure these variables are set before using","                                        row_as_list = [","                                            ACI_BASE_URL,","                                            infraNodeP_dn, infraNodeP_name, ","                                            infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                            infraLeafS_name, infraLeafS_name,  ","                                            infraNodeBlk_from, infraNodeBlk_to","                                        ]","","                                        if row_as_list not in existing_entries:","                                            writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch interface profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)",""]},{"start":{"row":1935,"column":40},"end":{"row":1935,"column":75},"action":"remove","lines":["py_fabric_switch_interface_profiles"]},{"start":{"row":1935,"column":40},"end":{"row":1935,"column":72},"action":"insert","lines":["py_fabric_access_switch_profiles"]},{"start":{"row":1962,"column":37},"end":{"row":1962,"column":72},"action":"remove","lines":["py_fabric_switch_interface_profiles"]},{"start":{"row":1962,"column":37},"end":{"row":1962,"column":69},"action":"insert","lines":["py_fabric_access_switch_profiles"]},{"start":{"row":2015,"column":41},"end":{"row":2015,"column":76},"action":"remove","lines":["py_fabric_switch_interface_profiles"]},{"start":{"row":2015,"column":41},"end":{"row":2015,"column":73},"action":"insert","lines":["py_fabric_access_switch_profiles"]},{"start":{"row":2066,"column":41},"end":{"row":2066,"column":76},"action":"remove","lines":["py_fabric_switch_interface_profiles"]},{"start":{"row":2066,"column":41},"end":{"row":2066,"column":73},"action":"insert","lines":["py_fabric_access_switch_profiles"]},{"start":{"row":2010,"column":49},"end":{"row":2010,"column":59},"action":"remove","lines":["interface "]},{"start":{"row":1998,"column":86},"end":{"row":1998,"column":131},"action":"remove","lines":["# Ensure these variables are set before using"]},{"start":{"row":1998,"column":85},"end":{"row":1998,"column":86},"action":"remove","lines":[" "]},{"start":{"row":1998,"column":84},"end":{"row":1998,"column":85},"action":"remove","lines":[" "]},{"start":{"row":1953,"column":0},"end":{"row":1953,"column":69},"action":"remove","lines":["    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')"]},{"start":{"row":1952,"column":45},"end":{"row":1953,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1829,"column":0},"end":{"row":1829,"column":69},"action":"remove","lines":["    ACI_BASE_URL = os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS')"]},{"start":{"row":1828,"column":53},"end":{"row":1829,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1932,"column":0},"end":{"row":1949,"column":78},"action":"remove","lines":["def fabric_access_switch_profiles_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_fabric_access_switch_profiles.csv\")","    headers = [","        \"APIC\",\"infraNodeP_dn\", \"infraNodeP_name\", ","        \"infraRsAccPortP_name\", \"infraRsAccPortP_tDn\",","        \"infraLeafS_name\", \"infraLeafS_name\",  ","        \"infraNodeBlk_from\", \"infraNodeBlk_to\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")"]},{"start":{"row":1932,"column":0},"end":{"row":1950,"column":0},"action":"insert","lines":["def fabric_access_switch_profiles_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_fabric_access_switch_profiles.csv\")","    headers = [","        'APIC', 'infraNodeP_dn', 'infraNodeP_name', ","        'infraRsAccPortP_name', 'infraRsAccPortP_tDn',","        'infraLeafS_name', 'infraLeafS_name',  ","        'infraNodeBlk_from', 'infraNodeBlk_to'","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")",""]},{"start":{"row":1949,"column":78},"end":{"row":1950,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1951,"column":0},"end":{"row":2009,"column":41},"action":"remove","lines":["def get_fabric_access_switch_profiles(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_switch_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","","                    infraRsAccPortP_name = None","                    infraRsAccPortP_tDn = None","","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","","                        if \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","","                                    if infraRsAccPortP_name and infraRsAccPortP_tDn:","                                        row_as_list = [","                                            ACI_BASE_URL,","                                            infraNodeP_dn, infraNodeP_name, ","                                            infraRsAccPortP_name, infraRsAccPortP_tDn, ","                                            infraLeafS_name, infraLeafS_name,  ","                                            infraNodeBlk_from, infraNodeBlk_to","                                        ]","","                                        if row_as_list not in existing_entries:","                                            writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)"]},{"start":{"row":1951,"column":0},"end":{"row":2010,"column":0},"action":"insert","lines":["def get_fabric_access_switch_profiles(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_switch_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            existing_entries = [row for row in csv.reader(file)]","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","                    infraLeafS_name = None","                    infraNodeBlk_from = None","                    infraNodeBlk_to = None","","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","                        elif \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","","                    # Prepare row data","                    row_as_list = [","                        ACI_BASE_URL,","                        infraNodeP_dn, infraNodeP_name,","                        infraRsAccPortP_name, infraRsAccPortP_tDn,","                        infraLeafS_name, infraLeafS_name,","                        infraNodeBlk_from, infraNodeBlk_to","                    ]","","                    # Check for missing data and fill with a placeholder if needed","                    row_as_list = [item if item is not None else 'N/A' for item in row_as_list]","","                    if row_as_list not in existing_entries:","                        writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)",""]},{"start":{"row":2011,"column":0},"end":{"row":2012,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2010,"column":0},"end":{"row":2011,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1951,"column":0},"end":{"row":2009,"column":41},"action":"remove","lines":["def get_fabric_access_switch_profiles(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_switch_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            existing_entries = [row for row in csv.reader(file)]","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","                    infraLeafS_name = None","                    infraNodeBlk_from = None","                    infraNodeBlk_to = None","","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","                        elif \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","","                    # Prepare row data","                    row_as_list = [","                        ACI_BASE_URL,","                        infraNodeP_dn, infraNodeP_name,","                        infraRsAccPortP_name, infraRsAccPortP_tDn,","                        infraLeafS_name, infraLeafS_name,","                        infraNodeBlk_from, infraNodeBlk_to","                    ]","","                    # Check for missing data and fill with a placeholder if needed","                    row_as_list = [item if item is not None else 'N/A' for item in row_as_list]","","                    if row_as_list not in existing_entries:","                        writer.writerow(row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)"]},{"start":{"row":1951,"column":0},"end":{"row":2019,"column":0},"action":"insert","lines":["def get_fabric_access_switch_profiles(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraNodeP&query-target-filter=not(wcard(infraNodeP.dn,%22__ui_%22))&rsp-subtree=full&rsp-subtree-class=infraLeafS,infraRsAccPortP,infraRsAccCardP,infraNodeBlk,infraRsAccNodePGrp\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_fabric_access_switch_profiles.csv\")","","    if response.status_code == 200:","        data = response.json()","","        with open(filename, 'a+', newline='') as file:","            writer = csv.writer(file)","            file.seek(0)","            existing_entries = [row for row in csv.reader(file)]","","            for entry in data['imdata']:","                if \"infraNodeP\" in entry:","                    nodeP = entry[\"infraNodeP\"]","                    infraNodeP_dn = nodeP[\"attributes\"][\"dn\"]","                    infraNodeP_name = nodeP[\"attributes\"][\"name\"]","","                    infraRsAccPortP_name = None","                    infraRsAccPortP_tDn = None","                    infraLeafS_name = None","                    infraNodeBlk_from = None","                    infraNodeBlk_to = None","","                    for child in nodeP.get(\"children\", []):","                        if \"infraRsAccPortP\" in child:","                            rsAccPortP = child[\"infraRsAccPortP\"][\"attributes\"]","                            infraRsAccPortP_name = rsAccPortP[\"rn\"].split('-')[-1].rstrip(']')","                            infraRsAccPortP_tDn = rsAccPortP[\"tDn\"]","                        elif \"infraLeafS\" in child:","                            leafS = child[\"infraLeafS\"]","                            infraLeafS_name = leafS[\"attributes\"][\"name\"]","                            for leaf_child in leafS.get(\"children\", []):","                                if \"infraNodeBlk\" in leaf_child:","                                    nodeBlk = leaf_child[\"infraNodeBlk\"][\"attributes\"]","                                    infraNodeBlk_from = nodeBlk[\"from_\"]","                                    infraNodeBlk_to = nodeBlk[\"to_\"]","","                    # Prepare row data","                    row_as_list = [","                        ACI_BASE_URL,","                        infraNodeP_dn, infraNodeP_name,","                        infraRsAccPortP_name, infraRsAccPortP_tDn,","                        infraLeafS_name, infraLeafS_name,","                        infraNodeBlk_from, infraNodeBlk_to","                    ]","","                    # Debugging: Print out the row data","                    print(\"Row data:\", row_as_list)","","                    # Check for missing data and fill with a placeholder if needed","                    row_as_list = [item if item is not None else 'N/A' for item in row_as_list]","","                    if row_as_list not in existing_entries:","                        writer.writerow(row_as_list)","                        print(\"Row written to CSV:\", row_as_list)","                    else:","                        print(\"Row already in CSV:\", row_as_list)","    else:","        print(f\"Failed to retrieve fabric switch profiles. Status code: {response.status_code}\")","        print(\"Response:\", response.text)",""]},{"start":{"row":1996,"column":20},"end":{"row":1996,"column":38},"action":"remove","lines":["# Prepare row data"]},{"start":{"row":1996,"column":16},"end":{"row":1996,"column":20},"action":"remove","lines":["    "]},{"start":{"row":1996,"column":12},"end":{"row":1996,"column":16},"action":"remove","lines":["    "]},{"start":{"row":1996,"column":8},"end":{"row":1996,"column":12},"action":"remove","lines":["    "]},{"start":{"row":1996,"column":4},"end":{"row":1996,"column":8},"action":"remove","lines":["    "]},{"start":{"row":1996,"column":0},"end":{"row":1996,"column":4},"action":"remove","lines":["    "]},{"start":{"row":1995,"column":0},"end":{"row":1996,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1994,"column":68},"end":{"row":1995,"column":0},"action":"remove","lines":["",""]},{"start":{"row":1994,"column":68},"end":{"row":1995,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1995,"column":0},"end":{"row":1995,"column":36},"action":"insert","lines":["                                    "]},{"start":{"row":2003,"column":0},"end":{"row":2005,"column":51},"action":"remove","lines":["","                    # Debugging: Print out the row data","                    print(\"Row data:\", row_as_list)"]},{"start":{"row":2002,"column":21},"end":{"row":2003,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":2004,"column":20},"end":{"row":2004,"column":82},"action":"remove","lines":["# Check for missing data and fill with a placeholder if needed"],"id":466},{"start":{"row":2004,"column":16},"end":{"row":2004,"column":20},"action":"remove","lines":["    "]},{"start":{"row":2004,"column":12},"end":{"row":2004,"column":16},"action":"remove","lines":["    "]},{"start":{"row":2004,"column":8},"end":{"row":2004,"column":12},"action":"remove","lines":["    "]},{"start":{"row":2004,"column":4},"end":{"row":2004,"column":8},"action":"remove","lines":["    "]},{"start":{"row":2004,"column":0},"end":{"row":2004,"column":4},"action":"remove","lines":["    "]},{"start":{"row":2003,"column":0},"end":{"row":2004,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2118,"column":0},"end":{"row":2118,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2117,"column":16},"end":{"row":2118,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2106,"column":0},"end":{"row":2106,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2105,"column":24},"end":{"row":2106,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2124,"column":0},"end":{"row":2124,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2123,"column":23},"end":{"row":2124,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2134,"column":0},"end":{"row":2134,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2133,"column":30},"end":{"row":2134,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2137,"column":0},"end":{"row":2137,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2136,"column":0},"end":{"row":2137,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2138,"column":0},"end":{"row":2138,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2141,"column":0},"end":{"row":2141,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2160,"column":0},"end":{"row":2160,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2159,"column":39},"end":{"row":2160,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2164,"column":0},"end":{"row":2164,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2163,"column":59},"end":{"row":2164,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2168,"column":0},"end":{"row":2168,"column":3},"action":"remove","lines":["\"\"\""]},{"start":{"row":2167,"column":49},"end":{"row":2168,"column":0},"action":"remove","lines":["",""]},{"start":{"row":2163,"column":59},"end":{"row":2164,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2133,"column":0},"end":{"row":2133,"column":30},"action":"remove","lines":["get_aaep_to_l3outdomain(token)"]},{"start":{"row":2137,"column":29},"end":{"row":2138,"column":0},"action":"insert","lines":["",""]},{"start":{"row":2138,"column":0},"end":{"row":2138,"column":30},"action":"insert","lines":["get_aaep_to_l3outdomain(token)"]},{"start":{"row":2132,"column":20},"end":{"row":2133,"column":0},"action":"remove","lines":["",""]}]]},"ace":{"folds":[],"scrolltop":28933,"scrollleft":0,"selection":{"start":{"row":2073,"column":1},"end":{"row":2076,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1701732584140,"hash":"b03e2be0b82c1e77a489bd664ad2ca3b90ad3088"}