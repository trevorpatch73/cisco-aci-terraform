{"filter":false,"title":"main.py","tooltip":"/main.py","undoManager":{"mark":89,"position":89,"stack":[[{"start":{"row":1373,"column":99},"end":{"row":1374,"column":0},"action":"insert","lines":["",""],"id":2},{"start":{"row":1374,"column":0},"end":{"row":1374,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1374,"column":4},"end":{"row":1375,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1375,"column":0},"end":{"row":1375,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1375,"column":0},"end":{"row":1375,"column":4},"action":"remove","lines":["    "],"id":3}],[{"start":{"row":1375,"column":0},"end":{"row":1431,"column":0},"action":"insert","lines":["####################################################################","### ACI ACCESS POLICIES LEAF ACCESS BUNDLE POLICY GROUPS         ###","####################################################################","","def leaf_access_bundle_policy_group_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_leaf_access_bundle_policy_group.csv\")","    headers = [","        \"APIC\", \"infraAccBndlGrp_name\", \"infraAccBndlGrp_dn\"","    ]","","    if not os.path.exists(directory):","        os.makedirs(directory)","","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","","def get_leaf_access_bundle_policy_groups(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra/funcprof.json?query-target=subtree&target-subtree-class=infraAccBndlGrp\"","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_leaf_access_bundle_policy_group.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, mode='r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAccBndlGrp_name = entry[\"infraAccBndlGrp\"][\"attributes\"][\"name\"]","            infraAccBndlGrp_dn = entry[\"infraAccBndlGrp\"][\"attributes\"][\"dn\"]","","            row_as_list = [","                os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                infraAccBndlGrp_name,","                infraAccBndlGrp_dn","            ]","","            if row_as_list not in existing_entries[1:]:  # Skip the header when checking for existence","                existing_entries.append(row_as_list)","","        with open(filename, mode='w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve Bundle Policy Groups. Status code: {response.status_code}\")",""],"id":4}],[{"start":{"row":1431,"column":0},"end":{"row":1432,"column":0},"action":"insert","lines":["",""],"id":5}],[{"start":{"row":1432,"column":0},"end":{"row":1445,"column":4},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_bundle_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_bundle_policy_group.csv\")","    with open(csv_filepath, mode='r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_bundle_policy_group\" \"{{infraAccBndlGrp_name}}\" {","    name        = \"{{infraAccBndlGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")"],"id":6}],[{"start":{"row":1445,"column":4},"end":{"row":1446,"column":0},"action":"insert","lines":["",""],"id":7},{"start":{"row":1446,"column":0},"end":{"row":1447,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":1432,"column":0},"end":{"row":1445,"column":4},"action":"remove","lines":["def tf_ciscodevnet_aci_leaf_access_bundle_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_bundle_policy_group.csv\")","    with open(csv_filepath, mode='r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_bundle_policy_group\" \"{{infraAccBndlGrp_name}}\" {","    name        = \"{{infraAccBndlGrp_name}}\"","    lifecycle {","        ignore_changes = all","    }","} ","\"\"\")"],"id":9},{"start":{"row":1432,"column":0},"end":{"row":1467,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_bundle_policy_group():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_bundle_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_leaf_access_bundle_policy_group\" \"{{ infraAccBndlGrp_name }}\" {","  name        = \"{{ infraAccBndlGrp_name }}\"","  lifecycle {","    ignore_changes = all","  }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        specific_resource_line = f'resource \"aci_leaf_access_bundle_policy_group\" \"{entry[\"infraAccBndlGrp_name\"]}\"'","","        if specific_resource_line not in existing_content:","            new_hcl_content += hcl_template.render(","                infraAccBndlGrp_name=entry['infraAccBndlGrp_name']","            )","        else:","            print(f\"Entry {entry['infraAccBndlGrp_name']} already exists in import.tf\")","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)","","    print(\"Terraform resources for Leaf Access Bundle Policy Groups appended to import.tf successfully!\")",""]}],[{"start":{"row":1468,"column":0},"end":{"row":1498,"column":110},"action":"insert","lines":["def tf_ciscodevnet_aci_leaf_access_bundle_policy_group_commands():","    csv_filepath = os.path.join(\"data\", \"py_leaf_access_bundle_policy_group.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_leaf_access_bundle_policy_group.{{ infraAccBndlGrp_name }} {{ infraAccBndlGrp_dn }}","\"\"\")","","    with open('import_commands.sh', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        specific_command_line = f\"terraform import aci_leaf_access_bundle_policy_group.{entry['infraAccBndlGrp_name']}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                infraAccBndlGrp_name=entry['infraAccBndlGrp_name'],","                infraAccBndlGrp_dn=entry['infraAccBndlGrp_dn']","            )","        else:","            print(f\"Command for {entry['infraAccBndlGrp_name']} already exists in import_commands.sh\")","","    if new_commands_content:","        with open('import_commands.sh', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for Leaf Access Bundle Policy Groups appended to import_commands.sh successfully!\")"],"id":10}],[{"start":{"row":1495,"column":36},"end":{"row":1495,"column":37},"action":"remove","lines":["h"],"id":11},{"start":{"row":1495,"column":35},"end":{"row":1495,"column":36},"action":"remove","lines":["s"]}],[{"start":{"row":1495,"column":35},"end":{"row":1495,"column":36},"action":"insert","lines":["t"],"id":12},{"start":{"row":1495,"column":36},"end":{"row":1495,"column":37},"action":"insert","lines":["x"]},{"start":{"row":1495,"column":37},"end":{"row":1495,"column":38},"action":"insert","lines":["t"]}],[{"start":{"row":1478,"column":31},"end":{"row":1478,"column":33},"action":"remove","lines":["sh"],"id":13},{"start":{"row":1478,"column":31},"end":{"row":1478,"column":32},"action":"insert","lines":["t"]},{"start":{"row":1478,"column":32},"end":{"row":1478,"column":33},"action":"insert","lines":["x"]},{"start":{"row":1478,"column":33},"end":{"row":1478,"column":34},"action":"insert","lines":["t"]}],[{"start":{"row":1516,"column":36},"end":{"row":1517,"column":0},"action":"insert","lines":["",""],"id":14}],[{"start":{"row":1517,"column":0},"end":{"row":1517,"column":38},"action":"insert","lines":["leaf_access_bundle_policy_group_file()"],"id":15}],[{"start":{"row":1530,"column":41},"end":{"row":1531,"column":0},"action":"insert","lines":["",""],"id":16}],[{"start":{"row":1531,"column":0},"end":{"row":1531,"column":43},"action":"insert","lines":["get_leaf_access_bundle_policy_groups(token)"],"id":17}],[{"start":{"row":1550,"column":0},"end":{"row":1551,"column":61},"action":"insert","lines":["tf_ciscodevnet_aci_leaf_access_bundle_policy_group()","tf_ciscodevnet_aci_leaf_access_bundle_policy_group_commands()"],"id":18}],[{"start":{"row":1499,"column":0},"end":{"row":1500,"column":0},"action":"insert","lines":["",""],"id":19}],[{"start":{"row":1500,"column":0},"end":{"row":1502,"column":56},"action":"insert","lines":["########################################################","### ACI ACCESS POLICIES PHYSICAL DOMAIN              ###","########################################################"],"id":20}],[{"start":{"row":1501,"column":24},"end":{"row":1501,"column":32},"action":"remove","lines":["PHYSICAL"],"id":21},{"start":{"row":1501,"column":24},"end":{"row":1501,"column":25},"action":"insert","lines":["L"]},{"start":{"row":1501,"column":25},"end":{"row":1501,"column":26},"action":"insert","lines":["3"]},{"start":{"row":1501,"column":26},"end":{"row":1501,"column":27},"action":"insert","lines":["O"]},{"start":{"row":1501,"column":27},"end":{"row":1501,"column":28},"action":"insert","lines":["U"]},{"start":{"row":1501,"column":28},"end":{"row":1501,"column":29},"action":"insert","lines":["T"]}],[{"start":{"row":1501,"column":50},"end":{"row":1501,"column":51},"action":"insert","lines":[" "],"id":22},{"start":{"row":1501,"column":51},"end":{"row":1501,"column":52},"action":"insert","lines":[" "]},{"start":{"row":1501,"column":52},"end":{"row":1501,"column":53},"action":"insert","lines":[" "]}],[{"start":{"row":1502,"column":56},"end":{"row":1503,"column":0},"action":"insert","lines":["",""],"id":23},{"start":{"row":1503,"column":0},"end":{"row":1504,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":1504,"column":0},"end":{"row":1588,"column":84},"action":"insert","lines":["def l3_domain_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_l3_domain.csv\")","    headers = [","        \"APIC\", \"annotation\", \"childAction\", \"configIssues\", \"dn\",","        \"extMngdBy\", \"lcOwn\", \"modTs\", \"monPolDn\", \"name\", \"nameAlias\",","        \"ownerKey\", \"ownerTag\", \"status\", \"targetDscp\", \"uid\", \"userdom\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","    else:","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            current_headers = next(reader)","","        if set(headers) != set(current_headers):","            print(f\"'{filename}' does not have the correct headers. You may want to regenerate it.\")","            with open(filename, 'w', newline='') as file:","                writer = csv.writer(file)","                writer.writerow(headers)","            print(f\"'{filename}' has been recreated with the required headers.\")","","def get_l3_domain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni.json?query-target=subtree&target-subtree-class=l3extDomP\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    ","    if response.status_code == 403:","        print(\"Received a 403 error. Refreshing token...\")","        # You should implement the token refresh logic here","        token = get_aci_token()","        headers[\"Cookie\"] = f\"APIC-Cookie={token}\"","        response = requests.get(URL, headers=headers, verify=False)","","    filename = os.path.join(\"data\", \"py_l3_domain.csv\")","","    if response.status_code == 200:","        data = response.json()","","        existing_entries = []","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            attributes = entry[\"l3extDomP\"][\"attributes\"]","            row_as_list = [","                os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                attributes.get(\"annotation\"),","                attributes.get(\"childAction\"),","                attributes.get(\"configIssues\"),","                attributes.get(\"dn\"),","                attributes.get(\"extMngdBy\"),","                attributes.get(\"lcOwn\"),","                attributes.get(\"modTs\"),","                attributes.get(\"monPolDn\"),","                attributes.get(\"name\"),","                attributes.get(\"nameAlias\"),","                attributes.get(\"ownerKey\"),","                attributes.get(\"ownerTag\"),","                attributes.get(\"status\"),","                attributes.get(\"targetDscp\"),","                attributes.get(\"uid\"),","                attributes.get(\"userdom\"),","            ]","            if row_as_list not in existing_entries:","                existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve L3 domains. Status code: {response.status_code}\")"],"id":24}],[{"start":{"row":1588,"column":84},"end":{"row":1589,"column":0},"action":"insert","lines":["",""],"id":25},{"start":{"row":1589,"column":0},"end":{"row":1589,"column":8},"action":"insert","lines":["        "]},{"start":{"row":1589,"column":8},"end":{"row":1590,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1590,"column":0},"end":{"row":1590,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":1608,"column":38},"end":{"row":1609,"column":0},"action":"insert","lines":["",""],"id":26}],[{"start":{"row":1609,"column":0},"end":{"row":1609,"column":16},"action":"insert","lines":["l3_domain_file()"],"id":27}],[{"start":{"row":1623,"column":43},"end":{"row":1624,"column":0},"action":"insert","lines":["",""],"id":28}],[{"start":{"row":1624,"column":0},"end":{"row":1624,"column":20},"action":"insert","lines":["get_l3_domain(token)"],"id":29}],[{"start":{"row":1619,"column":0},"end":{"row":1619,"column":29},"action":"remove","lines":["get_aaep_to_physdomain(token)"],"id":30}],[{"start":{"row":1625,"column":0},"end":{"row":1626,"column":0},"action":"insert","lines":["",""],"id":31}],[{"start":{"row":1626,"column":0},"end":{"row":1626,"column":29},"action":"insert","lines":["get_aaep_to_physdomain(token)"],"id":32}],[{"start":{"row":1626,"column":29},"end":{"row":1627,"column":0},"action":"insert","lines":["",""],"id":33}],[{"start":{"row":1618,"column":26},"end":{"row":1619,"column":0},"action":"remove","lines":["",""],"id":34}],[{"start":{"row":1636,"column":0},"end":{"row":1637,"column":48},"action":"remove","lines":["tf_ciscodevnet_aci_aaep_to_physdomain()","tf_ciscodevnet_aci_aaep_to_physdomain_commands()"],"id":35}],[{"start":{"row":1644,"column":61},"end":{"row":1645,"column":0},"action":"insert","lines":["",""],"id":36},{"start":{"row":1645,"column":0},"end":{"row":1646,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":1646,"column":0},"end":{"row":1647,"column":48},"action":"insert","lines":["tf_ciscodevnet_aci_aaep_to_physdomain()","tf_ciscodevnet_aci_aaep_to_physdomain_commands()"],"id":37}],[{"start":{"row":1644,"column":61},"end":{"row":1645,"column":0},"action":"insert","lines":["",""],"id":38}],[{"start":{"row":1624,"column":0},"end":{"row":1625,"column":0},"action":"insert","lines":["",""],"id":39}],[{"start":{"row":1636,"column":45},"end":{"row":1637,"column":0},"action":"remove","lines":["",""],"id":40}],[{"start":{"row":1590,"column":0},"end":{"row":1632,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_l3_domain():","    csv_filepath = os.path.join(\"data\", \"py_l3_domain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_l3_domain_profile\" \"{{ name }}\" {","    name  = \"{{ name }}\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('l3_domain.tf', 'w') as tf_file:","        for entry in entries:","            terraform_block = terraform_template.render(name=entry['name'])","            tf_file.write(terraform_block)","","    print(\"Terraform resources for aci_l3_domain_profile have been written to l3_domain.tf successfully!\")","","def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name }} {{ dn }}","\"\"\")","","    with open('l3_domain_import_commands.sh', 'w') as cmd_file:","        for entry in entries:","            terraform_command = command_template.render(","                name=entry['name'].replace(\" \", \"_\").lower(),  # Ensure the Terraform resource name is valid","                dn=entry['dn']","            )","            cmd_file.write(terraform_command)","","    print(\"Import commands for aci_l3_domain_profile have been written to l3_domain_import_commands.sh successfully!\")",""],"id":41}],[{"start":{"row":1590,"column":0},"end":{"row":1631,"column":118},"action":"remove","lines":["def tf_ciscodevnet_aci_l3_domain():","    csv_filepath = os.path.join(\"data\", \"py_l3_domain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_l3_domain_profile\" \"{{ name }}\" {","    name  = \"{{ name }}\"","","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('l3_domain.tf', 'w') as tf_file:","        for entry in entries:","            terraform_block = terraform_template.render(name=entry['name'])","            tf_file.write(terraform_block)","","    print(\"Terraform resources for aci_l3_domain_profile have been written to l3_domain.tf successfully!\")","","def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name }} {{ dn }}","\"\"\")","","    with open('l3_domain_import_commands.sh', 'w') as cmd_file:","        for entry in entries:","            terraform_command = command_template.render(","                name=entry['name'].replace(\" \", \"_\").lower(),  # Ensure the Terraform resource name is valid","                dn=entry['dn']","            )","            cmd_file.write(terraform_command)","","    print(\"Import commands for aci_l3_domain_profile have been written to l3_domain_import_commands.sh successfully!\")"],"id":45},{"start":{"row":1590,"column":0},"end":{"row":1623,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_l3_domain():","    csv_filepath = os.path.join(\"data\", \"py_l3_domain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    hcl_template = Template(\"\"\"","resource \"aci_l3_domain_profile\" \"{{ name }}\" {","    name  = \"{{ name }}\"","    lifecycle {","        ignore_changes = all","    }","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_hcl_content = \"\"","    for entry in entries:","        specific_resource_line = f'resource \"aci_l3_domain_profile\" \"{entry[\"name\"]}\"'","","        if specific_resource_line not in existing_content:","            new_hcl_content += hcl_template.render(name=entry['name'])","        else:","            print(f\"Entry {entry['name']} already exists in import.tf\")","","    if new_hcl_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_hcl_content)","","    print(\"Terraform resources for ACI L3 Domain Profiles appended to import.tf successfully!\")",""]}],[{"start":{"row":1678,"column":61},"end":{"row":1679,"column":0},"action":"insert","lines":["",""],"id":46}],[{"start":{"row":1679,"column":0},"end":{"row":1679,"column":30},"action":"insert","lines":["tf_ciscodevnet_aci_l3_domain()"],"id":47}],[{"start":{"row":1680,"column":0},"end":{"row":1680,"column":39},"action":"insert","lines":["tf_ciscodevnet_aci_l3_domain_commands()"],"id":48}],[{"start":{"row":1680,"column":39},"end":{"row":1681,"column":0},"action":"insert","lines":["",""],"id":49}],[{"start":{"row":1624,"column":4},"end":{"row":1624,"column":8},"action":"remove","lines":["    "],"id":50},{"start":{"row":1624,"column":0},"end":{"row":1624,"column":4},"action":"remove","lines":["    "]}],[{"start":{"row":1624,"column":0},"end":{"row":1625,"column":0},"action":"insert","lines":["",""],"id":51}],[{"start":{"row":1625,"column":0},"end":{"row":1656,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name }} {{ dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        specific_command_line = f\"terraform import aci_l3_domain_profile.{entry['name']}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                name=entry['name'].replace(\" \", \"_\").lower(),  # Ensure the Terraform resource name is valid","                dn=entry['dn']","            )","        else:","            print(f\"Command for {entry['name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for ACI L3 Domain Profiles appended to import_commands.txt successfully!\")",""],"id":52}],[{"start":{"row":1598,"column":24},"end":{"row":1599,"column":0},"action":"insert","lines":["",""],"id":53},{"start":{"row":1599,"column":0},"end":{"row":1599,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1626,"column":0},"end":{"row":1657,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name }} {{ dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        specific_command_line = f\"terraform import aci_l3_domain_profile.{entry['name']}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                name=entry['name'].replace(\" \", \"_\").lower(),  # Ensure the Terraform resource name is valid","                dn=entry['dn']","            )","        else:","            print(f\"Command for {entry['name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for ACI L3 Domain Profiles appended to import_commands.txt successfully!\")",""],"id":54},{"start":{"row":1626,"column":0},"end":{"row":1661,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name_sanitized }} {{ dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        # Create a sanitized name that is safe for Terraform resource naming (lowercase, underscores)","        # This is just for the logical name within Terraform, not the 'name' attribute of the resource.","        name_sanitized = entry['name'].replace(\" \", \"_\").lower()","","        specific_command_line = f\"terraform import aci_l3_domain_profile.{name_sanitized}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                name_sanitized=name_sanitized,","                dn=entry['dn']","            )","        else:","            print(f\"Command for {entry['name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for ACI L3 Domain Profiles appended to import_commands.txt successfully!\")",""]}],[{"start":{"row":1642,"column":0},"end":{"row":1643,"column":103},"action":"remove","lines":["        # Create a sanitized name that is safe for Terraform resource naming (lowercase, underscores)","        # This is just for the logical name within Terraform, not the 'name' attribute of the resource."],"id":55},{"start":{"row":1641,"column":25},"end":{"row":1642,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1626,"column":0},"end":{"row":1659,"column":0},"action":"remove","lines":["def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name_sanitized }} {{ dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        name_sanitized = entry['name'].replace(\" \", \"_\").lower()","","        specific_command_line = f\"terraform import aci_l3_domain_profile.{name_sanitized}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                name_sanitized=name_sanitized,","                dn=entry['dn']","            )","        else:","            print(f\"Command for {entry['name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for ACI L3 Domain Profiles appended to import_commands.txt successfully!\")",""],"id":56},{"start":{"row":1626,"column":0},"end":{"row":1660,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_l3_domain_commands():","    csv_filepath = os.path.join('data', 'py_l3_domain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_l3_domain_profile.{{ name }} {{ dn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands_content = \"\"","    for entry in entries:","        # Use the original name for the Terraform resource to match the HCL configuration","        name_resource = entry['name'].replace(\" \", \"_\")  # Replace spaces with underscores","","        specific_command_line = f\"terraform import aci_l3_domain_profile.{name_resource}\"","","        if specific_command_line not in existing_content:","            new_commands_content += command_template.render(","                name=name_resource,","                dn=entry['dn']","            )","        else:","            print(f\"Command for {entry['name']} already exists in import_commands.txt\")","","    if new_commands_content:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands_content)","","    print(\"Import commands for ACI L3 Domain Profiles appended to import_commands.txt successfully!\")",""]}],[{"start":{"row":1659,"column":101},"end":{"row":1660,"column":0},"action":"remove","lines":["",""],"id":57}],[{"start":{"row":1642,"column":0},"end":{"row":1642,"column":89},"action":"remove","lines":["        # Use the original name for the Terraform resource to match the HCL configuration"],"id":58},{"start":{"row":1641,"column":25},"end":{"row":1642,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1642,"column":55},"end":{"row":1642,"column":90},"action":"remove","lines":["  # Replace spaces with underscores"],"id":59}],[{"start":{"row":1623,"column":95},"end":{"row":1624,"column":0},"action":"remove","lines":["",""],"id":60}],[{"start":{"row":1658,"column":4},"end":{"row":1659,"column":0},"action":"insert","lines":["",""],"id":61},{"start":{"row":1659,"column":0},"end":{"row":1659,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1659,"column":0},"end":{"row":1659,"column":4},"action":"remove","lines":["    "],"id":62},{"start":{"row":1658,"column":4},"end":{"row":1659,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1658,"column":4},"end":{"row":1659,"column":0},"action":"insert","lines":["",""],"id":63},{"start":{"row":1659,"column":0},"end":{"row":1659,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1659,"column":0},"end":{"row":1796,"column":4},"action":"insert","lines":["########################################################","### ACI ACCESS POLICIES AAEP to L3OUT DOMAIN         ###","########################################################","","def aaep_to_l3outdomain_file():","    directory = \"data\"","    filename = os.path.join(directory, \"py_aaep_to_l3outdomain.csv\")","    headers = [","        \"APIC\",\"infraAttEntityP_name\", \"infraAttEntityP_dn\", ","        \"infraRsDomP_name\", \"infraRsDomP_rn\"","    ]","    ","    if not os.path.exists(directory):","        os.makedirs(directory)","    ","    if not os.path.exists(filename):","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerow(headers)","            print(f\"'{filename}' has been created with the required headers.\")","","def get_aaep_to_l3outdomain(token):","    URL = f\"{ACI_BASE_URL}/api/node/mo/uni/infra.json?query-target=children&target-subtree-class=infraAttEntityP&rsp-subtree=children&rsp-subtree-class=infraRsDomP&rsp-subtree-filter=eq(infraRsDomP.tCl,\\\"l3extDomP\\\")\"","    ","    headers = {","        \"Cookie\": f\"APIC-Cookie={token}\",","        \"Content-Type\": \"application/json\"","    }","    ","    response = requests.get(URL, headers=headers, verify=False)","    filename = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","","    if response.status_code == 200:","        data = response.json()","        existing_entries = []","","        with open(filename, 'r', newline='') as file:","            reader = csv.reader(file)","            existing_entries.extend(list(reader))","","        for entry in data['imdata']:","            infraAttEntityP_name = entry[\"infraAttEntityP\"][\"attributes\"][\"name\"]","            infraAttEntityP_dn = entry[\"infraAttEntityP\"][\"attributes\"][\"dn\"]","            children = entry[\"infraAttEntityP\"].get(\"children\", [])","            ","            if not any(\"infraRsDomP\" in child for child in children):","                continue","            ","            for child in children:","                if \"infraRsDomP\" in child:","                    infraRsDomP_name = child[\"infraRsDomP\"][\"attributes\"][\"tDn\"].split(\"/\")[-1]","                    infraRsDomP_rn = child[\"infraRsDomP\"][\"attributes\"][\"rn\"]","                    row_as_list = [","                        os.environ.get('TF_VAR_CISCO_ACI_APIC_IP_ADDRESS'),","                        infraAttEntityP_name,","                        infraAttEntityP_dn,","                        infraRsDomP_name,","                        infraRsDomP_rn","                    ]","                    if row_as_list not in existing_entries:","                        existing_entries.append(row_as_list)","","        with open(filename, 'w', newline='') as file:","            writer = csv.writer(file)","            writer.writerows(existing_entries)","    else:","        print(f\"Failed to retrieve AAEP to Domain mappings. Status code: {response.status_code}\")","","","def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_l3outdomain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_l3_domain_profile.{{infraRsDomP_name}}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_l3outdomain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")","    "],"id":64}],[{"start":{"row":1809,"column":25},"end":{"row":1810,"column":0},"action":"insert","lines":["",""],"id":65}],[{"start":{"row":1810,"column":0},"end":{"row":1810,"column":26},"action":"insert","lines":["aaep_to_l3outdomain_file()"],"id":66}],[{"start":{"row":1829,"column":20},"end":{"row":1830,"column":0},"action":"insert","lines":["",""],"id":67}],[{"start":{"row":1830,"column":0},"end":{"row":1830,"column":30},"action":"insert","lines":["get_aaep_to_l3outdomain(token)"],"id":68}],[{"start":{"row":1857,"column":48},"end":{"row":1858,"column":0},"action":"insert","lines":["",""],"id":69}],[{"start":{"row":1858,"column":0},"end":{"row":1858,"column":40},"action":"insert","lines":["tf_ciscodevnet_aci_aaep_to_l3outdomain()"],"id":70}],[{"start":{"row":1858,"column":40},"end":{"row":1859,"column":0},"action":"insert","lines":["",""],"id":71}],[{"start":{"row":1859,"column":0},"end":{"row":1859,"column":49},"action":"insert","lines":["tf_ciscodevnet_aci_aaep_to_l3outdomain_commands()"],"id":72}],[{"start":{"row":1728,"column":0},"end":{"row":1796,"column":8},"action":"remove","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_l3outdomain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_l3_domain_profile.{{infraRsDomP_name}}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_l3outdomain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")","        "],"id":73},{"start":{"row":1728,"column":0},"end":{"row":1756,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f\"aci_aaep_to_l3outdomain.{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")",""]}],[{"start":{"row":1756,"column":0},"end":{"row":1757,"column":0},"action":"insert","lines":["",""],"id":74}],[{"start":{"row":1757,"column":0},"end":{"row":1787,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f\"aci_aaep_to_l3outdomain.{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")",""],"id":75}],[{"start":{"row":1728,"column":0},"end":{"row":1786,"column":102},"action":"remove","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f\"aci_aaep_to_l3outdomain.{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f\"aci_aaep_to_l3outdomain.{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")"],"id":76},{"start":{"row":1728,"column":0},"end":{"row":1766,"column":94},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_l3outdomain\" \"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{ infraAttEntityP_name }}.id","    domain_dn                           = aci_l3_domain_profile.{{ infraRsDomP_name }}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f'aci_aaep_to_l3outdomain.\"{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")"]}],[{"start":{"row":1766,"column":94},"end":{"row":1767,"column":0},"action":"insert","lines":["",""],"id":77},{"start":{"row":1767,"column":0},"end":{"row":1767,"column":4},"action":"insert","lines":["    "]},{"start":{"row":1767,"column":4},"end":{"row":1768,"column":0},"action":"insert","lines":["",""]},{"start":{"row":1768,"column":0},"end":{"row":1768,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":1768,"column":0},"end":{"row":1802,"column":61},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_l3outdomain.\"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {{ infraAttEntityP_dn }}/{{ infraRsDomP_rn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f'aci_aaep_to_l3outdomain.\"{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"'","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")","These updated functions will now check for duplicates before "],"id":78}],[{"start":{"row":1728,"column":0},"end":{"row":1802,"column":62},"action":"remove","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_l3outdomain\" \"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{ infraAttEntityP_name }}.id","    domain_dn                           = aci_l3_domain_profile.{{ infraRsDomP_name }}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f'aci_aaep_to_l3outdomain.\"{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_l3outdomain, appended to import.tf successfully!\")","    ","def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_l3outdomain.\"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {{ infraAttEntityP_dn }}/{{ infraRsDomP_rn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f'aci_aaep_to_l3outdomain.\"{entry['infraAttEntityP_name']}-{entry['infraRsDomP_name']}-ASSOC\"'","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")","These updated functions will now check for duplicates before  "],"id":79},{"start":{"row":1728,"column":0},"end":{"row":1767,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_l3outdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_l3outdomain\" \"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{ infraAttEntityP_name }}.id","    domain_dn                           = aci_l3_domain_profile.{{ infraRsDomP_name }}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f'aci_aaep_to_l3outdomain.\"{entry[\"infraAttEntityP_name\"]}-{entry[\"infraRsDomP_name\"]}-ASSOC\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for aci_aaep_to_l3outdomain appended to import.tf successfully!\")",""]}],[{"start":{"row":1767,"column":0},"end":{"row":1768,"column":0},"action":"insert","lines":["",""],"id":80}],[{"start":{"row":1768,"column":0},"end":{"row":1802,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_l3outdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_l3outdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_l3outdomain.\"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {{ infraAttEntityP_dn }}/{{ infraRsDomP_rn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f'aci_aaep_to_l3outdomain.\"{entry[\"infraAttEntityP_name\"]}-{entry[\"infraRsDomP_name\"]}-ASSOC\"'","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_l3outdomain appended to import_commands.txt successfully!\")",""],"id":81}],[{"start":{"row":800,"column":0},"end":{"row":868,"column":4},"action":"remove","lines":["def tf_ciscodevnet_aci_aaep_to_physdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_physdomain\" \"{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{infraAttEntityP_name}}.id","    domain_dn                           = aci_physical_domain.{{infraRsDomP_name}}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        terraform_block = terraform_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name']","        )","        if terraform_block not in existing_content:","            new_terraform_content += terraform_block","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources, aci_aaep_to_physdomain, appended to import.tf successfully!\")","","def tf_ciscodevnet_aci_aaep_to_physdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_physdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_physdomain.{{infraAttEntityP_name}}-{{infraRsDomP_name}}-ASSOC {{infraAttEntityP_dn}}/{{infraRsDomP_rn}}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        terraform_command = command_template.render(","            infraAttEntityP_name=entry['infraAttEntityP_name'],","            infraRsDomP_name=entry['infraRsDomP_name'],","            infraAttEntityP_dn=entry['infraAttEntityP_dn'],","            infraRsDomP_rn=entry['infraRsDomP_rn']","        )","        if terraform_command not in existing_content:","            new_commands += terraform_command","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_physdomain appended to import_commands.txt successfully!\")","    "],"id":82},{"start":{"row":800,"column":0},"end":{"row":839,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_physdomain():","    csv_filepath = os.path.join(\"data\", \"py_aaep_to_physdomain.csv\")","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    terraform_template = Template(\"\"\"","resource \"aci_aaep_to_physdomain\" \"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {","    attachable_access_entity_profile_dn = aci_attachable_access_entity_profile.{{ infraAttEntityP_name }}.id","    domain_dn                           = aci_physical_domain.{{ infraRsDomP_name }}.id","    ","    lifecycle {","        ignore_changes = all","    }    ","}","\"\"\")","","    with open('import.tf', 'a+') as tf_file:","        tf_file.seek(0)","        existing_content = tf_file.read()","","    new_terraform_content = \"\"","","    for entry in entries:","        specific_resource = f'aci_aaep_to_physdomain.\"{entry[\"infraAttEntityP_name\"]}-{entry[\"infraRsDomP_name\"]}-ASSOC\"'","        if specific_resource not in existing_content:","            terraform_block = terraform_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name']","            )","            new_terraform_content += terraform_block","        else:","            print(f\"Resource {specific_resource} already exists in import.tf\")","","    if new_terraform_content:","        with open('import.tf', 'a') as tf_file:","            tf_file.write(new_terraform_content)","","    print(\"Terraform resources for aci_aaep_to_physdomain appended to import.tf successfully!\")",""]}],[{"start":{"row":839,"column":0},"end":{"row":840,"column":0},"action":"insert","lines":["",""],"id":83}],[{"start":{"row":840,"column":0},"end":{"row":874,"column":0},"action":"insert","lines":["def tf_ciscodevnet_aci_aaep_to_physdomain_commands():","    csv_filepath = os.path.join('data', 'py_aaep_to_physdomain.csv')","    with open(csv_filepath, 'r') as csv_file:","        reader = csv.DictReader(csv_file)","        entries = list(reader)","","    command_template = Template(\"\"\"","terraform import aci_aaep_to_physdomain.\"{{ infraAttEntityP_name }}-{{ infraRsDomP_name }}-ASSOC\" {{ infraAttEntityP_dn }}/{{ infraRsDomP_rn }}","\"\"\")","","    with open('import_commands.txt', 'a+') as cmd_file:","        cmd_file.seek(0)","        existing_content = cmd_file.read()","","    new_commands = \"\"","","    for entry in entries:","        specific_command = f'aci_aaep_to_physdomain.\"{entry[\"infraAttEntityP_name\"]}-{entry[\"infraRsDomP_name\"]}-ASSOC\"'","        if specific_command not in existing_content:","            terraform_command = command_template.render(","                infraAttEntityP_name=entry['infraAttEntityP_name'],","                infraRsDomP_name=entry['infraRsDomP_name'],","                infraAttEntityP_dn=entry['infraAttEntityP_dn'],","                infraRsDomP_rn=entry['infraRsDomP_rn']","            )","            new_commands += terraform_command","        else:","            print(f\"Command for {specific_command} already exists in import_commands.txt\")","","    if new_commands:","        with open('import_commands.txt', 'a') as cmd_file:","            cmd_file.write(new_commands)","","    print(\"Import commands for aci_aaep_to_physdomain appended to import_commands.txt successfully!\")",""],"id":84}],[{"start":{"row":411,"column":53},"end":{"row":411,"column":91},"action":"remove","lines":[" # Change / to _ for the resource name"],"id":85},{"start":{"row":411,"column":52},"end":{"row":411,"column":53},"action":"remove","lines":[" "]}],[{"start":{"row":847,"column":40},"end":{"row":847,"column":41},"action":"remove","lines":["\""],"id":86}],[{"start":{"row":847,"column":95},"end":{"row":847,"column":96},"action":"remove","lines":["\""],"id":87}],[{"start":{"row":1781,"column":41},"end":{"row":1781,"column":42},"action":"remove","lines":["\""],"id":88}],[{"start":{"row":1781,"column":96},"end":{"row":1781,"column":97},"action":"remove","lines":["\""],"id":89}],[{"start":{"row":1551,"column":0},"end":{"row":1551,"column":59},"action":"remove","lines":["        # You should implement the token refresh logic here"],"id":90},{"start":{"row":1550,"column":58},"end":{"row":1551,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":1429,"column":55},"end":{"row":1429,"column":102},"action":"remove","lines":["  # Skip the header when checking for existence"],"id":91}],[{"start":{"row":1714,"column":88},"end":{"row":1714,"column":89},"action":"remove","lines":["/"],"id":92},{"start":{"row":1714,"column":88},"end":{"row":1714,"column":89},"action":"insert","lines":["-"]}],[{"start":{"row":51,"column":13},"end":{"row":51,"column":14},"action":"insert","lines":["s"],"id":93},{"start":{"row":51,"column":14},"end":{"row":51,"column":15},"action":"insert","lines":["p"]},{"start":{"row":51,"column":15},"end":{"row":51,"column":16},"action":"insert","lines":["l"]},{"start":{"row":51,"column":16},"end":{"row":51,"column":17},"action":"insert","lines":["i"]},{"start":{"row":51,"column":17},"end":{"row":51,"column":18},"action":"insert","lines":["t"]}],[{"start":{"row":781,"column":88},"end":{"row":781,"column":89},"action":"remove","lines":["/"],"id":94}],[{"start":{"row":781,"column":88},"end":{"row":781,"column":89},"action":"insert","lines":["-"],"id":95}]]},"ace":{"folds":[],"scrolltop":10651,"scrollleft":0,"selection":{"start":{"row":790,"column":59},"end":{"row":790,"column":59},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":759,"state":"start","mode":"ace/mode/python"}},"timestamp":1699307512823,"hash":"9dd386118e3e35955b35d770b06b9a3f1d6f05ab"}